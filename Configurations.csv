#This file contains all possible configurations. The only supported configurations are the public configurations.
#Section Name,Setting Name,Type,Default Value,Upgrade Policy,Setting Type,Config Found In,Description
LocalLogStore,LocalLogDeletionEnabled,bool,false,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
LocalLogStore,LogDeletionAgeInDays,int,7,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,IsEnabled,bool,false,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,StoreConnectionString,string,,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,UploadIntervalInMinutes,int,5,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,LogContainerName,string,,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,CrashDumpContainerName,string,,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,LogDeletionAgeInDays,int,7,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,LogFilter,string,,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,IsAppLogCollectionEnabled,bool,false,Dynamic,DEPRECATED,No Source File (deployer only) ,"Deprecated. Please use application manifest to specify application diagnostics settings."
DiagnosticFileStore,AppLogDirectoryQuotaInMB,int,1024,Dynamic,DEPRECATED,No Source File (converted to Management.MonitoringAgentDirectoryQuota in ManagementConfig.h) ,"Deprecated. Please use application manifest to specify application diagnostics settings."
DiagnosticFileStore,TestOnlyLogDeletionAgeInMinutes,int,0,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,IsEnabled,bool,false,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,StoreConnectionString,string,,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,UploadIntervalInMinutes,int,5,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,TableName,string,,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,LogDeletionAgeInDays,int,7,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,LogFilter,string,,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,TestOnlyLogDeletionAgeInMinutes,int,0,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,UploadConcurrencyCount,int,4,Dynamic,DEPRECATED,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
Diagnostics,ConsumerInstances,string,,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"The list of DCA consumer instances"
Diagnostics,ProducerInstances,string,,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"The list of DCA producer instances"
Diagnostics,ConfigurationChangeReactionTimeInSeconds,int,5,Dynamic,INTERNAL,src\Managed\DCA\Settings.cs,"Time to wait before reacting to configuration change"
Diagnostics,AppInstanceDataEtlFlushIntervalInSeconds,int,60,Dynamic,INTERNAL,src\Managed\DCA\Settings.cs,"Interval at which to flush ETL file ETW session for application instance related events"
Diagnostics,AppInstanceDataEtlReadIntervalInMinutes,int,3,Dynamic,INTERNAL,src\Managed\DCA\Settings.cs,"Interval (in minutes) at which to read ETL files containing application instance related events"
Diagnostics,TestOnlyAppInstanceDataEtlReadIntervalInSeconds,int,0,Dynamic,TEST,src\Managed\DCA\Settings.cs,"Interval (in seconds) at which to read ETL files containing application instance related events"
Diagnostics,TestOnlyAppDataDeletionIntervalInSeconds,int,10800,Dynamic,TEST,src\Managed\DCA\Settings.cs,"Interval at which we delete old data related to application instances"
Diagnostics,AppEtwTraceDeletionAgeInDays,int,3,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Number of days after which we delete old ETL files containing application ETW traces"
Diagnostics,TestOnlyAppEtwTraceDeletionAgeInMinutes,int,0,Dynamic,TEST,src\Managed\DCA\Settings.cs,"Number of minutes after which we delete old ETL files containing application ETW traces"
Diagnostics,AppDiagnosticStoreAccessRequiresImpersonation,bool,true,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Whether or not impersonation is required when accessing diagnostic stores on behalf of the application"
Diagnostics,TestOnlyDtrDeletionAgeInMinutes,int,1440,Dynamic,TEST,src\Managed\DCA\Settings.cs,"Number of minutes after which we delete DTR files that are located on the node"
Diagnostics,MaxDiskQuotaInMB,int,65536,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Disk quota in MB for Windows Fabric log files"
Diagnostics,DiskFullSafetySpaceInMB,int,1024,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Remaining disk space in MB to protect from use by DCA"
Diagnostics,TestOnlyOldDataDeletionIntervalInSeconds,int,30,Dynamic,TEST,src\Managed\DCA\Settings.cs,"Interval (in seconds) at which we perform deletion of old files, if necessary"
Diagnostics,TestOnlyFlushDataOnDispose,bool,false,Dynamic,TEST,src\Managed\DCA\Settings.cs,"Controls whether all plugins should perform a flush operation on dispose."
Diagnostics,PluginFlushTimeoutInSeconds,int,180,Dynamic,INTERNAL,src\Managed\DCA\Settings.cs,"Timeout (in seconds) for a plugin to complete its flush operations on dispose"
Diagnostics,ApplicationLogsFormatVersion,int,0,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Version for application logs format. Supported values are 0 and 1. Version 1 includes more fields from the ETW event record than version 0."
Diagnostics,ClusterId,string,L"",Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"The unique id of the cluster. This is generated when the cluster is created."
Diagnostics,EnableTelemetry,bool,true,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"This is going to enable or disable telemetry."
Diagnostics,TestOnlyTelemetryPushTime,string,L"",Dynamic,TEST,src\Managed\DCA\Settings.cs,"Defines the specific time of the day to push telemetry."
Diagnostics,EnableCircularTraceSession,bool,false,Static,PUBLIC,src\Managed\DCA\Settings.cs,"Flag indicates whether circular trace sessions should be used."
Trace/Etw,Level,int,4,Dynamic,PUBLIC,Trace.cpp,"Trace etw level"
Trace/Etw,Filters,string,L"",Dynamic,INTERNAL,Trace.cpp,"Trace etw filters"
Trace/Etw,Sampling,int,0,Dynamic,INTERNAL,Trace.cpp,"Trace etw sampling interval"
Trace/File,Level,int,4,Dynamic,INTERNAL,Trace.cpp,"Trace file level"
Trace/File,Filters,string,L"",Dynamic,INTERNAL,Trace.cpp,"Trace file filters"
Trace/File,Path,string,Fabric.trace,Dynamic,INTERNAL,Trace.cpp,"Trace file path"
Trace/File,Option,,L"",Dynamic,INTERNAL,Trace.cpp,"Trace file options"
Trace/Console,Filters,string,L"",Dynamic,INTERNAL,Trace.cpp,"Trace console filters"
Trace/Console,Level,int,0,Dynamic,INTERNAL,Trace.cpp,"Trace console level"
PerformanceCounterLocalStore,IsEnabled,bool,true,Dynamic,PUBLIC,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Flag indicates whether performance counter collection on local node is enabled"
PerformanceCounterLocalStore,SamplingIntervalInSeconds,int,60,Dynamic,PUBLIC,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Sampling interval for performance counters being collected"
PerformanceCounterLocalStore,Counters,string,,Dynamic,PUBLIC,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Comma-separated list of performance counters to collect"
PerformanceCounterLocalStore,TestOnlyCounterFilePath,string,,Dynamic,TEST,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Path to the folder where the performance counter data is collected"
PerformanceCounterLocalStore,TestOnlyCounterFileNamePrefix,string,,Dynamic,TEST,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Prefix used in the names of the files containing performance counter data"
PerformanceCounterLocalStore,TestOnlyIncludeMachineNameInCounterFileName,bool,false,Dynamic,TEST,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Flag indicates whether the machine name is included in the names of the files containing performance counter data"
PerformanceCounterLocalStore,MaxCounterBinaryFileSizeInMB,int,1,Dynamic,PUBLIC,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Maximum size (in MB) for each performance counter binary file"
PerformanceCounterLocalStore,NewCounterBinaryFileCreationIntervalInMinutes,int,10,Dynamic,PUBLIC,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Maximum interval (in seconds) after which a new performance counter binary file is created"
Common,DebugBreakEnabled,bool,false,Static,TEST,src\Common\AssertWF.h,""
Common,TestAssertEnabled,bool,false,Static,TEST,src\Common\AssertWF.h,""
Setup,FabricDataRoot,string,"",NotAllowed,PUBLIC,Setup\FabricDeployer\Constants.cs,"The Windows Fabric data root directory"
Setup,FabricLogRoot,string,"",NotAllowed,PUBLIC,Setup\FabricDeployer\Constants.cs,"The windows fabric log root directory."
Setup,NodesToBeRemoved,string,"",Dynamic,PUBLIC,Setup\FabricDeployer\Constants.cs,"The nodes which should be removed as part of configuration upgrade. (Only for Standalone Deployments)"
Setup,ServiceRunAsAccountName,string,"",NotAllowed,PUBLIC,Setup\FabricDeployer\Constants.cs,"The account name under which to run fabric host service."
Setup,ServiceRunAsPassword,string,"",NotAllowed,TEST,Setup\FabricDeployer\Constants.cs,"The account password under which to run fabric host service."
Setup,ServiceStartupType,string,"",NotAllowed,TEST,Setup\FabricDeployer\Constants.cs,"The startup type of the fabric host service."
Setup,SkipFirewallConfiguration,bool,false,NotAllowed,PUBLIC,Setup\FabricDeployer\Constants.cs,"Whether to skip firewall settings.
TransactionalReplicator,InitialCopyQueueSize,uint,64,Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2."
TransactionalReplicator,MaxCopyQueueSize,uint,16384,Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators."
TransactionalReplicator,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(15),Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator."
TransactionalReplicator,MaxReplicationMessageSize,uint,52428800,Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Maximum message size of replication operations. Default is 50MB."
TransactionalReplicator,ReplicatorAddress,wstring,"localhost:0",Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations"
TransactionalReplicator,InitialPrimaryReplicationQueueSize,uint,64,Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"This value defines the initial size for the queue which maintains the replication operations on the primary. Note that it must be a power of 2."
TransactionalReplicator,MaxPrimaryReplicationQueueSize,uint,8192,Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"This is the maximum number of operations that could exist in the primary replication queue. Note that it must be a power of 2."
TransactionalReplicator,MaxPrimaryReplicationQueueMemorySize,uint,0,Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"This is the maximum value of the primary replication queue in bytes."
TransactionalReplicator,InitialSecondaryReplicationQueueSize,uint,64,Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"This value defines the initial size for the queue which maintains the replication operations on the secondary. Note that it must be a power of 2."
TransactionalReplicator,MaxSecondaryReplicationQueueSize,uint,16384,Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"This is the maximum number of operations that could exist in the secondary replication queue. Note that it must be a power of 2."
TransactionalReplicator,MaxSecondaryReplicationQueueMemorySize,uint,0,Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"This is the maximum value of the secondary replication queue in bytes."
TransactionalReplicator,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation."
TransactionalReplicator,SecondaryClearAcknowledgedOperations,bool,false,Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Bool which controls if the operations on the secondary replicator are cleared once they are acknowledged to the primary(flushed to the disk). Settings this to TRUE can result in additional disk reads on the new primary, while catching up replicas after a failover."
TransactionalReplicator,MaxStreamSizeInMB,int,1024,NotAllowed,INTERNAL,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"DEPRECATED"
TransactionalReplicator,MaxMetadataSizeInKB,int,4,NotAllowed,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Maximum size of the log stream metadata."
TransactionalReplicator,MaxRecordSizeInKB,int,1024,NotAllowed,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Maximum size of a log stream record."
TransactionalReplicator,CheckpointThresholdInMB,int,50,Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"A checkpoint will be initiated when the log usage exceeds this value."
TransactionalReplicator,MaxAccumulatedBackupLogSizeInMB,int,800,Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Max accumulated size (in MB) of backup logs in a given backup log chain. An incremental backup requests will fail if the incremental backup would generate a backup log that would cause the accumulated backup logs since the relevant full backup to be larger than this size. In such cases, user is required to take a full backup."
TransactionalReplicator,OptimizeForLocalSSD,bool,false,NotAllowed,INTERNAL,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"DEPRECATED"
TransactionalReplicator,MaxWriteQueueDepthInKB,int,0,NotAllowed,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"int for maximum write queue depth that the core logger can use as specified in kilobytes for the log that is associated with this replica. This value is the maximum number of bytes that can be outstanding during core logger updates. It may be 0 for the core logger to compute an appropriate value or a multiple of 4. "
TransactionalReplicator,SharedLogId,string,,NotAllowed,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Shared log identifier. This is a guid and should be unique for each shared log."
TransactionalReplicator,SharedLogPath,string,,NotAllowed,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Path to the shared log. If this value is empty then the default shared log is used."
TransactionalReplicator,OptimizeLogForLowerDiskUsage,bool,true,NotAllowed,INTERNAL,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"DEPRECATED "
TransactionalReplicator,Test_LoggingEngine,string,"ktl",NotAllowed,INTERNAL,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"DEPRECATED "
TransactionalReplicator,SlowApiMonitoringDuration,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Specify duration for api before warning health event is fired."
TransactionalReplicator,MinLogSizeInMB,int,0,Static,PUBLIC,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Minimum size of the transactional log. The log will not be allowed to truncate to a size below this setting. 0 indicates that the replicator will determine the minimum log size according to other settings. Increasing this value increases the possibility of doing partial copies and incremental backups since chances of relevant log records being truncated is lowered."
TransactionalReplicator,TruncationThresholdFactor,int,2,Static,INTERNAL,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Determines at what size of the log, truncation will be triggered. Truncation threshold is determined by MinLogSizeInMB multiplied by TruncationThresholdFactor. TruncationThresholdFactor must be greater than 1. MinLogSizeInMB * TruncationThresholdFactor must be less than MaxStreamSizeInMB."
TransactionalReplicator,ThrottlingThresholdFactor,int,4,Static,INTERNAL,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Determines at what size of the log, the replica will start being throttled. Throttling threshold is determined by Max((MinLogSizeInMB * ThrottlingThresholdFactor),(CheckpointThresholdInMB * ThrottlingThresholdFactor)). ThrottlingThresholdInMB must be greater than TruncationThresholdInMB. TruncationThresholdInMB must be less than MaxStreamSizeInMB."
TransactionalReplicator,Test_LogMinDelayIntervalMilliseconds,int,0,Static,TEST,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Minimum delay when flushing log"
TransactionalReplicator,Test_LogMaxDelayIntervalMilliseconds,int,0,Static,TEST,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Maximum delay when flushing log"
TransactionalReplicator,Test_LogDelayRatio,double,0,Static,TEST,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Represents percent of flushes to be delayed in log"
TransactionalReplicator,Test_LogDelayProcessExitRatio,double,0,Static,TEST,ReliableStateManagerReplicatorSettingsConfigurationNames.cs,"Represents percent of slow flushes after which the process crashes to induce false progress"
ReliableStateProvider,SweepThreshold,int,0,Static,INTERNAL,TStoreConstants.cs,"State providers cache read items in memory. Once a threshold of cached items is reached, items can be swept from the cache via an LRU algorithm. 0 (the default) tells Service Fabric to automatically determine the maximum number of items to cache before sweeping. -1 disables sweeping (all items are cached and none are evicted). Other valid cached item limits are between 1 and 5000000, inclusive. Enumerations are not cached."
ReliableStateProvider,EnableStrict2PL,bool,false,Static,INTERNAL,TStoreConstants.cs,"This configurations is to enable or disable Strict 2PL. When Strict 2PL is enabled, read locks will be released at the beginning of commit without waiting for the commit to become stable. When Strict 2PL is disabled, Rigourous 2PL is used. This will cause read locks to be released when the commit is stable."
FabricClient,NodeAddresses,wstring,L"",Static,PUBLIC,src\client\ClientConfig.h,A collection of addresses (connection strings) on different nodes that can be used to communicate with the the Naming Service. Initially the Client connects selecting one of the addresses randomly. If more than one connection string is supplied and a connection fails because of a communication or timeout error; the Client switches to use the next address sequentially. See the Naming Service Address retry section for details on retries semantics. 
FabricClient,ConnectionInitializationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(2),Dynamic,PUBLIC,src\client\ClientConfig.h,Specify timespan in seconds. Connection timeout interval for each time client tries to open a connection to the gateway 
FabricClient,PartitionLocationCacheLimit,int,100000,Static,PUBLIC,src\client\ClientConfig.h,Number of partitions cached for service resolution (set to 0 for no limit). 
FabricClient,ServiceChangePollInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\client\ClientConfig.h,Specify timespan in seconds. The interval between consecutive polls for service changes from the client to the gateway for registered service change notifications callbacks 
FabricClient,KeepAliveIntervalInSeconds,int,20,Static,PUBLIC,src\client\ClientConfig.h,The interval at which the FabricClient transport sends keep-alive messages to the gateway. For 0; keepAlive is disabled. Must be a positive value 
FabricClient,MaxServiceChangePollBatchedRequests,int,0,Dynamic,TEST,src\client\ClientConfig.h,The maximum number of requests that can be packaged together in a poll request. Used to test the notification paging of the requests from client to gateway. Default is 0; which shows that the feature is disabled. 
FabricClient,HealthOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\client\ClientConfig.h,Specify timespan in seconds. The timeout for a report message sent to Health Manager. 
FabricClient,HealthReportSendInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,PUBLIC,src\client\ClientConfig.h,Specify timespan in seconds. The interval at which reporting component sends accumulated health reports to Health Manager. 
FabricClient,IsHealthReportingEnabled,bool,true,NotAllowed,INTERNAL,src\client\ClientConfig.h,Whether to enable health reporting 
FabricClient,MaxNumberOfHealthReportsPerMessage,int,500,Dynamic,INTERNAL,src\client\ClientConfig.h,The maximum number of reports that can be batched in the message sent to Health Manager. 
FabricClient,MaxNumberOfHealthReports,int,10000,Static,INTERNAL,src\client\ClientConfig.h,The maximum number of health reports that can be queued for processing by a reporting component. 
FabricClient,HealthReportRetrySendInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,PUBLIC,src\client\ClientConfig.h,Specify timespan in seconds. The interval at which reporting component re-sends accumulated health reports to Health Manager. 
FabricClient,HealthReportSendBackOffStepInSeconds,int,5,Dynamic,INTERNAL,src\client\ClientConfig.h,The back off interval step added at each successive ServiceTooBusy reply from Health Manager; upto HealthReportSendMaxBackOffInterval. 
FabricClient,HealthReportSendMaxBackOffInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,INTERNAL,src\client\ClientConfig.h,Specify timespan in seconds. The max back off interval that can be applied when Health Manager returns ServiceTooBusy. 
FabricClient,RetryBackoffInterval,TimeSpan,Common::TimeSpan::FromSeconds(3),Dynamic,PUBLIC,src\client\ClientConfig.h,Specify timespan in seconds. The back-off interval before retrying the operation 
FabricClient,MaxFileSenderThreads,uint,10,Static,PUBLIC,src\client\ClientConfig.h,The max number of files that are transferred in parallel 
Common,PerfMonitorInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Dynamic,PUBLIC,src\Common\CommonConfig.h,Specify timespan in seconds. Performance monitoring interval. Setting to 0 or negative value disables monitoring 
Common,PerfMonitorTraceRatio,uint,1,Dynamic,INTERNAL,src\Common\CommonConfig.h,Performance monitoring trace interval; specified as multiple of PerfMonitorInterval; setting to 0 disables such tracing 
Common,MinResourceStringBufferSizeInWChars,int,256,Static,INTERNAL,src\Common\CommonConfig.h,Minimum buffer allocated for reading resource strings 
Common,MaxResourceStringBufferSizeInWChars,int,32768,Static,INTERNAL,src\Common\CommonConfig.h,Maximum buffer allocated for reading resource strings 
Common,MaxNamingUriLength,int,512,Static,INTERNAL,src\Common\CommonConfig.h,Maximum allowed Naming URI length including the scheme (depends on local store limits) 
Common,SendReplyBufferTimeout,TimeSpan,Common::TimeSpan::FromSeconds(2.0),Dynamic,INTERNAL,src\Common\CommonConfig.h,Specify timespan in seconds. The timeout buffer used to send back partial reply when processing times out 
Common,LockTraceNamePrefix,string,"",Static,INTERNAL,src\Common\CommonConfig.h,The locks to enable in lock traces 
Common,MultipleAsyncCallbackInvokeAssertEnabled,bool,true,Dynamic,INTERNAL,src\Common\CommonConfig.h,
HealthManager,EnableApplicationTypeHealthEvaluation,bool,false,Static,PUBLIC,src\Common\CommonConfig.h,Cluster health evaluation policy: enable per application type health evaluation 
Common,EnableEndpointV2,bool,false,NotAllowed,INTERNAL,src\Common\CommonConfig.h,See 7268869 and 7278671.  Prior to this; some managed system services did not secure their replicator endpoints.  This config is used to determine whether to read in cluster security settings and pass them into the replicator.  For existing clusters; this config is false and can never be changed.  For new clusters; this should be explicitly set to true so the aforementioned services will read cluster security settings and have their replicators will consume them. 
Common,MaxLongStringSize,int,1024 * 1024,Dynamic,INTERNAL,src\Common\CommonConfig.h,Most public APIs parsing string input restrict the incoming string size to ParameterValidator::MaxStringSize (4K). Certain APIs are allowed to accept longer strings using this config. 
FabricNode,NodeId,wstring,L"0",Static,INTERNAL,src\Common\FabricNodeConfig.h,This setting specifies the Id that identifies a node in the cluster for internal communication. Each Node in the cluster must have a unique NodeId. 
FabricNode,NodeVersion,FabricVersionInstance,FabricVersionInstance::Default,Dynamic,INTERNAL,src\Common\FabricNodeConfig.h,This setting specifies the version of the FabricNode. The value is set by FabricDeployer during the deployment time. The version string of the format <CodeVersion>:<ConfigVersion>:<InstanceId>. This setting can be dynamically updated during the configuration only upgrades or on instance id changes. 
FabricNode,NodeAddress,wstring,L"<IPorFullyQualifiedDomainName>:<Port>",Static,INTERNAL,src\Common\FabricNodeConfig.h,Endpoint for federation layer communications between one node and another. If the Node is a Seed/Voter node; then this address is also specified in the votes section of all nodes. Required to be set; default here is an invalid value. 
FabricNode,IPAddressOrFQDN,wstring,L"0.0.0.0",Static,INTERNAL,src\Common\FabricNodeConfig.h,IPAddressOrFQDN property specified in ClusterManifest 
FabricNode,LeaseAgentAddress,wstring,L"<IPorFullyQualifiedDomainName>:<Port>",Static,INTERNAL,src\Common\FabricNodeConfig.h,Endpoint for communication between the lease drivers of different nodes. This endpoint is exclusive to lease traffic. Required to be set; default here is an invalid value. 
FabricNode,RuntimeServiceAddress,wstring,L"0.0.0.0:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,Address for the IPC channel between the Fabric Runtime in the user service host process and Windows Fabric service on this node. 
FabricNode,ClientConnectionAddress,wstring,L"<IPorFullyQualifiedDomainName>:<Port>",Static,INTERNAL,src\Common\FabricNodeConfig.h,This setting specifies the address than Naming Clients can talk to contact the Naming Service in the cluster through this particular node. Not having this address; clients are not able to contact the naming service through this node. Required to be set; default here is an invalid value. 
FabricNode,GatewayIpcAddress,wstring,L"localhost:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,Address for the IPC channel between Fabric gateway and Fabric 
FabricNode,HttpGatewayListenAddress,wstring,L"<IPorFullyQualifiedDomainName>:<Port>",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address where the http gateway listens. Required to be set; default here is an invalid value. 
FabricNode,HttpGatewayProtocol,wstring,L"",Static,INTERNAL,src\Common\FabricNodeConfig.h,
FabricNode,HttpApplicationGatewayListenAddress,wstring,L"<IPorFullyQualifiedDomainName>:<Port>",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address where the http app gateway listens. Required to be set; if the app gateway is enabled. 
FabricNode,HttpApplicationGatewayProtocol,wstring,L"",Static,INTERNAL,src\Common\FabricNodeConfig.h,
FabricNode,SharedLogFilePath,wstring,L"",Static,INTERNAL,src\Common\FabricNodeConfig.h,Path and file name to location to place shared log container. Use L"" for using default path under fabric data root. 
FabricNode,SharedLogFileId,wstring,L"",Static,INTERNAL,src\Common\FabricNodeConfig.h,Unique guid for shared log container. Use L"" if using default path under fabric data root. 
FabricNode,SharedLogFileSizeInMB,int,0,Static,INTERNAL,src\Common\FabricNodeConfig.h,The number of MB to allocate in the shared log container 
FabricNode,ClusterManagerReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address that cluster manager uses to replicate to its other replica. 
FabricNode,RepairManagerReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address that repair manager uses to replicate to its other replica. 
FabricNode,ImageStoreServiceReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address that image store service uses to replicate to its other replica. 
FabricNode,NamingReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address that naming service uses to replicate to its other replica. 
FabricNode,FailoverManagerReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address that Failover manager uses to replicate to its other replica. 
FabricNode,FaultAnalysisServiceReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address that FaultAnalysisService uses to replicate to its other replica. 
FabricNode,UpgradeServiceReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address that UpgradeService uses to replicate to its other replica. 
FabricNode,WorkingDir,wstring,L"",Static,INTERNAL,src\Common\FabricNodeConfig.h,Path used by the Fabric Service to read or write information for local operation. This is the base directory for all other directories specified at the node; unless those directories specify full paths. If no value is provided then it takes as base the directory in which the Service is running. 
FabricNode,InstanceName,wstring,L"",Static,INTERNAL,src\Common\FabricNodeConfig.h,Node name 
FabricNode,NodeType,wstring,L"",Static,INTERNAL,src\Common\FabricNodeConfig.h,Type of the Node defined in the cluster manifest 
FabricNode,IsScaleMin,bool,false,Static,INTERNAL,src\Common\FabricNodeConfig.h,specifies if this node is part of the scalemin deployment or not 
FabricNode,StateTraceInterval,TimeSpan,TimeSpan::FromSeconds(300),Static,PUBLIC,src\Common\FabricNodeConfig.h,Specify timespan in seconds. The interval for tracing node status on each node and up nodes on FM/FMM. 
FabricNode,AssertOnNodeFailure,bool,false,Static,INTERNAL,src\Common\FabricNodeConfig.h,Whether to assert and kill the process when a node fails (because of lease for example). 
FabricNode,SystemServiceInitializationTimeout,TimeSpan,TimeSpan::FromSeconds(1),Static,INTERNAL,src\Common\FabricNodeConfig.h,Specify timespan in seconds. Timeout used for requests to FM when initializing system services 
FabricNode,SystemServiceInitializationRetryInterval,TimeSpan,TimeSpan::FromSeconds(1),Static,INTERNAL,src\Common\FabricNodeConfig.h,Specify timespan in seconds. Retry interval used for requests to FM when initializing system services 
NodeDomainIds,UpgradeDomainId,wstring,L"",Static,PUBLIC,src\Common\FabricNodeConfig.h,Describes the upgrade domain a node belongs to. 
NodeDomainIds,PropertyGroup,NodeFaultDomainIdCollection,None,Static,PUBLIC,src\Common\FabricNodeConfig.h,Describes the fault domains a node belongs to. The fault domain is defined through a URI that describes the location of the node in the datacenter.  Fault Domain URIs are of the format fd:/fd/ followed by a URI path segment. 
NodeProperties,PropertyGroup,NodePropertyCollectionMap,None,Static,PUBLIC,src\Common\FabricNodeConfig.h,A collection of string key-value pairs for node properties. 
NodeCapacities,PropertyGroup,NodeCapacityCollectionMap,None,Static,PUBLIC,src\Common\FabricNodeConfig.h,A collection of node capacities for different metrics. 
FabricNode,StartApplicationPortRange,int,0,Static,PUBLIC,src\Common\FabricNodeConfig.h,Start of the application ports managed by hosting subsystem. Required if EndpointFilteringEnabled is true in Hosting. 
FabricNode,EndApplicationPortRange,int,0,Static,PUBLIC,src\Common\FabricNodeConfig.h,End (no inclusive) of the application ports managed by hosting subsystem. Required if EndpointFilteringEnabled is true in Hosting. 
FabricNode,ClusterX509StoreName,wstring,L"My",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Name of X.509 certificate store that contains cluster certificate for securing intra-cluster communication 
FabricNode,ClusterX509FindType,wstring,L"FindByThumbprint",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Indicates how to search for cluster certificate in the store specified by ClusterX509StoreName Supported values: "FindByThumbprint"; "FindBySubjectName" With "FindBySubjectName"; when there are multiple matches; the one with the furthest expiration is used. 
FabricNode,ClusterX509FindValue,wstring,L"",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Search filter value used to locate cluster certificate. 
FabricNode,ClusterX509FindValueSecondary,wstring,L"",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,
FabricNode,ServerAuthX509StoreName,wstring,L"My",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Name of X.509 certificate store that contains server certificate for entree service 
FabricNode,ServerAuthX509FindType,wstring,L"FindByThumbprint",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Indicates how to search for server certificate in the store specified by ServerAuthX509StoreName Supported value: FindByThumbprint; FindBySubjectName 
FabricNode,ServerAuthX509FindValue,wstring,L"",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Search filter value used to locate server certificate. 
FabricNode,ServerAuthX509FindValueSecondary,wstring,L"",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,
FabricNode,ClientAuthX509StoreName,wstring,L"My",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Name of the X.509 certificate store that contains certificate for default admin role FabricClient. 
FabricNode,ClientAuthX509FindType,wstring,L"FindByThumbprint",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Indicates how to search for certificate in the store specified by ClientAuthX509StoreName Supported value: FindByThumbprint; FindBySubjectName 
FabricNode,ClientAuthX509FindValue,wstring,L"",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Search filter value used to locate certificate for default admin role FabricClient 
FabricNode,ClientAuthX509FindValueSecondary,wstring,L"",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,
FabricNode,UserRoleClientX509StoreName,wstring,L"My",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Name of the X.509 certificate store that contains certificate for default user role FabricClient. 
FabricNode,UserRoleClientX509FindType,wstring,L"FindByThumbprint",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Indicates how to search for certificate in the store specified by UserRoleClientX509StoreName Supported value: FindByThumbprint; FindBySubjectName 
FabricNode,UserRoleClientX509FindValue,wstring,L"",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Search filter value used to locate certificate for default user role FabricClient 
FabricNode,UserRoleClientX509FindValueSecondary,wstring,L"",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,
FabricNode,StartStopFileName,wstring,L"StartStopNode.txt",Static,INTERNAL,src\Common\FabricNodeConfig.h,
FabricNode,StoppedNodeExpiredTimerInterval,int,60,Static,INTERNAL,src\Common\FabricNodeConfig.h,How often the timer that checks if stopped state has expired fires 
NodeGlobal,OpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,src\Common\FabricNodeGlobalConfig.h,Specify timespan in seconds. FabricNode open timeout 
NodeGlobal,CloseTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,src\Common\FabricNodeGlobalConfig.h,Specify timespan in seconds. FabricNode close timeout 
Paas,ClusterId,wstring,L"",NotAllowed,PUBLIC,src\Common\PaasConfig.h,X509 certificate store used by fabric for configuration protection 
Security,SettingsX509StoreName,wstring,L"MY",Dynamic,PUBLIC,src\Common\SecurityConfig.h,X509 certificate store used by fabric for configuration protection 
Security,NegotiationTimeout,TimeSpan,TimeSpan::FromSeconds(60),Dynamic,DEPRECATED,src\Common\SecurityConfig.h,Specify timespan in seconds. Security negotiation timeout; deprecated by Transport/ConnectionOpenTimeout 
Security,SessionExpiration,TimeSpan,TimeSpan::FromSeconds(3600 * 24 * 7),Static,PUBLIC,src\Common\SecurityConfig.h,Specify timespan in seconds. Max duration for a secure session; set to 0 to disable session expiration. 
Security,SessionExpirationCloseDelay,TimeSpan,Common::TimeSpan::FromMinutes(3),Dynamic,INTERNAL,src\Common\SecurityConfig.h,Specify timespan in seconds. Close delay at session expiration to avoid dropping messages 
Security,MaxSessionRefreshDelay,TimeSpan,TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\Common\SecurityConfig.h,Specify timespan in seconds. Max delay before closing existing secure session; after security settings are updated. The random delay is added to avoid a burst of new session negotiation after the updates. 
Security,AuthErrorCloseDelay,TimeSpan,TimeSpan::FromSeconds(3),Dynamic,DEPRECATED,src\Common\SecurityConfig.h,Specify timespan in seconds. Close delay for authentication/authorization error feedback to be delivered to remote side. 
Transport,MaxMessageSizeBeforeSessionIsSecured,uint,128 * 1024,Static,INTERNAL,src\Common\SecurityConfig.h,Use a small max message size before security negotiation is completed 
Security,ClusterCredentialType,wstring,L"None",NotAllowed,PUBLIC,src\Common\SecurityConfig.h,Indicates the type of security credentials to use in order to secure the cluster. Valid values are "None/X509/Windows" 
Security,ClusterProtectionLevel,wstring,L"EncryptAndSign",NotAllowed,INTERNAL,src\Common\SecurityConfig.h,The string value used to specify whether the messages (header and body) have integrity and confidentiality guarantees applied to them when sent between the nodes of a cluster. Valid values are "None/Sign/EncryptAndSign" 
Security,AllowDefaultClient,bool,true,Static,INTERNAL,src\Common\SecurityConfig.h,Allows secondary thumbprint in whitelist 
Security,ServerAuthCredentialType,wstring,L"None",Static,PUBLIC,src\Common\SecurityConfig.h,Indicates the type of security credentials to use in order to secure the communication between FabricClient and the Cluster. Valid values are "None/X509/Windows" 
Security,ClientServerProtectionLevel,wstring,L"EncryptAndSign",Static,INTERNAL,src\Common\SecurityConfig.h,The string value used to specify whether the messages (header and body) have  integrity and confidentiality guarantees applied to them when sent between client and server. Valid values are "None/Sign/EncryptAndSign" 
Security,FramingProtectionEnabled,bool,false,Dynamic,INTERNAL,src\Common\SecurityConfig.h,Whether transport framing data should be protected after secure session is established 
Security,X509ExtraFramingEnabled,bool,true,Dynamic,DEPRECATED,src\Common\SecurityConfig.h,Whether to add our own message framing on top of TLS/SSL record protocol for data messages after session is secured. Before session is secured; such extra framing is always added for security negotiation messages. 
Security,ClientRoleEnabled,bool,false,Static,PUBLIC,src\Common\SecurityConfig.h,Indicates if client role is enabled; when set to true; clients are assigned roles based on their identities. For V2; enabling this means clients not in AdminClientCommonNames/AdminClientIdentities can only execute read-only operations. 
Security,ServerShouldSendConnectionAuthStatus,bool,true,Dynamic,DEPRECATED,src\Common\SecurityConfig.h,Whether server side should send connection authorization status to clients 
Security,MaxWaitForConnectionAuthStatus,TimeSpan,TimeSpan::FromSeconds(30),Dynamic,DEPRECATED,src\Common\SecurityConfig.h,Specify timespan in seconds. Timeout for waiting for connection authorization status 
Security,MaxWaitForConnectionAuthStatusIfNotPromised,TimeSpan,TimeSpan::FromSeconds(1),Dynamic,DEPRECATED,src\Common\SecurityConfig.h,Specify timespan in seconds. Timeout for waiting for connection authorization status; when talking to pre-3.1 servers that does not send connection authorization status to clients. This can be removed after all clusters are upgraded to 3.1 or beyond. 
Security,ClusterCertThumbprints,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Thumbprints of certificates allowed to join the cluster; a comma separated name list. 
Security,ServerCertThumbprints,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Thumbprints of server certificates used by cluster to talk to clients; clients use this to authenticate the cluster. It is a comma separated name list. 
Security,ClientCertThumbprints,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Thumbprints of certificates used by clients to talk to the cluster; cluster uses this authorize incoming connection. It is a comma separated name list. 
Security,AdminClientCertThumbprints,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Thumbprints of certificates used by clients in admin role. It is a comma separated name list. 
Security,ClusterAllowedCommonNames,wstring,L"",Dynamic,DEPRECATED,src\Common\SecurityConfig.h,Certificate common names of remote subjects allowed to join the cluster; a setting used by cluster node to recognize other peer cluster nodes. It is a comma separated name list. Deprecated by ClusterX509Names 
Security/ClusterX509Names,PropertyGroup,X509NameMap,None,Dynamic,PUBLIC,src\Common\SecurityConfig.h,
Security,ServerAuthAllowedCommonNames,wstring,L"",Dynamic,DEPRECATED,src\Common\SecurityConfig.h,Certificate common names of expected naming gateway servers; a setting used by default fabric clients. It is a comma separated name list. Deprecated by ServerX509Names 
Security/ServerX509Names,PropertyGroup,X509NameMap,None,Dynamic,PUBLIC,src\Common\SecurityConfig.h,
Security,ClientAuthAllowedCommonNames,wstring,L"",Dynamic,DEPRECATED,src\Common\SecurityConfig.h,Certificate common names of fabric clients allowed to talk to naming gateway; a setting used by naming gateway to authorize fabric clients. It is a comma separated name list; common name of default fabric client is automatically added to the list. Deprecated by ClientX509Names; "ClientCertificate" will not be allowed implicitly. 
Security/ClientX509Names,PropertyGroup,X509NameMap,None,Dynamic,PUBLIC,src\Common\SecurityConfig.h,
Security,AdminClientCommonNames,wstring,L"",Dynamic,DEPRECATED,src\Common\SecurityConfig.h,Certificate common names of fabric clients in admin role; used to authorize privileged fabric operations. It is a comma separated list. Deprecated by AdminClientX509Names; "ClientCertificate" will not be allowed implicitly. 
Security/AdminClientX509Names,PropertyGroup,X509NameMap,None,Dynamic,PUBLIC,src\Common\SecurityConfig.h,
Security,ClusterCertIssuers,wstring,L"",Dynamic,DEPRECATED,src\Common\SecurityConfig.h,X509 certificate issuers for cluster certificates; a comma seperated thumbprint list. Issuer Checking is disabled when the list is empty; which is the default. ClusterX509Names supports per-name issuer pinning 
Security,ServerCertIssuers,wstring,L"",Dynamic,DEPRECATED,src\Common\SecurityConfig.h,X509 certificate issuers for server certificates; a comma seperated thumbprint list. Issuer Checking is disabled when the list is empty; which is the default. ServerX509Names supports per-name issuer pinning 
Security,ClientCertIssuers,wstring,L"",Dynamic,DEPRECATED,src\Common\SecurityConfig.h,X509 certificate issuers for client certificates; a comma seperated thumbprint list. Issuer Checking is disabled when the list is empty; which is the default. ClientX509Names and AdminClientX509Name support per-name issuer pinning 
Security,CrlCheckingFlag,uint,0x40000000,Dynamic,PUBLIC,src\Common\SecurityConfig.h,Default certificate chain validation flag; may be overridden by component specific flag; e.g. Federation/X509CertChainFlags 0x10000000 CERT_CHAIN_REVOCATION_CHECK_END_CERT 0x20000000 CERT_CHAIN_REVOCATION_CHECK_CHAIN 0x40000000 CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT 0x80000000 CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY Setting to 0 disables CRL checking Full list of supported values is documented by dwFlags of CertGetCertificateChain: http://msdn.microsoft.com/en-us/library/windows/desktop/aa376078(v=vs.85).aspx 
Security,CrlRetrivalTimeout,TimeSpan,Common::TimeSpan::Zero,Dynamic,INTERNAL,src\Common\SecurityConfig.h,Specify timespan in seconds. Timeout for retrieving CRL; accumulative when there are multiple CRLs to retrieve for a given chain. For details; refer to CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT in http://msdn.microsoft.com/en-us/library/windows/desktop/aa376078(v=vs.85).aspx Default is zero; which means system default timeout value will be used. 
Security,IgnoreCrlOfflineError,bool,false,Dynamic,PUBLIC,src\Common\SecurityConfig.h,Whether to ignore CRL offline error when server side verifies incoming client certifiates 
Security,IgnoreSvrCrlOfflineError,bool,true,Dynamic,PUBLIC,src\Common\SecurityConfig.h,Whether to ignore CRL offline error when client side verifies incoming server certifiates; default to true. Attacks with revoked server certifidates require compromising DNS; harder than with revoked client certificates. 
Security,CrlDisablePeriod,TimeSpan,Common::TimeSpan::FromMinutes(15),Dynamic,PUBLIC,src\Common\SecurityConfig.h,Specify timespan in seconds. How long CRL checking is disabled for a given certificate after encountering offline error; if CRL offline error can be ignored. 
Security,CrlOfflineErrCacheCapacity,uint,10000,Dynamic,INTERNAL,src\Common\SecurityConfig.h,
Security,CrlOfflineHealthReportTtl,TimeSpan,Common::TimeSpan::FromMinutes(1440),Dynamic,PUBLIC,src\Common\SecurityConfig.h,Specify timespan in seconds. 
Security,CrlOfflineReportThreshold,TimeSpan,Common::TimeSpan::FromMinutes(5),Dynamic,INTERNAL,src\Common\SecurityConfig.h,Specify timespan in seconds. For a given certificate thumbprint; a new error is only reported if it is newer than the existing one by this threshold value 
Security,CrlTestEnabled,bool,false,Dynamic,TEST,src\Common\SecurityConfig.h,
Security,CrlTestStartDelay,TimeSpan,Common::TimeSpan::Zero,Dynamic,TEST,src\Common\SecurityConfig.h,Specify timespan in seconds. 
Security,CrlTestPeriod,TimeSpan,Common::TimeSpan::FromMinutes(10000),Dynamic,TEST,src\Common\SecurityConfig.h,Specify timespan in seconds. 
Security,CrlOfflineProbability,double,0.1,Dynamic,TEST,src\Common\SecurityConfig.h,
Security,LocalCertCheckingEnabled,bool,false,Static,DEPRECATED,src\Common\SecurityConfig.h,Local certificate chain verification makes things easier for investigating certificate related failures; but in failure cases; it prevents the execution of remote certificate checking logic; which security really depends on; setting this to false enables testing of remote certificate checking. 
Security,SkipX509CredentialExpirationChecking,bool,false,Static,INTERNAL,src\Common\SecurityConfig.h,To allow testing with expired certificates; SkipX509CredentialExpirationChecking needs to be set true; besides setting LocalCertCheckingEnabled false. 
Security,CertificateMonitorInterval,TimeSpan,Common::TimeSpan::FromMinutes(60),Static,INTERNAL,src\Common\SecurityConfig.h,Specify timespan in seconds. How often certificate update is checked. This is used to detect certificate credential update where X509FindType & X509FindValue stay unchanged: 1. certificate renewed and FindBySubjectName is used. 2. find value has a primary and a secondary; one of them is being installed or uninstalled 
Security,CertificateExpirySafetyMargin,TimeSpan,Common::TimeSpan::FromMinutes(129600),Static,PUBLIC,src\Common\SecurityConfig.h,Specify timespan in seconds. Safety margin for certificate expiration; certificate health report status changes from OK to Warning when expiration is closer than this. Default is 90 days. 
Security,ClientClaimAuthEnabled,bool,false,Static,PUBLIC,src\Common\SecurityConfig.h,Indicates if claim based authentication is enabled on clients; setting this true implicitly sets ClientRoleEnabled. 
Security,ClientClaims,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,All possible claims expected from clients for connecting to gateway. This is a 'OR' list: ClaimsEntry || ClaimsEntry || ClaimsEntry ... each ClaimsEntry is a "AND" list: ClaimType=ClaimValue && ClaimType=ClaimValue && ClaimType=ClaimValue ... 
Security,AdminClientClaims,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,All possible claims expected from admin clients; the same format as ClientClaims; this list internally gets added to ClientClaims; so no need to also add the same entries to ClientClaims. 
Security,UseTestClaimsAuthenticator,bool,false,Static,TEST,src\Common\SecurityConfig.h,Indicates that the dummy authenticator should be used. This is used by FabricTest. 
Security,ClusterSpn,wstring,L"",NotAllowed,PUBLIC,src\Common\SecurityConfig.h,Service principal name of the cluster; when fabric runs as a single domain user (gMSA/domain user account). It is the SPN of lease listeners and listeners in fabric.exe: federation listeners; internal replication listeners; runtime service listener and naming gateway listener. This should be left empty when fabric runs as machine accounts; in which case connecting side compute listener SPN from listener transport address. 
Security,ClusterIdentities,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Windows identities of cluster nodes; used for cluster membership authorization. It is a comma separated list; each entry is a domain account name or group name 
Security,ClientIdentities,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Windows identities of FabricClient; naming gateway uses this to authorize incoming connections. It is a comma separated list; each entry is a domain account name or group name. For convenience; the account that runs fabric.exe is automatically allowed; so are group ServiceFabricAllowedUsers and ServiceFabricAdministrators. 
Security,AdminClientIdentities,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Windows identities of fabric clients in admin role; used to authorize privileged fabric operations. It is a comma separated list; each entry is a domain account name or group name. For convenience; the account that runs fabric.exe is automatically assigned admin role; so is group ServiceFabricAdministrators. 
Security,NegotiateForWindowsSecurity,bool,true,NotAllowed,PUBLIC,src\Common\SecurityConfig.h,Use "Negotiate" as the security provider for "Windows" security. By default; "Kerberos" is used to be backward compatible with existing clusters wth "Windows" security. The default value will be changed in future milestones. 
Security,FabricHostSpn,wstring,L"",Static,PUBLIC,src\Common\SecurityConfig.h,Service principal name of FabricHost; when fabric runs as a single domain user (gMSA/domain user account) and FabricHost runs under machine account. It is the SPN of IPC listener for FabricHost; which by default should be left empty since FabricHost runs under machine account 
Security,RemoteGroupSidTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\Common\SecurityConfig.h,Specify timespan in seconds. Control the rate of tracing remote group SIDs on auth failure; there may be many group SIDs associcated with an incoming token 
Security,DisableFirewallRuleForPublicProfile,bool,true,Static,PUBLIC,src\Common\SecurityConfig.h,Indicates if firewall rule should not be enabled for public profile 
Security,DisableFirewallRuleForPrivateProfile,bool,true,Static,PUBLIC,src\Common\SecurityConfig.h,Indicates if firewall rule should not be enabled for private profile 
Security,DisableFirewallRuleForDomainProfile,bool,true,Static,PUBLIC,src\Common\SecurityConfig.h,Indicates if firewall rule should not be enabled for domain profile 
Security,AADTenantId,wstring,L"",Static,PUBLIC,src\Common\SecurityConfig.h,Tenant ID (GUID) 
Security,AADClusterApplication,wstring,L"",Static,PUBLIC,src\Common\SecurityConfig.h,Web API application name or ID representing the cluster 
Security,AADClientApplication,wstring,L"",Static,PUBLIC,src\Common\SecurityConfig.h,Native Client application name or ID representing Fabric Clients 
Security,AADClientRedirectUri,wstring,L"urn:ietf:wg:oauth:2.0:oob",Static,INTERNAL,src\Common\SecurityConfig.h,Native Client redirect URI 
Security,AADLoginEndpoint,wstring,L"https://login.microsoftonline.com",Static,INTERNAL,src\Common\SecurityConfig.h,Endpoint for AAD login (used for adal.js initialization in SFX) 
Security,AADTokenEndpointFormat,wstring,L"https://login.microsoftonline.com/{0}",Static,INTERNAL,src\Common\SecurityConfig.h,Endpoint for acquiring security tokens 
Security,AADTokenIssuerFormat,wstring,L"https://sts.windows.net/{0}/",Static,DEPRECATED,src\Common\SecurityConfig.h,Security token issuer Deprecated by extracting from federation xml 
Security,AADCertEndpointFormat,wstring,L"https://login.microsoftonline.com/{0}/federationmetadata/2007-06/federationmetadata.xml",Static,INTERNAL,src\Common\SecurityConfig.h,Endpoint for getting token-signing certificates 
Security,AADRoleClaimKey,wstring,L"http://schemas.microsoft.com/ws/2008/06/identity/claims/role",Static,INTERNAL,src\Common\SecurityConfig.h,Application Role claim key 
Security,AADAdminRoleClaimValue,wstring,L"Admin",Static,INTERNAL,src\Common\SecurityConfig.h,Application Role claim value for Admin role 
Security,AADUserRoleClaimValue,wstring,L"User",Static,INTERNAL,src\Common\SecurityConfig.h,Application Role claim value for User role 
Security,AADSigningCertRolloverCheckInterval,TimeSpan,Common::TimeSpan::FromMinutes(60),Static,INTERNAL,src\Common\SecurityConfig.h,Specify timespan in seconds. Token signing cert rollover check interval 
Security,X509Folder,string,"/var/lib/waagent",Static,PUBLIC,src\Common\SecurityConfig.h,Folder where X509 certificates and private keys are located 
Security,CertFileExtension,string,".crt",Static,INTERNAL,src\Common\SecurityConfig.h,
Security,PrivateKeyFileExtension,string,".prv",Static,INTERNAL,src\Common\SecurityConfig.h,
Security,X509InstallExtension,string,".pem",Static,INTERNAL,src\Common\SecurityConfig.h,
Security,PrivateKeyInstallExtension,string,".pem",Static,INTERNAL,src\Common\SecurityConfig.h,
NamespaceManager,DirectMessagingPort,int,31320,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,For testing purposes only 
NamespaceManager/Replication,InitialReplicationQueueSize,uint,64,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
NamespaceManager/Replication,MaxReplicationQueueSize,uint,1024,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
NamespaceManager/Replication,MaxReplicationQueueMemorySize,uint,104857600,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
NamespaceManager/Replication,InitialCopyQueueSize,uint,64,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2.
NamespaceManager/Replication,MaxCopyQueueSize,uint,1024,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
NamespaceManager/Replication,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(0),Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator.
NamespaceManager/Replication,MaxPendingAcknowledgements,uint,0,Dynamic,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Maximum number of outstanding operation acknowledgements.  Together with the BatchAckInterval controls replicator operation throttling.
NamespaceManager/Replication,EnableReplicationOperationHeaderInBody,bool,false,Dynamic,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Bool that indicates if it is allowed to place the replication operation header in the body of the transport message instead of the header.
NamespaceManager/Replication,MaxReplicationMessageSize,uint,52428800,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Maximum message size of replication operations. Default is 50MB.
NamespaceManager/Replication,RequireServiceAck,bool,false,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Bool which controls whether the Windows Fabric Replicator will optimistically acknowledge operations on behalf of services. Setting this to false allows the replicator to optimistically acknowledge operations on behalf of the service. While true tells the replicator to require service ack via the Operation.Ack() API before the acknowledgement can be sent back to the primary service. Note that this flag is not respected for persistent services which always require services to acknowledge operations.
NamespaceManager/Replication,ReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations
NamespaceManager/Replication,SecondaryClearAcknowledgedOperations,bool,false,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Bool which controls if the operations on the secondary replicator are cleared once they are ACK'd by the state provider. Setting this to true may result in additional copy operations during the build of an idle replica
NamespaceManager/Replication,UseStreamFaultsAndEndOfStreamOperationAck,bool,true,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Bool which indicates to Windows Fabric Replicator if the state provider intends to use the OperationStream2 interface. If this is enabled the state provider must report fault on the OperationStream2 interface if it cannot apply any more operations that are pumped from the stream.The Windows Fabric Replicator will also dispatch an End of Stream operation in the secondary copy and replication streams.
NamespaceManager/Replication,InitialPrimaryReplicationQueueSize,uint,64,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,This value defines the initial size for the queue which maintains the replication operations on the primary. Note that it must be a power of 2.
NamespaceManager/Replication,MaxPrimaryReplicationQueueSize,uint,1024,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,This is the maximum number of operations that could exist in the primary replication queue. Note that it must be a power of 2.
NamespaceManager/Replication,MaxPrimaryReplicationQueueMemorySize,uint,104857600,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,This is the maximum value of the primary replication queue in bytes.
NamespaceManager/Replication,InitialSecondaryReplicationQueueSize,uint,64,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,This value defines the initial size for the queue which maintains the replication operations on the secondary. Note that it must be a power of 2.
NamespaceManager/Replication,MaxSecondaryReplicationQueueSize,uint,2048,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,This is the maximum number of operations that could exist in the secondary replication queue. Note that it must be a power of 2.
NamespaceManager/Replication,MaxSecondaryReplicationQueueMemorySize,uint,104857600,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,This is the maximum value of the secondary replication queue in bytes.
NamespaceManager/Replication,PrimaryWaitForPendingQuorumsTimeout,TimeSpan,Common::TimeSpan::Zero,Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Specify timespan in seconds. Specify timespan in seconds. Defines how long the primary replicator waits for receiving a quorum of acknowledgements for any pending replication operations before processing a reconfiguration request, that could potentially result in ‘cancelling’ the pending replication operationsl
NamespaceManager/Replication,QueueHealthMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor any warning/error health events in the replication operation queues. A value of '0' disables health monitoring
NamespaceManager/Replication,QueueHealthWarningAtUsagePercent,uint,80,Static,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,This value determines the replication queue usage(in percentage) after which we report warning about high queue usage. We do so after a grace interval of QueueHealthMonitoringInterval. If the queue usage falls below this percentage in the grace interval, the warning is not reported.
NamespaceManager/Replication,SlowApiMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor GetNextCopyState and GetNextCopyContext async api's. A value of '0' disables health monitoring. A warning health report is generated if the async api takes longer than this duration
NamespaceManager/Replication,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation.
NamespaceManager/Replication,CompleteReplicateThreadCount,uint,0,Static,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,The maximum number of parallel threads that can be used by the Windows Fabric Replicator to quorum complete Replication operations on the primary
NamespaceManager/Replication,AllowMultipleQuorumSet,bool,true,Static,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Bool which controls whether the Windows Fabric Replicator considers replicas in the previous and current configuration to compute quorum during reconfigurations. Setting this to false could result in higher chances of dataloss during failures
NamespaceManager/Replication,TraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Specify timespan in seconds. Determines the tracing interval of the replicator's progress (if there was any progress from the previous trace).
NamespaceManager/Replication,QueueFullTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
NamespaceManager/Replication,EnableSlowIdleRestartForVolatile,bool,false,Dynamic,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
NamespaceManager/Replication,EnableSlowIdleRestartForPersisted,bool,true,Dynamic,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
NamespaceManager/Replication,SlowIdleRestartAtQueueUsagePercent,uint,85,Dynamic,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
NamespaceManager/Replication,EnableSlowActiveSecondaryRestartForVolatile,bool,false,Dynamic,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
NamespaceManager/Replication,EnableSlowActiveSecondaryRestartForPersisted,bool,true,Dynamic,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
NamespaceManager/Replication,SlowActiveSecondaryRestartAtQueueUsagePercent,uint,90,Dynamic,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
NamespaceManager/Replication,ActiveSecondaryCountAdditionalToWriteQuorumNotRestaredDueToSlowness,uint,0,Dynamic,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
NamespaceManager/Replication,SlowActiveSecondaryRestartAtAgeOfOldestPrimaryOperation,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
NamespaceManager/Replication,SecondaryProgressRateDecayFactor,double,0.5,Dynamic,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
NamespaceManager/Replication,IdleReplicaMaxLagDurationBeforePromotion,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,DEPRECATED,src\Communication\NamespaceManager\NamespaceManagerConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
FabricGateway,ActivateGatewayInproc,bool,false,Static,TEST,src\FabricGateway\FabricGatewayConfig.h,This is set to true by tests that dont want to activate fabricgateway as a separate exe. 
FabricGateway,RequestQueueSize,int,5000,Static,INTERNAL,src\FabricGateway\FabricGatewayConfig.h,Determines the size of the Gateway job queue. 
Federation,NeighborhoodSize,int,4,NotAllowed,INTERNAL,src\Federation\FederationConfig.h,The number of nodes in the successor and predecessor direction; that a node keeps leases with. 
Federation,NodeUnknownStateDuration,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. Obsolete 
Federation,EdgeProbeInterval,TimeSpan,Common::TimeSpan::FromSeconds(3),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval for a node to send EdgeProbe message when its neighborhood information is not complete. 
Federation,TokenProbeInterval,TimeSpan,Common::TimeSpan::FromSeconds(3),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval for a node to send TokenProbe message when it finds a token gap. 
Federation,TokenProbeIntervalUpperBound,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The upper bound for the interval of sending TokenProbe message. 
Federation,TokenProbeThrottleThreshold,int,2,Static,INTERNAL,src\Federation\FederationConfig.h,The number of continuous token probe allowed before throttling. 
Federation,NeighborhoodExchangeTimeout,TimeSpan,Common::TimeSpan::FromSeconds(180),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The duration node information will be included in P2P message after its last access. 
Federation,NodeInformationExpirationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(3600),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The duration node information will be kept in routing table after its last access. 
Federation,PeriodicTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval for periodic tracing 
Federation,RoutingTableCompactInterval,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to compact routing table to remove old entries. 
Federation,RoutingTableHealthCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to check routing table health. 
Federation,RoutingTableCapacity,int,4096,Dynamic,INTERNAL,src\Federation\FederationConfig.h,The limit on number of nodes kept in routing table that will trigger a compact. 
Federation,MaxNodesToKeepInNeighborhood,int,128,Static,INTERNAL,src\Federation\FederationConfig.h,The max number of nodes to keep in the neighborhood; including shutdown ones. 
Federation,MaxNeighborhoodHeaders,int,64,Static,INTERNAL,src\Federation\FederationConfig.h,The max number of node information that will be included in P2P message. 
Federation,MaxGapsInCluster,int,3,NotAllowed,INTERNAL,src\Federation\FederationConfig.h,The system can only handle a fixed number of gaps; once this number is exceeded; it prevents further gaps to register; causing nodes to go down. This is desirable because the system has degraded. 
Federation,ConnectionOpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(10),Static,PUBLIC,src\Federation\FederationConfig.h,Specify timespan in seconds. Timeout for connection setup on both incoming and accepting side (including security negotiation in secure mode) 
Federation,MessageTimeout,TimeSpan,Common::TimeSpan::FromSeconds(20),Static,PUBLIC,src\Federation\FederationConfig.h,Specify timespan in seconds. Timeout for federation layer messages. 
Federation,ConnectionIdleTimeout,TimeSpan,Common::TimeSpan::FromMinutes(15),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. Connection idle timeout 
Federation,RoutingRetryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. Default timeout for routing layer retry. 
Federation,LivenessUpdateInterval,TimeSpan,Common::TimeSpan::FromSeconds(3),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The wait interval to send LivenessUpdate message when there are pending incoming requests. 
Federation,MaxMessageSize,int,64*1024*1024,Static,PUBLIC,src\Federation\FederationConfig.h,The maximum message size for federation messages. 
Federation,BroadcastContextKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The duration to keep broadcast context. 
Federation,BroadcastPropagationFactor,int,8,Static,INTERNAL,src\Federation\FederationConfig.h,The number of children in the broadcast spanning tree. 
Federation,MaxMulticastSubtreeSize,int,1000,Static,INTERNAL,src\Federation\FederationConfig.h,The max number of nodes in each child of spanning tree. 
Federation,NeighborhoodQueryRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(2),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to retry sending neighborhood query. 
Federation,JoinLockDuration,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The amount of time a join lock is granted to a joining node. 
Federation,JoinStateMachineInterval,TimeSpan,Common::TimeSpan::FromSeconds(0.25),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to run join protocol state machine. 
Federation,NonSeedNodeJoinWaitInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval for non-seed node to wait before quorum of seed nodes. 
Federation,LockRequestTimeout,TimeSpan,Common::TimeSpan::FromSeconds(0.5),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval a node is allowed to resend lock request message. 
Federation,TokenAcquireTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The maximum time a node is allowed to acquire its first routing token after it joins the federation. 
Federation,JoinThrottleTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The timeout for join throttle. 
Federation,JoinThrottleActiveInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The timeout for a competing joining node to be considered active. 
Federation,JoinThrottleCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(2),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to check throttle. 
Federation,JoinThrottleLowThreshold,int,2,Dynamic,INTERNAL,src\Federation\FederationConfig.h,The threshold from which throttle is to be removed. 
Federation,JoinThrottleHighThreshold,int,4,Dynamic,INTERNAL,src\Federation\FederationConfig.h,The threshold from which throttle is to be added. 
Federation,PingInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to send ping messages. 
Federation,UpdateInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to send update messages. 
Federation,MaxUpdateTarget,int,8,Static,INTERNAL,src\Federation\FederationConfig.h,Maximum number of update messages to send each round. 
Federation,ExternalRingPingInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to send ping messages to external rings. 
Votes,PropertyGroup,VoteConfig,None,Dynamic,PUBLIC,src\Federation\FederationConfig.h,A vote represents a single count towards a quorum of in a cluster. A vote is assigned to a vote owner(node) by a vote authority. Vote Authorities are typically nodes (seed nodes) in the cluster. A cluster needs a quorum of votes present to guarantee its health and ability to stay up.  Losing a quorum of votes will cause the cluster to go down. An alternative to seed nodes are SQL votes; where the vote authority is not a node in the Cluster; but a SQL Server instance. In this case; the node with the closest Id to the SQL vote Id acts as a proxy. The votes selected through configuration; must be the same across all nodes. ID is a string that is parsed into a long integer that represents the ID of the vote in the cluster. The Type can be one of two options: SeedNode or SqlServer; depending on the vote authority used by the cluster. Depending on the type is the format for the connection string. The connection string for SeedNode is the NodeEndpoint for the node with the same NodeID. For type=SqlServer is a connection string to a SQL Server 2008 and up. An example to a SeedNode is : '0 = SeedNode;10.0.0.1:10000'. An example to a SQL vote is: 'sqlvote1 = SqlServer;Provider=SQLNCLI10;Server=.\SQLEXPRESS;Database=master;Integrated Security=SSPI' 
Federation,GlobalTicketLeaseDuration,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,PUBLIC,src\Federation\FederationConfig.h,Specify timespan in seconds. Nodes in the cluster need to maintain a global lease with the voters. Voters submit their global leases to be propagated across the cluster for this duration. If the duration expires; then the lease is lost. Loss of quorum of leases causes a node to abandon the cluster; by failing to receive communication with a quorum of nodes in this period of time.  This value needs to be adjusted based on the size of the cluster. 
Federation,BootstrapTicketLeaseDuration,TimeSpan,Common::TimeSpan::FromSeconds(100),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The lease interval for a bootstrap ticket. 
Federation,VoteOwnershipLeaseInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The lease interval for acquiring the ownership for a shared (sql) vote. 
Federation,BootstrapVoteRequestInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to send bootstrap ticket request. 
Federation,BootstrapVoteAcquireRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The time to wait to send the next bootstrap ticket request after a failed attempt. 
Federation,BootstrapStateMachineInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to run the bootstrap state machine. 
Federation,GlobalTicketRenewInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to renew global ticket. 
Federation,BootstrapTicketAcquireLimit,TimeSpan,Common::TimeSpan::FromSeconds(20),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. Margin makes sure we don't transfer Super Tickets that are about to expire "soon". Otherwise; a super seed node may create a ring only to lose global lease soon afterwards. This is the amount of time vote owners have to join a newly formed ring and issue a new global lease. 
Federation,GlobalTimeClockDriftRatio,int,512,Dynamic,INTERNAL,src\Federation\FederationConfig.h,The ratio to increase uncertainty interval as time elapses. 
Federation,GlobalTimeUncertaintyIncreseInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. Obsolete. 
Federation,GlobalTimeTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to trace global time. 
Federation,GlobalTimeUncertaintyIntervalUpperBound,TimeSpan,Common::TimeSpan::FromSeconds(0.3),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. When the uncertainty interval exceeds this limit a new epoch will be issued. 
Federation,GlobalTimeUncertaintyMaxDecrease,TimeSpan,Common::TimeSpan::FromSeconds(1),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The max interval to decrease per epoch.  Must be equal or smaller than GlobalTimeUncertaintyMaxIncrease. 
Federation,GlobalTimeUncertaintyMaxIncrease,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The max interval to increase per epoch. 
Federation,GlobalTimeNewEpochWaitInterval,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The amount of time to wait before issing new epoch. 
Federation,VoterStoreRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to retry locating voter store. 
Federation,VoterStoreBootstrapWaitInterval,TimeSpan,Common::TimeSpan::FromSeconds(3600),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The time a voter store replica needs to wait before starting bootstrap phase. 
Federation,VoterStoreLivenessCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The time a voter store replica pings the previous replica to check its liveness. 
Federation,LeaseDuration,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,PUBLIC,src\Federation\FederationConfig.h,Specify timespan in seconds. Duration that a lease lasts between a node and its neighbors. 
Federation,LeaseDurationAcrossFaultDomain,TimeSpan,Common::TimeSpan::Zero,Dynamic,PUBLIC,src\Federation\FederationConfig.h,Specify timespan in seconds. Duration that a lease lasts between a node and its neighbors accross data center. 
Federation,UnresponsiveDuration,TimeSpan,Common::TimeSpan::FromSeconds(0),Dynamic,PUBLIC,src\Federation\FederationConfig.h,Specify timespan in seconds. Duration that driver bugcheck if there is no ioctl call from user mode 
Federation,HeartbeatInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,PUBLIC,src\Federation\FederationConfig.h,Specify timespan in seconds. Time interval that user mode is performing heartbeat 
Federation,LeaseSuspendTimeout,TimeSpan,Common::TimeSpan::FromSeconds(2),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. After a lease loss; the duration allowed for a node to continue operating before a successful arbitration. 
Federation,LeaseRetryCount,int,3,Static,INTERNAL,src\Federation\FederationConfig.h,The number of retry messages within a lease interval. 
Federation,LeaseRenewBeginRatio,int,6,Static,INTERNAL,src\Federation\FederationConfig.h,The starting point of first renew message within a lease interval; it is interpreted as 1 over LeaseRenewBeginRatio. 
Federation,ApplicationLeaseDuration,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The TTL granted by lease driver to leasing applications. 
Federation,ArbitrationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30),NotAllowed,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The timeout for arbitration request. 
Federation,ArbitrationRequestDelay,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The delay between successive arbitration requests starting from the 4th request. 
Federation,ArbitrationRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval between arbitration retry requests. 
Federation,ArbitrationCleanupInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The amount of time arbitration records are used to reject requests from other nodes. 
Federation,MaxConsecutiveIndirectLeaseDuration,TimeSpan,Common::TimeSpan::FromSeconds(600),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The max duration lease is renewed indirectly; after this duration; indirect lease will be stopped. 
Federation,LoopbackJobQueueThreadMax,int,0,Static,INTERNAL,src\Federation\FederationConfig.h,Specify max thread count for loopback job queue; default to 0; which means using processor count 
Federation,TraceLoopbackJobQueue,bool,false,Static,INTERNAL,src\Federation\FederationConfig.h,Specify whether to do extra tracing for loopback job queue 
Federation,X509CertChainFlags,uint,0x40000000,Dynamic,PUBLIC,src\Federation\FederationConfig.h,Flags for cluster certificate chain validation; e.g. CRL checking 0x10000000 CERT_CHAIN_REVOCATION_CHECK_END_CERT 0x20000000 CERT_CHAIN_REVOCATION_CHECK_CHAIN 0x40000000 CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT 0x80000000 CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY Setting to 0 disables CRL checking Full list of supported values is documented by dwFlags of CertGetCertificateChain: http://msdn.microsoft.com/en-us/library/windows/desktop/aa376078(v=vs.85).aspx 
Federation,IgnoreCrlOfflineError,bool,true,Dynamic,PUBLIC,src\Federation\FederationConfig.h,Whether to ignore CRL offline error for cluster security 
FabricHost,ActivatorServiceAddress,wstring,L"localhost:0",Static,INTERNAL,src\Hosting2\FabricHostConfig.h,
FabricHost,ActivatorServerId,wstring,L"",Static,INTERNAL,src\Hosting2\FabricHostConfig.h,
FabricHost,HostedServiceContinuousExitFailureResetInterval,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\Hosting2\FabricHostConfig.h,Specify timespan in seconds. 
FabricHost,StopTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,PUBLIC,src\Hosting2\FabricHostConfig.h,Specify timespan in seconds. The timeout for hosted service activation; deactivation and upgrade. 
FabricHost,StartTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,PUBLIC,src\Hosting2\FabricHostConfig.h,Specify timespan in seconds. Timeout for fabricactivationmanager startup 
FabricHost,ActivationRetryBackoffInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,PUBLIC,src\Hosting2\FabricHostConfig.h,Specify timespan in seconds. Backoff interval on every activation failure;On every continuous activation failure the system will retry the activation for up to the MaxActivationFailureCount. The retry interval on every try is a product of continuous activation failure and the activation back-off interval. 
FabricHost,ActivationMaxRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,PUBLIC,src\Hosting2\FabricHostConfig.h,Specify timespan in seconds. Max retry interval for Activation. On every continuous failure the retry interval is calculated as Min( ActivationMaxRetryInterval; Continuous Failure Count * ActivationRetryBackoffInterval) 
FabricHost,ActivationMaxFailureCount,int,10,Dynamic,PUBLIC,src\Hosting2\FabricHostConfig.h,This is the maximum count for which system will retry failed activation before giving up. 
FabricHost,EnableServiceFabricAutomaticUpdates,bool,false,Dynamic,PUBLIC,src\Hosting2\FabricHostConfig.h,This is to enable fabric automatic update via Windows Update. 
FabricHost,EnableServiceFabricBaseUpgrade,bool,false,Dynamic,PUBLIC,src\Hosting2\FabricHostConfig.h,This is to enable base update for server. 
FabricHost,EnableRestartManagement,bool,false,Dynamic,PUBLIC,src\Hosting2\FabricHostConfig.h,This is to enable server restart. 
FabricHost,Test_IgnoreHostedServices,bool,false,Static,INTERNAL,src\Hosting2\FabricHostConfig.h,
Hosting,CreateFabricRuntimeTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout value for the sync FabricCreateRuntime call 
Hosting,ServiceFactoryRegistrationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout value for the sync Register(Stateless/Stateful)ServiceFactory call 
Hosting,RegisterCodePackageHostTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout value for the FabricRegisterCodePackageHost sync call. This is applicable for only multi code package application hosts like FWP 
Hosting,GetCodePackageActivationContextTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout value for the CodePackageActivationContext calls . This is not applicable to ad-hoc services. 
Hosting,ApplicationHostCloseTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. When Fabric exit is detected in a self activated processes; FabricRuntime closes all of the replicas in the user's host (applicationhost) process. This is the timeout for the that close operation. 
Hosting,RequestTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. This represents the timeout for communication between the user's application host and Fabric process for various hosting related operations such as factory registration; runtime registration. 
Hosting,DeploymentRetryBackoffInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Back-off interval for the deployment failure. On every continuous deployment failure the system will retry the deployment for up to the MaxDeploymentFailureCount. The retry interval is a product of continuous deployment failure and the deployment backoff interval. 
Hosting,DeploymentMaxRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(3600),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Max retry interval for the deployment. On every continuous failure the retry interval is calculated as Min( DeploymentMaxRetryInterval; Continuous Failure Count * DeploymentRetryBackoffInterval) 
Hosting,DeploymentMaxFailureCount,int,20,Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Application deployment will be retried for DeploymentMaxFailureCount times before failing the deployment of that application on the node. 
Hosting,FileStoreServiceUserCreationRetryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The retry interval for trying to create file store service users of the creation failed during DownloadManager open 
Hosting,ActivationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(180),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout for application activation; deactivation and upgrade. 
Hosting,ActivationRetryBackoffInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Backoff interval on every activation failure;On every continuous activation failure the system will retry the activation for up to the MaxActivationFailureCount. The retry interval on every try is a product of continuous activation failure and the activation back-off interval. 
Hosting,ActivationMaxRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(3600),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Max retry interval for Activation. On every continuous failure the retry interval is calculated as Min( ActivationMaxRetryInterval; Continuous Failure Count * ActivationRetryBackoffInterval) 
Hosting,ActivationMaxFailureCount,int,20,Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,This is the maximum count for which system will retry failed activation before giving up. 
Hosting,EnableActivateNoWindow,bool,false,Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,The activated process is created in the background without any console. 
Hosting,ActivatedProcessDieOnUnhandledExceptionEnabled,bool,true,Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,If false the activated process will honor the JIT debugging policies of the machine; otherwise the activated process will simply die and restarted as per the retry intervals 
Hosting,RunAsPolicyEnabled,bool,false,Static,PUBLIC,src\Hosting2\HostingConfig.h,Enables running code packages as local user other than the user under which fabric process is running. In order to enable this policy Fabric must be running as SYSTEM or as user who has SeAssignPrimaryTokenPrivilege. 
Hosting,NTLMAuthenticationEnabled,bool,false,Static,PUBLIC,src\Hosting2\HostingConfig.h,Enables support for using NTLM by the code packages that are running as other users so that the processes across machines can communicate securely. 
Hosting,NTLMAuthenticationPasswordSecret,SecureString,Common::SecureString(L""),Static,PUBLIC,src\Hosting2\HostingConfig.h,Is an encrypted has that is used to generate the password for NTLM users. Has to be set if NTLMAuthenticationEnabled is true. Validated by the deployer. 
Hosting,EndpointProviderEnabled,bool,false,Static,PUBLIC,src\Hosting2\HostingConfig.h,Enables management of Endpoint resources by Fabric. Requires specification of start and end application port range in FabricNode. 
Hosting,FirewallPolicyEnabled,bool,false,Static,PUBLIC,src\Hosting2\HostingConfig.h,Enables opening firewall ports for Endpoint resources with explicit ports specified in ServiceManifest 
Hosting,ServiceTypeRegistrationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout for the ServiceType to register with fabric 
Hosting,EnableProcessDebugging,bool,false,Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Enables launching application hosts under debugger 
Hosting,CodePackageContinuousExitFailureResetInterval,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout to reset the continuous exit failure count for code package 
Hosting,CodePackageHealthWarningThreshold,uint,1,Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,The CodePackage failure count after which warning is reported 
Hosting,CodePackageHealthErrorThreshold,uint,3,Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,The CodePackage failure count after which error is reported 
Hosting,MaxQueryOperationThreads ,uint,15,Static,INTERNAL,src\Hosting2\HostingConfig.h,The maximum number of parallel threads allowed to process Hosting queries 
Hosting,FSSActivationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout for FileStoreService ServicePackage activation. 
Hosting,InteractiveRunAsEnabled,bool,false,Static,TEST,src\Hosting2\HostingConfig.h,
Hosting,DeactivationScanInterval,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Interval in secs - the scan for deactivation is performed 
Hosting,DeactivationGraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Grace interval after which the process can be marked for deactivation 
Hosting,DeactivationFailedRetryIntervalRange,TimeSpan,Common::TimeSpan::FromSeconds(90),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. On every continuous failure system will generate a randomized time between 0 to DeactivationFailedRetryIntervalRange. Retry backoff interval will be Random(0; DeactivationFailedRetryIntervalRange) + failureCount*DeactivationGraceInterval. 
Hosting,DeactivationMaxRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Max retry interval for Deactivation. On every continuous failure if the retry interval is more than the backoff interval; we set the backoff interval as DeactivationMaxRetryInterval. 
Hosting,ServiceTypeDisableGraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Time interval after which the service type can be disabled 
Hosting,ServiceTypeDisableFailureThreshold,int,1,Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,When an activation or deployment is failed on a node; the system can try a different node to increase the availability. However many errors are recoverable and the failures can be resolved using simple retry. This knob controls the threshold for the failure count after which FM is notified to disable the service type on that node and try a different node for placement. 
Hosting,DisabledServiceTypeRecoveryInterval,TimeSpan,Common::TimeSpan::MaxValue,Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Recovers a disabled service type for adhoc applications after the specified time interval 
Hosting,CacheCleanupScanInterval,TimeSpan,Common::TimeSpan::FromSeconds(3600),Static,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. -------------- Cache Cleanup settings Time interval for cleaning up unused content in ApplicationInstance; ImageCache and Shared folders 
Hosting,CacheCleanupBackoffInternval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Backoff internval on failure during Cache Cleanup 
Hosting,CacheCleanupMaxContinuousFailures,uint,3,Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Maximum number of continous failures before giving up on CacheCleanup 
Hosting,AzureLogCollectorConfigurationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,DEPRECATED,src\Hosting2\HostingConfig.h,Specify timespan in seconds. log collector settings 
Hosting,CrashDumpConfigurationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. crash dump configuration settings 
Hosting,DllHostExePath,wstring,L"FWP.exe",Static,INTERNAL,src\Hosting2\HostingConfig.h,dllhost settings 
Hosting,FabricUpgradeTimeout,TimeSpan,Common::TimeSpan::FromSeconds(1800),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. 
Hosting,FabricTypeHostPath,wstring,L"FabricTypeHost.exe",Static,TEST,src\Hosting2\HostingConfig.h,
Hosting,ContainerProviderServiceName,wstring,L"docker",Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,
Hosting,ContainerProviderProcessName,wstring,L"docker",Static,INTERNAL,src\Hosting2\HostingConfig.h,
Hosting,ContainerHostAddress,wstring,L"",Static,INTERNAL,src\Hosting2\HostingConfig.h,
Hosting,ContainerHostPort,wstring,L"2375",Static,INTERNAL,src\Hosting2\HostingConfig.h,
Hosting,ContainerImageDownloadTimeout,TimeSpan,Common::TimeSpan::FromSeconds(1200),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. 
Hosting,ContainerImageDownloadRetryCount,int,3,Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,
Hosting,ContainerImageDownloadBackoff,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. 
Hosting,ContainerStatusCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. 
Hosting,ContainerAppRootFolder,wstring,L"C:\\SFAppRoot",Static,INTERNAL,src\Hosting2\HostingConfig.h,
Hosting,ContainerPackageRootFolder,wstring,L"C:\\SFPackageRoot",Static,INTERNAL,src\Hosting2\HostingConfig.h,
Hosting,ContainerFabricBinRootFolder,wstring,L"C:\\SFFabricBin",Static,INTERNAL,src\Hosting2\HostingConfig.h,
Hosting,ApplicationEtwTraceFileSizeInMB,int,128,Static,INTERNAL,src\Hosting2\HostingConfig.h,Max file size for application ETW traces 
Hosting,ApplicationEtwTraceLevel,int,4,Static,INTERNAL,src\Hosting2\HostingConfig.h,Verbosity for application ETW traces. Default is 4 (info). 
Hosting,DcaNotificationIntervalInSeconds,TimeSpan,Common::TimeSpan::FromSeconds(180),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Interval at which we notify the DCA about active service packages 
Hosting,FabricHostCommunicationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Fabric to FabricHost communication settings 
Hosting,IsApplicationHostHealthReportingEnabled,bool,true,Static,INTERNAL,src\Hosting2\HostingConfig.h,--------------- ipc health reporting settings Enables health reporting from within the applicationhost 
Hosting,DeployFabricSystemPackageRetryBackoff,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. 
Hosting,AbortSwitchServicePackage,bool,false,Static,TEST,src\Hosting2\HostingConfig.h,--------------- test settting to fail upgrade application 
Hosting,AbortSwitchApplicationPackage,bool,false,Static,TEST,src\Hosting2\HostingConfig.h,
Hosting,ApplicationUpgradeTimeout,TimeSpan,Common::TimeSpan::FromSeconds(360),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout for application upgrade. If the timeout is less than the "ActivationTimeout" deployer will fail. 
Hosting,LocalResourceManagerTestMode,bool,false,Static,TEST,src\Hosting2\HostingConfig.h,Test mode for LocalResourceManager (will not check available resources; and will not govern anything actually). This is used to test LRM <-> FM <-> CRM flows in FabricTest. 
RunAs,RunAsAccountName,wstring,L"",Dynamic,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account name. This is only needed for "DomainUser" or "ManagedServiceAccount" account type. Valid values are "domain\user" or "user@domain" 
RunAs,RunAsAccountType,wstring,L"",Dynamic,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account type. This is needed for any RunAs section Valid values are "DomainUser/NetworkService/ManagedServiceAccount/LocalSystem" 
RunAs,RunAsAccountPassword,wstring,L"",Dynamic,DEPRECATED,src\Hosting2\RunAsConfig.h,Indicates the RunAs account password. This is only needed for "DomainUser" account type. Use RunAsPassword instead 
RunAs,RunAsPassword,wstring,L"",Dynamic,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account password. This is only needed for "DomainUser" account type. 
RunAs_Fabric,RunAsAccountName,wstring,L"",Dynamic,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account name. This is only needed for "DomainUser" or "ManagedServiceAccount" account type. Valid values are "domain\user" or "user@domain" 
RunAs_Fabric,RunAsAccountType,wstring,L"",Dynamic,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account type. This is needed for any RunAs section Valid values are "LocalUser/DomainUser/NetworkService/ManagedServiceAccount/LocalSystem" 
RunAs_Fabric,RunAsAccountPassword,wstring,L"",Dynamic,DEPRECATED,src\Hosting2\RunAsConfig.h,Indicates the RunAs account password. This is only needed for "DomainUser" account type. Use RunAsPassword instead 
RunAs_Fabric,RunAsPassword,wstring,L"",Dynamic,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account password. This is only needed for "DomainUser" account type. 
RunAs_HttpGateway,RunAsAccountName,wstring,L"",Dynamic,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account name. This is only needed for "DomainUser" or "ManagedServiceAccount" account type. Valid values are "domain\user" or "user@domain" 
RunAs_HttpGateway,RunAsAccountType,wstring,L"",Dynamic,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account type. This is needed for any RunAs section Valid values are "LocalUser/DomainUser/NetworkService/ManagedServiceAccount/LocalSystem" 
RunAs_HttpGateway,RunAsAccountPassword,wstring,L"",Dynamic,DEPRECATED,src\Hosting2\RunAsConfig.h,Indicates the RunAs account password. This is only needed for "DomainUser" account type. Use RunAsPassword instead 
RunAs_HttpGateway,RunAsPassword,wstring,L"",Dynamic,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account password. This is only needed for "DomainUser" account type. 
RunAs_DCA,RunAsAccountName,wstring,L"",Dynamic,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account name. This is only needed for "DomainUser" or "ManagedServiceAccount" account type. Valid values are "domain\user" or "user@domain" 
RunAs_DCA,RunAsAccountType,wstring,L"",Dynamic,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account type. This is needed for any RunAs section Valid values are "LocalUser/DomainUser/NetworkService/ManagedServiceAccount/LocalSystem" 
RunAs_DCA,RunAsAccountPassword,wstring,L"",Dynamic,DEPRECATED,src\Hosting2\RunAsConfig.h,Indicates the RunAs account password. This is only needed for "DomainUser" account type. Use RunAsPassword instead 
RunAs_DCA,RunAsPassword,wstring,L"",Dynamic,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account password. This is only needed for "DomainUser" account type. 
HttpGateway,IsEnabled,bool,false,Static,PUBLIC,src\httpgateway\HttpGatewayConfig.h, Enables/Disables the httpgateway. Httpgateway is disabled by default and this config needs to be set to enable it.  
HttpGateway,ActiveListeners,uint,500,Static,PUBLIC,src\httpgateway\HttpGatewayConfig.h, Number of reads to post to the http server queue. This controls the number of concurrent requests that can be satisfied by the HttpGateway.  
HttpGateway,VersionCheck,bool,true,Static,INTERNAL,src\httpgateway\HttpGatewayConfig.h, Controls if API version checking is enforced or not.  
HttpGateway,MaxEntityBodySize,uint,4194304,Dynamic,PUBLIC,src\httpgateway\HttpGatewayConfig.h, Gives the maximum size of the body that can be expected from a http request. Default value is 4MB. Httpgateway will fail a request if it has a body of size > this value. Minimum read chunk size is 4096 bytes. So this has to be >= 4096.  
KtlLogger,PeriodicFlushTime,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\ktllogger\KtlLoggerConfig.h,Specify timespan in seconds. The periodic log flush timer when not under memory pressure. This defines the number of seconds that write activity for a log is idle before the cached write data is flushed when the system is not under pressure to flush. 
KtlLogger,PeriodicTimerInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,INTERNAL,src\ktllogger\KtlLoggerConfig.h,Specify timespan in seconds. The periodic log flush timer when under memory pressure. This defines the number of seconds that write activity for a log is idle before the cached write data is flushed when the system is under pressure to flush. 
KtlLogger,AutomaticMemoryConfiguration,int,1,Dynamic,PUBLIC,src\ktllogger\KtlLoggerConfig.h,Flag that indicates if the memory settings should be automatically and dynamically configured. If zero then the memory configuration settings are used directly and do not change based on system conditions. If one then the memory settings are configured automatically and may change based on system conditions. 
KtlLogger,AllocationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\ktllogger\KtlLoggerConfig.h,Specify timespan in seconds. The timeout for memory allocations. 00:00:00 implies no timeout. This defines the number of seconds that an allocation request for the WriteBufferMemoryPool can wait before being failed. 
KtlLogger,WriteBufferMemoryPoolMinimumInKB,int,8388608,Dynamic,PUBLIC,src\ktllogger\KtlLoggerConfig.h,The number of KB to initially allocate for the write buffer memory pool. Use 0 to indicate no limit Default should be consistent with SharedLogSizeInMB below 
KtlLogger,WriteBufferMemoryPoolMaximumInKB,int,0,Dynamic,PUBLIC,src\ktllogger\KtlLoggerConfig.h,The number of KB to allow the write buffer memory pool to grow up to. Use 0 to indicate no limit 
KtlLogger,WriteBufferMemoryPoolPerStreamInKB,int,-1,Dynamic,INTERNAL,src\ktllogger\KtlLoggerConfig.h,The number of KB to allow the write buffer memory pool to grow for each log stream opened. Use -1 to indicate using default record size 
KtlLogger,PinnedMemoryLimitInKB,int,0,Dynamic,INTERNAL,src\ktllogger\KtlLoggerConfig.h,The number of KB to allow for the pinned memory pool. Use 0 to indicate no limit 
KtlLogger,MaximumDestagingWriteOutstandingInKB,int,0,Dynamic,PUBLIC,src\ktllogger\KtlLoggerConfig.h,The number of KB to allow the shared log to advance ahead of the dedicated log. Use 0 to indicate no limit 
KtlLogger,SharedLogPath,wstring,L"",Static,PUBLIC,src\ktllogger\KtlLoggerConfig.h,Path and file name to location to place shared log container. Use L"" for using default path under fabric data root. 
KtlLogger,SharedLogId,wstring,L"",Static,PUBLIC,src\ktllogger\KtlLoggerConfig.h,Unique guid for shared log container. Use L"" if using default path under fabric data root. 
KtlLogger,SharedLogSizeInMB,int,8192,Static,PUBLIC,src\ktllogger\KtlLoggerConfig.h,The number of MB to allocate in the shared log container 
KtlLogger,SharedLogNumberStreams,int,24576,Static,INTERNAL,src\ktllogger\KtlLoggerConfig.h,The number of log streams to allow in the shared log container 
KtlLogger,SharedLogMaximumRecordSizeInKB,int,0,Static,INTERNAL,src\ktllogger\KtlLoggerConfig.h,The maximum record size written into the shared log. Use 0 for the default value 
KtlLogger,SharedLogCreateFlags,uint,0,Static,INTERNAL,src\ktllogger\KtlLoggerConfig.h,Shared Log creation flags. Use 0 for non sparse log. 
Lease,DebugLeaseDriverEnabled,bool,false,Static,TEST,src\LeaseAgent\LeaseConfig.h,
ApplicationGateway/Http,IsEnabled,bool,false,Static,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Enables/Disables the HttpApplicationGateway. HttpApplicationGateway is disabled by default and this config needs to be set to enable it.  
ApplicationGateway/Http,NumberOfParallelOperations,uint,5000,Static,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Number of reads to post to the http server queue. This controls the number of concurrent requests that can be satisfied by the HttpGateway.  
ApplicationGateway/Http,DefaultHttpRequestTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h,Specify timespan in seconds.  Gives the default request timeout for the http requests being processed in the http app gateway.  
ApplicationGateway/Http,HttpRequestConnectTimeout,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h,Specify timespan in seconds.  Gives the connect timeout for the http requests being sent from the http app gateway.  
ApplicationGateway/Http,ResolveServiceBackoffInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h,Specify timespan in seconds.  Gives the default back-off interval before retrying a failed resolve service operation.  
ApplicationGateway/Http,BodyChunkSize,uint,16384,Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Gives the size of for the chunk in bytes used to read the body.  
ApplicationGateway/Http,ResolveTimeout,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,INTERNAL,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h,Specify timespan in seconds.  Gives the default max timeout used for resolve calls.  
ApplicationGateway/Http,InitialNumberOfLookasideAllocations,uint,20000,Static,INTERNAL,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h,The number of blocks to initially allocate in the lookaside list. This is the minimum number of allocations the lookaside allocator will keep in its list. This should be atleast equal to the number of parallel operations; assuming each block can cover all the allocs needed for a single operation.  
ApplicationGateway/Http,PercentofExtraAllocsToMaintain,uint,10,Static,INTERNAL,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h,This controls the max number of blocks to keep around over the initial number that is allocated. When there is a sudden spike in the amount of memory needed per request; we might allocate more blocks. But we donot want to keep them around once the spike subsides. This config controls the max number of blocks to keep around over the initial number of allocs. This is given as a % of the initial number of allocations.  
ApplicationGateway/Http,LookasideAllocationBlockSizeInKb,uint,140,Static,INTERNAL,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h,This controls the allocation block size in KB. For better perf; this should be tuned based on tests or looking at the perf counters so that all allocations for a single request fit in this block size.  
ApplicationGateway/Http,WebSocketOpenHandshakeTimeout,uint,20000,Dynamic,INTERNAL,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h,The max timeout value for the service to complete a websocket handshake initiated by the gateway. 20 Seconds  
ApplicationGateway/Http,WebSocketReceiveBufferSize,uint,4096,Dynamic,INTERNAL,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Gives the buffer size used for receive buffer  
ApplicationGateway/Http,WebSocketSendBufferSize,uint,4096,Dynamic,INTERNAL,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Gives the buffer size used for send buffer.  
ApplicationGateway/Http,WebSocketCloseHandshakeTimeout,uint,10000,Dynamic,INTERNAL,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, The timeout value for the service to complete a websocket handshake initiated by the gateway. 10 Seconds  
ApplicationGateway/Http,GatewayAuthCredentialType,wstring,L"None",Static,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Indicates the type of security credentials to use at the http app gateway endpoint Valid values are "None/X509  
ApplicationGateway/Http,GatewayX509CertificateStoreName,wstring,L"My",Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Name of X.509 certificate store that contains certificate for http app gateway.  
ApplicationGateway/Http,GatewayX509CertificateFindType,wstring,L"FindByThumbprint",Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Indicates how to search for certificate in the store specified by GatewayX509CertificateStoreName Supported value: FindByThumbprint; FindBySubjectName  
ApplicationGateway/Http,GatewayX509CertificateFindValue,wstring,L"",Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Search filter value used to locate the http app gateway certificate. This certificate is configured on the https endpoint and can also be used to verify the identity of the app if needed by the services. FindValue is looked up first; and if that doesnt exist; FindValueSecondary is looked up.  
ApplicationGateway/Http,GatewayX509CertificateFindValueSecondary,wstring,L"",Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h,
ApplicationGateway/Http,ApplicationCertificateValidationPolicy,wstring,L"None",Static,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, ApplicationCertificateValidationPolicy: None: Do not validate server certificate; succeed the request. ServiceCertificateThumbprints: Refer to config ServiceCertificateThumbprints for the comma separated list of thumbprints of the remote certs that the reverse proxy can trust. ServiceCommonNameAndIssuer:  Refer to config ServiceCommonNameAndIssuer for the subject name and issuer thumbprint of the remote certs that the reverse proxy can trust. 
ApplicationGateway/Http,ServiceCertificateThumbprints,wstring,L"",Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h,
ApplicationGateway/Http/ServiceCommonNameAndIssuer,PropertyGroup,X509NameMap,None,Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h,
ApplicationGateway/Http,CrlCheckingFlag,uint,0x40000000,Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Flags for application/service certificate chain validation; e.g. CRL checking 0x10000000 CERT_CHAIN_REVOCATION_CHECK_END_CERT 0x20000000 CERT_CHAIN_REVOCATION_CHECK_CHAIN 0x40000000 CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT 0x80000000 CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY Setting to 0 disables CRL checking Full list of supported values is documented by dwFlags of CertGetCertificateChain: http://msdn.microsoft.com/en-us/library/windows/desktop/aa376078(v=vs.85).aspx  
ApplicationGateway/Http,IgnoreCrlOfflineError,bool,true,Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h,Whether to ignore CRL offline error for application/service certificate verification. 
ApplicationGateway/Http,SecureOnlyMode,bool,false,Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, SecureOnlyMode: true: Reverse Proxy will only forward to services that publish secure endpoints. false: Reverse Proxy can forward requests to secure/non-secure endpoints.  
ApplicationGateway/Http,ForwardClientCertificate,bool,false,Dynamic,PUBLIC,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h,
ApplicationGateway/Http,StandAloneMode,bool,false,NotAllowed,TEST,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Used for testing the application gateway in a standalone manner.  
ApplicationGateway/Http,Protocol,wstring,L"http",NotAllowed,TEST,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Gives the protocol the gateway should use when running in standalone mode.  
ApplicationGateway/Http,ListenAddress,wstring,L"",NotAllowed,TEST,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Gives the listen address the gateway should use when running in standalone mode.  
ApplicationGateway/Http,TargetResolutionAddress,wstring,L"",NotAllowed,TEST,src\Management\ApplicationGateway\Http\HttpApplicationGatewayConfig.h, Gives the static address that the dummy service resolver returns when running with StandAloneMode set to true  
Management,ImageStoreConnectionString,SecureString,Common::SecureString(L""),Static,PUBLIC,src\Management\Common\ManagementConfig.h,Connection string to the Root for ImageStore 
Management,ImageStoreMinimumTransferBPS,int,1024,Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,The minimum transfer rate between the cluster and ImageStore. This value is used to determine the timeout when accessing the external ImageStore. Change this value only if the latency between the cluster and ImageStore is high to allow more time for the cluster to download from the external ImageStore. 
Management,AzureStorageMaxWorkerThreads,int,25,Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,The maximum number of worker threads in parallel 
Management,AzureStorageMaxConnections,int,5000,Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,The maximum number of concurrent connections to azure storage 
Management,AzureStorageOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. Timeout for xstore operation to complete 
Management,ImageCachingEnabled,bool,true,Static,PUBLIC,src\Management\Common\ManagementConfig.h,This configuration allows us to enable or disable caching. 
Management,DisableChecksumValidation,bool,false,Static,PUBLIC,src\Management\Common\ManagementConfig.h,This configuration allows us to enable or disable checksum validation during application provisioning. 
Management,DisableServerSideCopy,bool,false,Static,PUBLIC,src\Management\Common\ManagementConfig.h,This configuration enables or disables server side copy of application package on the ImageStore during application provisioning. 
Management,ImageCacheDirectory,wstring,L"ImageCache",Static,INTERNAL,src\Management\Common\ManagementConfig.h,Folder name for the ImageCache for a node. 
Management,DeploymentDirectory,wstring,L"Applications",Static,INTERNAL,src\Management\Common\ManagementConfig.h,Folder name for the application deployment folder. This is relative to the work folder for the node. 
Management,EnableDeploymentAtDataRoot,bool,false,NotAllowed,INTERNAL,src\Management\Common\ManagementConfig.h,Enable deployment of apps inside FabricDataRoot folder. 
Management,FabricUpgradeDeploymentDirectory,wstring,L"FabricUpgrade",Static,INTERNAL,src\Management\Common\ManagementConfig.h,Folder name for the fabric upgrade folder. This is relative to the work folder for the node. 
Management,AllowImageStoreConnectionStringChange,bool,false,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Allows the ImageStoreConnectionString to be modified during FabricUpgrade 
Management,SkipUpgradeWaitOnSystemServiceInitialization,bool,false,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The node will skip waiting cluster upgrade complete during system service initialization when this setting is true 
ClusterManager,InfrastructureTaskProcessingInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The processing interval used by the infrastructure task processing state machine 
ClusterManager,TargetReplicaSetSize,int,7,NotAllowed,PUBLIC,src\Management\Common\ManagementConfig.h,The TargetReplicaSetSize for ClusterManager 
ClusterManager,MinReplicaSetSize,int,3,NotAllowed,PUBLIC,src\Management\Common\ManagementConfig.h,The MinReplicaSetSize for ClusterManager 
ClusterManager,ReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),NotAllowed,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The ReplicaRestartWaitDuration for ClusterManager 
ClusterManager,QuorumLossWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,NotAllowed,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The QuorumLossWaitDuration for ClusterManager 
ClusterManager,StandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),NotAllowed,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The StandByReplicaKeepDuration for ClusterManager 
ClusterManager,PlacementConstraints,wstring,L"",NotAllowed,PUBLIC,src\Management\Common\ManagementConfig.h,The PlacementConstraints for ClusterManager 
ClusterManager,UpgradeStatusPollInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The frequency of polling for application upgrade status. This value determines the rate of update for any GetApplicationUpgradeProgress call 
ClusterManager,FabricUpgradeStatusPollInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The frequency of polling for Fabric upgrade status. This value determines the rate of update for any GetFabricUpgradeProgress call 
ClusterManager,UpgradeHealthCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The frequency of checking health status for monitored application upgrades 
ClusterManager,FabricUpgradeHealthCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The frequency of checking health status for monitored Fabric upgrades 
ClusterManager,SkipRollbackUpdateDefaultService,bool,false,Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,The CM will skip reverting updated default services during application upgrade rollback 
ClusterManager,EnableDefaultServicesUpgrade,bool,false,Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Enable upgrading default services during application upgrade. Default service descriptions would be overwritten after upgrade. 
ClusterManager,InfrastructureTaskHealthCheckWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(0),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The amount of time to wait before starting health checks after post-processing an infrastructure task 
ClusterManager,InfrastructureTaskHealthCheckStableDuration,TimeSpan,Common::TimeSpan::FromSeconds(0),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The amount of time to observe consecutive passed health checks before post-processing of an infrastructure task finishes sucessfully. Observing a failed health check will reset this timer. 
ClusterManager,InfrastructureTaskHealthCheckRetryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The amount of time to spend retrying failed health checks while post-processing an infrastructure task. Observing a passed health check will reset this timer. 
ClusterManager,ImageBuilderTimeoutBuffer,TimeSpan,Common::TimeSpan::FromSeconds(3),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The amount of time to allow for Image Builder specific timeout errors to return to the client. If this buffer is too small; then the client times out before the server and gets a generic timeout error. 
ClusterManager,MinOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The minimum global timeout for internally processing operations on ClusterManager 
ClusterManager,MaxOperationTimeout,TimeSpan,Common::TimeSpan::MaxValue,Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The maximum global timeout for internally processing operations on ClusterManager. 
ClusterManager,MaxTimeoutRetryBuffer,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The maximum operation timeout when internally retrying due to timeouts is <Original Timeout> + <MaxTimeoutRetryBuffer>. Additional timeout is added in increments of MinOperationTimeout. 
ClusterManager,MaxCommunicationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The maximum timeout for internal communications between ClusterManager and other system services (i.e.; Naming Service; Failover Manager and etc). This timeout should be smaller than global MaxOperationTimeout (as there might be multiple communications between system components for each client operation) 
ClusterManager,MaxDataMigrationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The maximum timeout for data migration recovery operations after a Fabric upgrade has taken place 
ClusterManager,MaxOperationRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The maximum delay for internal retries when failures are encountered 
ClusterManager,MaxExponentialOperationRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The maximum exponential delay for internal retries when failures are encountered repeatedly 
ClusterManager,ReplicaSetCheckTimeoutRollbackOverride,TimeSpan,Common::TimeSpan::FromSeconds(1200),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. If ReplicaSetCheckTimeout is set to the maximum value of DWORD; then it's overridden with the value of this config for the purposes of rollback. The value used for rollforward is never overridden. 
ClusterManager,ImageBuilderJobQueueThrottle,int,10,Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Thread count throttle for Image Builder proxy job queue on application requests 
ClusterManager,ImageBuilderUpgradeJobQueueThrottle,int,0,Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Thread count throttle for Image Builder proxy job queue on application upgrade requests. If set to a value greater than zero; then all application upgrades will go through a separate job queue. Otherwise; application upgrades will share the same job queue as all other application requests. 
ClusterManager,ImageBuilderJobQueueDelay,TimeSpan,Common::TimeSpan::Zero,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. Delays execution of Image Builder proxy job queue items (mainly for testing purposes) 
ClusterManager,ImageBuilderProgressTrackingInterval,TimeSpan,Common::TimeSpan::FromSeconds(2),Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. Interval at which CM will poll for operation progress information from Image Builder (<= 0 to disable) 
ClusterManager,MaxApplicationTypeNameLength,int,256,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Maximum application type name string allowed when provisioning (depends on the underlying local store) 
ClusterManager,MaxApplicationTypeVersionLength,int,256,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Maximum application type version string allowed when provisioning (depends on the underlying local store) 
ClusterManager,MaxServiceTypeNameLength,int,256,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Maximum service type name string allowed when provisioning (depends on the underlying local store) 
ClusterManager,ImageStoreErrorDuringUpgradeRetryCount,int,10,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Retry count if the ImageStore becomes unavailable during application or Fabric upgrade. The retry interval is MaxOperationRetryDelay. 
ClusterManager,DisableImageBuilderDirectoryArchives,bool,true,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The CM will attempt to archive the Image Builder temp working directory on validation errors. The archives will still be cleaned up by new CM primaries. 
ClusterManager,EnableAutomaticBaseline,bool,true,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The CM will automatically perform a baseline cluster upgrade if possible when this setting is true. 
ClusterManager,AutomaticBaselineTimeout,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. Timeout used for uploading and provisioning when performing a self-baseline upgrade 
ClusterManager,CompactionThresholdInMB,int,0,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The store will be auto-compacted during open when the database file size exceeds this threshold (<=0 to disable) 
ClusterManager,RolloutFailureTimeout,TimeSpan,Common::TimeSpan::MaxValue,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. Timeout used for stopping retrying and failing application & service operation 
ClusterManager,NamingJobQueueThreadCount,int,20,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The max number of threads that the ClusterManager can use to process Naming requests in parallel. 0 represents the number of CPUs. 
ClusterManager,NamingJobQueueSize,int,1000,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The max size of the ClusterManager job queue that handles Naming requests. Determines how many requests can be queued to be processed on job queue threads. 
ClusterManager,NamingJobQueueMaxPendingWorkCount,int,500,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The max number Naming work items that can be started in parallel. 
Management,MonitoringAgentStorageAccount,SecureString,Common::SecureString(L""),Static,DEPRECATED,src\Management\Common\ManagementConfig.h,Azure Only: The Azure blob storage account (connection string) for uploading application log collection 
Management,MonitoringAgentDirectoryQuota,int,1024,Static,DEPRECATED,src\Management\Common\ManagementConfig.h,Azure Only: The maximum quota for local directory used for buffering the logs. 
Management,MonitoringAgentTransferInterval,TimeSpan,Common::TimeSpan::FromMinutes(10),Static,DEPRECATED,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. Azure Only: The transfer interval for application logs to Azure blob storage 
HealthManager,HealthStoreCleanupInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The period at which the clean up of expired entries is executed. 
HealthManager,HealthStoreCleanupGraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(30*60),Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The minimum time an entity is kept in the store after is marked for deletion. 
HealthManager,HealthStoreEntityWithoutSystemReportKeptInterval,TimeSpan,Common::TimeSpan::FromSeconds(60*60),Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The time an entity can be kept without a corresponding system report. 
HealthManager,HealthStoreNodeEntityInvalidationDuration,TimeSpan,Common::TimeSpan::FromSeconds(60*5),Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The time a node entity can be kept without a corresponding system report. 
HealthManager,HealthProcessingQueueThreadCount,int,0,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The maximum number of threads that can be used to process entity events 
HealthManager,HealthStoreReadRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(1.0),Static,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The delay before retrying store operations 
HealthManager,MaxPendingHealthReportCount,int,8192,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The maximum number of reports that can be accepted for processing. Used if EnableMaxPendingHealthReportSizeEstimation is false. 
HealthManager,EnableMaxPendingHealthReportSizeEstimation,bool,true,Static,INTERNAL,src\Management\Common\ManagementConfig.h,If enabled; Health Manager uses MaxPendingHealthReportSizeBytes to determine whether incoming reports can be accepted for processing. If disabled; Health Manager uses MaxPendingHealthReportCount instead. 
HealthManager,MaxPendingHealthReportSizeBytes,int,52428800,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The maximum size of queued reports that can be accepted for processing; in bytes. Default: 50 MB. Used if EnableMaxPendingHealthReportSizeEstimation is true. 
HealthManager,MaxPendingHealthQueryCount,int,8192,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The maximum number of queries that can be accepted for processing 
HealthManager,MaxPendingHealthCleanupJobCount,int,8192,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The maximum number of cleanup job items that can be queued for processing 
HealthManager,MaxMessageSize,int,16*1024*1024,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The maximum message size for health related messages. DOS attack alleviation 
HealthManager,MessageContentBufferRatio,double,0.75,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The fraction of MaxMessageSize to use as the available buffer limit when calculating how much data to put in a single message (should be in the range [0.0; 1.0]) 
HealthManager,MaxEntityJobItemBatchCount,int,32,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The maximum number of job items that can be executed in the same transaction by an entity 
HealthManager,MaxCloseJobQueueWaitDuration,TimeSpan,Common::TimeSpan::FromMinutes(5),Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The time close replica waits for the job queue to finish before bringing down the process 
HealthManager,EnableQueryJobQueueTraceProcessingThreads,bool,true,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Enable extra tracing for the query job queue; to show thread ids for processing threads. 
HealthManager,EnableHealthCacheConsistencyCheck,bool,true,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Configures whether the health manager should check periodically if the in-memory cache is consistent with the data in the persisted health store. Enabled by default. 
HealthManager,MinHealthCacheConsistencyCheckInterval,TimeSpan,Common::TimeSpan::FromMinutes(30),Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The minimum interval at which the health manager checks the consistency of its in-memory data against the store persisted data. Every HealthStoreCleanupInterval; the cleanup timer checks whether it should perform the consistency check. The consistency check is done at a random interval between min and max; so the entity checks are staggered to decrease performance impact on health manager functionality. 
HealthManager,MaxHealthCacheConsistencyCheckInterval,TimeSpan,Common::TimeSpan::FromMinutes(120),Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The maximum interval at which the health manager checks the consistency of its in-memory data against the store persisted data. Every HealthStoreCleanupInterval; the cleanup timer checks whether it should perform the consistency check. The consistency check is done at a random interval between min and max; so the entity checks are staggered to decrease performance impact on health manager functionality. 
HealthManager/Store,HealthStoreCommitBatchingPeriod,int,50,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The period of time when generated simple transactions are batched. To disable batching; pass 0. 
HealthManager/Store,HealthStoreCommitBatchingSizeLimitInKB,int,256,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The limit for simple transaction batch. When batched replications size reach this limit; the store will start a new group for new simple transaction. 
HealthManager/Store,HealthStoreTransactionLowWatermark,int,100,Static,INTERNAL,src\Management\Common\ManagementConfig.h,When the number of pending completion transaction is less or equal the low watermark; new simple transactions will not be batched. -1 to disable. 
HealthManager/Store,HealthStoreTransactionHighWatermark,int,-1,Static,INTERNAL,src\Management\Common\ManagementConfig.h,When the number of pending completion transaction is greater or equal the high watermark; batching period will be extended every time the period elapses. -1 to disable. 
HealthManager/Store,HealthStoreCommitBatchingPeriodExtension,int,0,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The batch period extension. When batching period needs to be extended; it will be extended this much every time.  0 means extending CommitBatchingPeriod. 
HealthManager/Store,HealthStoreThrottleOperationCount,int64,0,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The store will throttle operations once the number of operations in the replication queue reaches this value 
HealthManager/Store,HealthStoreThrottleQueueSizeBytes,int64,0,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The store will throttle operations once the memory utilization (bytes) of the replication queue reaches this value 
HealthManager/Store,HealthStoreTransactionThrottle,int,4096,Static,INTERNAL,src\Management\Common\ManagementConfig.h,DEPRECATED - Not being consumed by the code and present just for upgrade compatibility 
HealthManager/ClusterHealthPolicy,ConsiderWarningAsError,bool,false,Static,PUBLIC,src\Management\Common\ManagementConfig.h,Cluster health evaluation policy: warnings are treated as errors 
HealthManager/ClusterHealthPolicy,MaxPercentUnhealthyNodes,int,0,Static,PUBLIC,src\Management\Common\ManagementConfig.h,Cluster health evaluation policy: maximum percent of unhealthy nodes allowed for the cluster to be healthy 
HealthManager/ClusterHealthPolicy,MaxPercentUnhealthyApplications,int,0,Static,PUBLIC,src\Management\Common\ManagementConfig.h,Cluster health evaluation policy: maximum percent of unhealthy applications allowed for the cluster to be healthy 
HealthManager/ClusterUpgradeHealthPolicy,MaxPercentDeltaUnhealthyNodes,int,10,Static,PUBLIC,src\Management\Common\ManagementConfig.h,Cluster upgrade health evaluation policy: maximum percent of delta unhealthy nodes allowed for the cluster to be healthy 
HealthManager/ClusterUpgradeHealthPolicy,MaxPercentUpgradeDomainDeltaUnhealthyNodes,int,15,Static,PUBLIC,src\Management\Common\ManagementConfig.h,Cluster upgrade health evaluation policy: maximum percent of delta of unhealthy nodes in an upgrade domain allowed for the cluster to be healthy 
ClusterManager/Replication,InitialReplicationQueueSize,uint,64,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
ClusterManager/Replication,MaxReplicationQueueSize,uint,1024,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
ClusterManager/Replication,MaxReplicationQueueMemorySize,uint,524288000,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
ClusterManager/Replication,InitialCopyQueueSize,uint,64,Static,INTERNAL,src\Management\Common\ManagementConfig.h,This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2.
ClusterManager/Replication,MaxCopyQueueSize,uint,1024,Static,INTERNAL,src\Management\Common\ManagementConfig.h,This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
ClusterManager/Replication,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(50),Static,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator.
ClusterManager/Replication,MaxPendingAcknowledgements,uint,0,Dynamic,DEPRECATED,src\Management\Common\ManagementConfig.h,Maximum number of outstanding operation acknowledgements.  Together with the BatchAckInterval controls replicator operation throttling.
ClusterManager/Replication,EnableReplicationOperationHeaderInBody,bool,false,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Bool that indicates if it is allowed to place the replication operation header in the body of the transport message instead of the header.
ClusterManager/Replication,MaxReplicationMessageSize,uint,52428800,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Maximum message size of replication operations. Default is 50MB.
ClusterManager/Replication,RequireServiceAck,bool,false,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Bool which controls whether the Windows Fabric Replicator will optimistically acknowledge operations on behalf of services. Setting this to false allows the replicator to optimistically acknowledge operations on behalf of the service. While true tells the replicator to require service ack via the Operation.Ack() API before the acknowledgement can be sent back to the primary service. Note that this flag is not respected for persistent services which always require services to acknowledge operations.
ClusterManager/Replication,ReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Management\Common\ManagementConfig.h,The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations
ClusterManager/Replication,SecondaryClearAcknowledgedOperations,bool,false,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Bool which controls if the operations on the secondary replicator are cleared once they are ACK'd by the state provider. Setting this to true may result in additional copy operations during the build of an idle replica
ClusterManager/Replication,UseStreamFaultsAndEndOfStreamOperationAck,bool,true,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Bool which indicates to Windows Fabric Replicator if the state provider intends to use the OperationStream2 interface. If this is enabled the state provider must report fault on the OperationStream2 interface if it cannot apply any more operations that are pumped from the stream.The Windows Fabric Replicator will also dispatch an End of Stream operation in the secondary copy and replication streams.
ClusterManager/Replication,InitialPrimaryReplicationQueueSize,uint,64,Static,INTERNAL,src\Management\Common\ManagementConfig.h,This value defines the initial size for the queue which maintains the replication operations on the primary. Note that it must be a power of 2.
ClusterManager/Replication,MaxPrimaryReplicationQueueSize,uint,0,Static,INTERNAL,src\Management\Common\ManagementConfig.h,This is the maximum number of operations that could exist in the primary replication queue. Note that it must be a power of 2.
ClusterManager/Replication,MaxPrimaryReplicationQueueMemorySize,uint,524288000,Static,INTERNAL,src\Management\Common\ManagementConfig.h,This is the maximum value of the primary replication queue in bytes.
ClusterManager/Replication,InitialSecondaryReplicationQueueSize,uint,64,Static,INTERNAL,src\Management\Common\ManagementConfig.h,This value defines the initial size for the queue which maintains the replication operations on the secondary. Note that it must be a power of 2.
ClusterManager/Replication,MaxSecondaryReplicationQueueSize,uint,0,Static,INTERNAL,src\Management\Common\ManagementConfig.h,This is the maximum number of operations that could exist in the secondary replication queue. Note that it must be a power of 2.
ClusterManager/Replication,MaxSecondaryReplicationQueueMemorySize,uint,524288000,Static,INTERNAL,src\Management\Common\ManagementConfig.h,This is the maximum value of the secondary replication queue in bytes.
ClusterManager/Replication,PrimaryWaitForPendingQuorumsTimeout,TimeSpan,Common::TimeSpan::Zero,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. Specify timespan in seconds. Defines how long the primary replicator waits for receiving a quorum of acknowledgements for any pending replication operations before processing a reconfiguration request, that could potentially result in ‘cancelling’ the pending replication operationsl
ClusterManager/Replication,QueueHealthMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,DEPRECATED,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor any warning/error health events in the replication operation queues. A value of '0' disables health monitoring
ClusterManager/Replication,QueueHealthWarningAtUsagePercent,uint,80,Static,DEPRECATED,src\Management\Common\ManagementConfig.h,This value determines the replication queue usage(in percentage) after which we report warning about high queue usage. We do so after a grace interval of QueueHealthMonitoringInterval. If the queue usage falls below this percentage in the grace interval, the warning is not reported.
ClusterManager/Replication,SlowApiMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,DEPRECATED,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor GetNextCopyState and GetNextCopyContext async api's. A value of '0' disables health monitoring. A warning health report is generated if the async api takes longer than this duration
ClusterManager/Replication,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation.
ClusterManager/Replication,CompleteReplicateThreadCount,uint,0,Static,DEPRECATED,src\Management\Common\ManagementConfig.h,The maximum number of parallel threads that can be used by the Windows Fabric Replicator to quorum complete Replication operations on the primary
ClusterManager/Replication,AllowMultipleQuorumSet,bool,true,Static,DEPRECATED,src\Management\Common\ManagementConfig.h,Bool which controls whether the Windows Fabric Replicator considers replicas in the previous and current configuration to compute quorum during reconfigurations. Setting this to false could result in higher chances of dataloss during failures
ClusterManager/Replication,TraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,DEPRECATED,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. Determines the tracing interval of the replicator's progress (if there was any progress from the previous trace).
ClusterManager/Replication,QueueFullTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,DEPRECATED,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
ClusterManager/Replication,EnableSlowIdleRestartForVolatile,bool,false,Dynamic,DEPRECATED,src\Management\Common\ManagementConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
ClusterManager/Replication,EnableSlowIdleRestartForPersisted,bool,true,Dynamic,DEPRECATED,src\Management\Common\ManagementConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
ClusterManager/Replication,SlowIdleRestartAtQueueUsagePercent,uint,85,Dynamic,DEPRECATED,src\Management\Common\ManagementConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
ClusterManager/Replication,EnableSlowActiveSecondaryRestartForVolatile,bool,false,Dynamic,DEPRECATED,src\Management\Common\ManagementConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
ClusterManager/Replication,EnableSlowActiveSecondaryRestartForPersisted,bool,true,Dynamic,DEPRECATED,src\Management\Common\ManagementConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
ClusterManager/Replication,SlowActiveSecondaryRestartAtQueueUsagePercent,uint,90,Dynamic,DEPRECATED,src\Management\Common\ManagementConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
ClusterManager/Replication,ActiveSecondaryCountAdditionalToWriteQuorumNotRestaredDueToSlowness,uint,0,Dynamic,DEPRECATED,src\Management\Common\ManagementConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
ClusterManager/Replication,SlowActiveSecondaryRestartAtAgeOfOldestPrimaryOperation,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,DEPRECATED,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
ClusterManager/Replication,SecondaryProgressRateDecayFactor,double,0.5,Dynamic,DEPRECATED,src\Management\Common\ManagementConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
ClusterManager/Replication,IdleReplicaMaxLagDurationBeforePromotion,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,DEPRECATED,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
DnsService,IsEnabled,bool,false,Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,
DnsService,InstanceCount,int,-1,Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,
DnsService,PlacementConstraints,wstring,L"",Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,
DnsService,SetAsPreferredDns,bool,true,Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,
DnsService,DnsPort,int,53,Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,
DnsService,NumberOfConcurrentQueries,int,100,Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,
DnsService,MaxMessageSizeInKB,int,8,Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,
DnsService,MaxCacheSize,int,5000,Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,
DnsService,NDots,int,1,Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,
DnsService,IsRecursiveQueryEnabled,bool,true,Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,
DnsService,TimeToLive,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,Specify timespan in seconds. 
DnsService,FabricQueryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,Specify timespan in seconds. 
DnsService,RecursiveQueryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,Specify timespan in seconds. 
DnsService,NodeDnsCacheHealthCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,PUBLIC,src\Management\DnsService\config\DnsServiceConfig.h,Specify timespan in seconds. 
FaultAnalysisService,TargetReplicaSetSize,int,0,Static,PUBLIC,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,NOT_PLATFORM_UNIX_START The TargetReplicaSetSize for FaultAnalysisService 
FaultAnalysisService,MinReplicaSetSize,int,0,Static,PUBLIC,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,The MinReplicaSetSize for FaultAnalysisService 
FaultAnalysisService,ReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromMinutes(60),Static,PUBLIC,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,Specify timespan in seconds. The ReplicaRestartWaitDuration for FaultAnalysisService 
FaultAnalysisService,QuorumLossWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,Static,PUBLIC,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,Specify timespan in seconds. The QuorumLossWaitDuration for FaultAnalysisService 
FaultAnalysisService,StandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromMinutes(60 * 24 * 7),Static,PUBLIC,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,Specify timespan in seconds. The StandByReplicaKeepDuration for FaultAnalysisService 
FaultAnalysisService,PlacementConstraints,wstring,L"",Static,PUBLIC,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,The PlacementConstraints for FaultAnalysisService 
FaultAnalysisService,MaxOperationRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,INTERNAL,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,Specify timespan in seconds. The maximum delay for internal retries when failures are encountered 
FaultAnalysisService,MaxCommunicationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,Specify timespan in seconds. The maximum timeout for internal communications between RepairManager and other system services (e.g. Cluster Manager; Failover Manager; etc.) 
FaultAnalysisService,TestModeEnabled,bool,false,Static,INTERNAL,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,If this is true Fault Analysis Service will run internal tests 
FaultAnalysisService,ApiTestMode,int,0,Static,INTERNAL,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,This is for testing Chaos APIs and other future ones 
FaultAnalysisService,RequestTimeoutInSeconds,int,60,Static,INTERNAL,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,The timeout for each request made by the testability service 
FaultAnalysisService,OperationTimeoutInSeconds,int,300,Static,INTERNAL,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,The time to retry requests made by the testability service.  This wrappers RequestTimeoutInSeconds 
FaultAnalysisService,MaxStoredActionCount,int64,10000,Static,INTERNAL,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,
FaultAnalysisService,MaxStoredChaosEventCount,int,25000,Static,INTERNAL,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,
FaultAnalysisService,StoredActionCleanupIntervalInSeconds,int,3600,Static,PUBLIC,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,This is how often the store will be cleaned up.  Only actions in a terminal state; and that completed at least CompletedActionKeepDurationInSeconds ago will be removed. 
FaultAnalysisService,CompletedActionKeepDurationInSeconds,int,604800,Static,PUBLIC,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,This is approximately how long to keep actions that are in a terminal state.  This also depends on StoredActionCleanupIntervalInSeconds; since the work to cleanup is only done on that interval. 604800 is 7 days. 
FaultAnalysisService,CommandStepRetryBackoffInSeconds,int,1,Static,INTERNAL,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,The time (in seconds) to backoff before retrying the same step again. 
FaultAnalysisService,StoredChaosEventCleanupIntervalInSeconds,int,3600,Static,PUBLIC,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,This is how often the store will be audited for cleanup; if the number of events is more than 30000; the cleanup will kick in. 
FaultAnalysisService,StopNodeMinDurationInSeconds,int,5 * 60,Static,INTERNAL,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,The min allowed duration for stop node through StartNodeTransition().  Api calls that provide a value below this will fail. 
FaultAnalysisService,StopNodeMaxDurationInSeconds,int,60 * 60 * 4,Static,INTERNAL,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,The max allowed duration for stop node through StartNodeTransition().  Api calls that provide a value above this will fail. 
FaultAnalysisService,ConcurrentRequests,int,100,Static,INTERNAL,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,The max number of concurrent requests FAS can run together. 
FaultAnalysisService,DataLossCheckWaitDurationInSeconds,int,25,Static,PUBLIC,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,The total amount of time; in seconds; that the system will wait for data loss to happen.  This is internally used when the StartPartitionDataLossAsync() api is called. 
FaultAnalysisService,DataLossCheckPollIntervalInSeconds,int,5,Static,PUBLIC,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,The is the time between the checks the system performs  while waiting for data loss to happen.  The number of times the data loss number will be checked per internal iteration is DataLossCheckWaitDurationInSeconds/this. 
FaultAnalysisService,ReplicaDropWaitDurationInSeconds,int,600,Static,PUBLIC,src\Management\FaultAnalysisService\FaultAnalysisServiceConfig.h,This parameter is used when the data loss api is called.  It controls how long the system will wait for a replica to get dropped after remove replica is internally invoked on it. 
FileStoreService,NamingOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60.0),Dynamic,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The timeout for performing naming operation 
FileStoreService,QueryOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60.0),Dynamic,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The timeout for performing query operation 
FileStoreService,MaxCopyOperationThreads,uint,0,Dynamic,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The maximum number of parallel files that secondary can copy from primary. '0' == number of cores 
FileStoreService,MaxFileOperationThreads,uint,100,Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The maximum number of parallel threads allowed to perform FileOperations (Copy/Move) in the primary. '0' == number of cores 
FileStoreService,MaxStoreOperations,uint,4096,Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The maximum number of parallel store transcation operations allowed on primary. '0' == number of cores 
FileStoreService,MaxRequestProcessingThreads,uint,200,Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The maximum number of parallel threads allowed to process requests in the primary. '0' == number of cores 
FileStoreService,MaxSecondaryFileCopyFailureThreshold,uint,25,Dynamic,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The maximum number of file copy retries on the secondary before giving up 
FileStoreService,AnonymousAccessEnabled,bool,true,Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,Enable/Disable anonymous access to the FileStoreService shares 
FileStoreService,PrimaryAccountType,wstring,L"",Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The primary AccountType of the pricipal to ACL the FileStoreService shares 
FileStoreService,PrimaryAccountUserName,wstring,L"",Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The primary account Username of the pricipal to ACL the FileStoreService shares 
FileStoreService,PrimaryAccountUserPassword,SecureString,Common::SecureString(L""),Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The primary account password of the pricipal to ACL the FileStoreService shares 
FileStoreService,PrimaryAccountNTLMPasswordSecret,SecureString,Common::SecureString(L""),Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The password secret which used as seed to generated same password when using NTLM authentication 
FileStoreService,PrimaryAccountNTLMX509StoreLocation,wstring,L"LocalMachine",Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The store location of the X509 certificate used to generate HMAC on the PrimaryAccountNTLMPasswordSecret  when using NTLM authentication 
FileStoreService,PrimaryAccountNTLMX509StoreName,wstring,L"MY",Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The store name of the X509 certificate used to generate HMAC on the PrimaryAccountNTLMPasswordSecret  when using NTLM authentication 
FileStoreService,PrimaryAccountNTLMX509Thumbprint,wstring,L"",Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The thumbprint of the X509 certificate used to generate HMAC on the PrimaryAccountNTLMPasswordSecret  when using NTLM authentication 
FileStoreService,SecondaryAccountType,wstring,L"",Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The seconday AccountType of the pricipal to ACL the FileStoreService shares 
FileStoreService,SecondaryAccountUserName,wstring,L"",Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The seconday account Username of the pricipal to ACL the FileStoreService shares 
FileStoreService,SecondaryAccountUserPassword,SecureString,Common::SecureString(L""),Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The seconday account password of the pricipal to ACL the FileStoreService shares 
FileStoreService,SecondaryAccountNTLMPasswordSecret,SecureString,Common::SecureString(L""),Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The password secret which used as seed to generated same password when using NTLM authentication 
FileStoreService,SecondaryAccountNTLMX509StoreLocation,wstring,L"LocalMachine",Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The store location of the X509 certificate used to generate HMAC on the SecondaryAccountNTLMPasswordSecret  when using NTLM authentication 
FileStoreService,SecondaryAccountNTLMX509StoreName,wstring,L"MY",Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The store name of the X509 certificate used to generate HMAC on the SecondaryAccountNTLMPasswordSecret  when using NTLM authentication 
FileStoreService,SecondaryAccountNTLMX509Thumbprint,wstring,L"",Static,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The thumbprint of the X509 certificate used to generate HMAC on the SecondaryAccountNTLMPasswordSecret  when using NTLM authentication 
FileStoreService,CommitBatchingPeriod,int,50,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The period of time when generated simple transactions are batched. To disable batching; pass 0. 
FileStoreService,CommitBatchingSizeLimitInKB,int,10,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The limit for simple transaction batch. When batched replications size reach this limit; the store will start a new group for new simple transaction. 
FileStoreService,TransactionLowWatermark,int,25,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,When the number of pending completion transaction is less or equal the low watermark; new simple transactions will not be batched. -1 to disable. 
FileStoreService,TransactionHighWatermark,int,-1,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,When the number of pending completion transaction is greater or equal the high watermark; batching period will be extended every time the period elapses. -1 to disable. 
FileStoreService,CommitBatchingPeriodExtension,int,0,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The batch period extension. When batching period needs to be extended; it will be extended this much every time.  0 means extending CommitBatchingPeriod. 
FileStoreService,ThrottleOperationCount,int64,0,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The store will throttle operations once the number of operations in the replication queue reaches this value 
FileStoreService,ThrottleQueueSizeBytes,int64,0,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The store will throttle operations once the memory utilization (bytes) of the replication queue reaches this value 
FileStoreService,MaxCursors,int,16384,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The max cursors for ese store 
FileStoreService,MaxClientOperationThreads,uint,25,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The maximum number of parallel threads allowed during upload/download of files in the client. '0' == number of cores 
FileStoreService,StoreTransactionRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(3.0),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The backoff interval for StoreTransaction failures 
FileStoreService,StoreTransactionMaxRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The max backoff interval for StoreTransaction failures 
FileStoreService,RecoveryRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The backoff interval for Recovery failure 
FileStoreService,GetStagingLocationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60.0),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. Timeout for getting the primary staging location on client 
FileStoreService,InternalServiceCallTimeout,TimeSpan,Common::TimeSpan::FromSeconds(90.0),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. Timeout for getting the primary staging location on client 
FileStoreService,ClientRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The backoff interval for client-side retries 
FileStoreService,MaxFileOperationFailureRetryCount,uint,3,Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The max retry count on file operation failure 
FileStoreService,FileOperationBackoffInterval,TimeSpan,Common::TimeSpan::FromSeconds(1.0),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The backoff interval for file operations 
FileStoreService,UploadSessionTimeout,TimeSpan,Common::TimeSpan::FromMinutes(30),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The timeout for upload session 
FileStoreService,ProcessPendingCleanupInterval,TimeSpan,Common::TimeSpan::FromMinutes(5),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The interval of processing the next cleanup of upload sessions 
FileStoreService,CompactionThresholdInMB,int,0,Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The store will be auto-compacted during open when the database file size exceeds this threshold (<=0 to disable) 
FileStoreService/Replication,InitialReplicationQueueSize,uint,64,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
FileStoreService/Replication,MaxReplicationQueueSize,uint,1024,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
FileStoreService/Replication,MaxReplicationQueueMemorySize,uint,314572800,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
FileStoreService/Replication,InitialCopyQueueSize,uint,64,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2.
FileStoreService/Replication,MaxCopyQueueSize,uint,1024,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
FileStoreService/Replication,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(0),Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator.
FileStoreService/Replication,MaxPendingAcknowledgements,uint,0,Dynamic,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,Maximum number of outstanding operation acknowledgements.  Together with the BatchAckInterval controls replicator operation throttling.
FileStoreService/Replication,EnableReplicationOperationHeaderInBody,bool,false,Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Bool that indicates if it is allowed to place the replication operation header in the body of the transport message instead of the header.
FileStoreService/Replication,MaxReplicationMessageSize,uint,52428800,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Maximum message size of replication operations. Default is 50MB.
FileStoreService/Replication,RequireServiceAck,bool,false,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Bool which controls whether the Windows Fabric Replicator will optimistically acknowledge operations on behalf of services. Setting this to false allows the replicator to optimistically acknowledge operations on behalf of the service. While true tells the replicator to require service ack via the Operation.Ack() API before the acknowledgement can be sent back to the primary service. Note that this flag is not respected for persistent services which always require services to acknowledge operations.
FileStoreService/Replication,ReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations
FileStoreService/Replication,SecondaryClearAcknowledgedOperations,bool,false,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Bool which controls if the operations on the secondary replicator are cleared once they are ACK'd by the state provider. Setting this to true may result in additional copy operations during the build of an idle replica
FileStoreService/Replication,UseStreamFaultsAndEndOfStreamOperationAck,bool,true,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Bool which indicates to Windows Fabric Replicator if the state provider intends to use the OperationStream2 interface. If this is enabled the state provider must report fault on the OperationStream2 interface if it cannot apply any more operations that are pumped from the stream.The Windows Fabric Replicator will also dispatch an End of Stream operation in the secondary copy and replication streams.
FileStoreService/Replication,InitialPrimaryReplicationQueueSize,uint,64,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,This value defines the initial size for the queue which maintains the replication operations on the primary. Note that it must be a power of 2.
FileStoreService/Replication,MaxPrimaryReplicationQueueSize,uint,8192,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,This is the maximum number of operations that could exist in the primary replication queue. Note that it must be a power of 2.
FileStoreService/Replication,MaxPrimaryReplicationQueueMemorySize,uint,314572800,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,This is the maximum value of the primary replication queue in bytes.
FileStoreService/Replication,InitialSecondaryReplicationQueueSize,uint,64,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,This value defines the initial size for the queue which maintains the replication operations on the secondary. Note that it must be a power of 2.
FileStoreService/Replication,MaxSecondaryReplicationQueueSize,uint,16384,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,This is the maximum number of operations that could exist in the secondary replication queue. Note that it must be a power of 2.
FileStoreService/Replication,MaxSecondaryReplicationQueueMemorySize,uint,314572800,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,This is the maximum value of the secondary replication queue in bytes.
FileStoreService/Replication,PrimaryWaitForPendingQuorumsTimeout,TimeSpan,Common::TimeSpan::Zero,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. Specify timespan in seconds. Defines how long the primary replicator waits for receiving a quorum of acknowledgements for any pending replication operations before processing a reconfiguration request, that could potentially result in ‘cancelling’ the pending replication operationsl
FileStoreService/Replication,QueueHealthMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor any warning/error health events in the replication operation queues. A value of '0' disables health monitoring
FileStoreService/Replication,QueueHealthWarningAtUsagePercent,uint,80,Static,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,This value determines the replication queue usage(in percentage) after which we report warning about high queue usage. We do so after a grace interval of QueueHealthMonitoringInterval. If the queue usage falls below this percentage in the grace interval, the warning is not reported.
FileStoreService/Replication,SlowApiMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor GetNextCopyState and GetNextCopyContext async api's. A value of '0' disables health monitoring. A warning health report is generated if the async api takes longer than this duration
FileStoreService/Replication,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation.
FileStoreService/Replication,CompleteReplicateThreadCount,uint,0,Static,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,The maximum number of parallel threads that can be used by the Windows Fabric Replicator to quorum complete Replication operations on the primary
FileStoreService/Replication,AllowMultipleQuorumSet,bool,true,Static,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,Bool which controls whether the Windows Fabric Replicator considers replicas in the previous and current configuration to compute quorum during reconfigurations. Setting this to false could result in higher chances of dataloss during failures
FileStoreService/Replication,TraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. Determines the tracing interval of the replicator's progress (if there was any progress from the previous trace).
FileStoreService/Replication,QueueFullTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
FileStoreService/Replication,EnableSlowIdleRestartForVolatile,bool,false,Dynamic,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
FileStoreService/Replication,EnableSlowIdleRestartForPersisted,bool,true,Dynamic,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
FileStoreService/Replication,SlowIdleRestartAtQueueUsagePercent,uint,85,Dynamic,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
FileStoreService/Replication,EnableSlowActiveSecondaryRestartForVolatile,bool,false,Dynamic,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
FileStoreService/Replication,EnableSlowActiveSecondaryRestartForPersisted,bool,true,Dynamic,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
FileStoreService/Replication,SlowActiveSecondaryRestartAtQueueUsagePercent,uint,90,Dynamic,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
FileStoreService/Replication,ActiveSecondaryCountAdditionalToWriteQuorumNotRestaredDueToSlowness,uint,0,Dynamic,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
FileStoreService/Replication,SlowActiveSecondaryRestartAtAgeOfOldestPrimaryOperation,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
FileStoreService/Replication,SecondaryProgressRateDecayFactor,double,0.5,Dynamic,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
FileStoreService/Replication,IdleReplicaMaxLagDurationBeforePromotion,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,DEPRECATED,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
ImageStoreService,Enabled,bool,false,Static,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,The Enabled flag for ImageStoreService 
ImageStoreService,TargetReplicaSetSize,int,7,Static,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,The TargetReplicaSetSize for ImageStoreService 
ImageStoreService,MinReplicaSetSize,int,3,Static,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,The MinReplicaSetSize for ImageStoreService 
ImageStoreService,ReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),Static,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. The ReplicaRestartWaitDuration for ImageStoreService 
ImageStoreService,QuorumLossWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,Static,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. The QuorumLossWaitDuration for ImageStoreService 
ImageStoreService,StandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),Static,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. The StandByReplicaKeepDuration for ImageStoreService 
ImageStoreService,PlacementConstraints,wstring,L"",Static,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,The PlacementConstraints for ImageStoreService 
ImageStoreClient,ClientUploadTimeout,TimeSpan,Common::TimeSpan::FromSeconds(1800),Dynamic,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. Timeout value for top-level upload request to Image Store Service 
ImageStoreClient,ClientCopyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(1800),Dynamic,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. Timeout value for top-level copy request to Image Store Service 
ImageStoreClient,ClientDownloadTimeout,TimeSpan,Common::TimeSpan::FromSeconds(1800),Dynamic,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. Timeout value for top-level download request to Image Store Service 
ImageStoreClient,ClientListTimeout,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. Timeout value for top-level list request to Image Store Service 
ImageStoreClient,ClientDefaultTimeout,TimeSpan,Common::TimeSpan::FromSeconds(180),Dynamic,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. Timeout value for all non-upload/non-download requests (e.g. exists; delete) to Image Store Service 
ImageStoreClient,ClientDefaultProgressReportingInterval,TimeSpan,Common::TimeSpan::FromSeconds(2),Dynamic,INTERNAL,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. Default interval used to report progress information (<= 0 to disable) 
ImageStoreClient,ClientOperationDelayMilliseconds,int,0,Dynamic,INTERNAL,src\Management\ImageStore\ImageStoreServiceConfig.h,Delay between starting concurrent operations such as parallel downloading (used for testing) 
ImageStoreService,EnableClusterManagerAffinity,bool,true,Static,INTERNAL,src\Management\ImageStore\ImageStoreServiceConfig.h,Enable/Disable affinity of ImageStoreService to CM 
RepairManager,TargetReplicaSetSize,int,0,Static,PUBLIC,src\Management\RepairManager\RepairManagerConfig.h,The TargetReplicaSetSize for RepairManager 
RepairManager,MinReplicaSetSize,int,0,Static,PUBLIC,src\Management\RepairManager\RepairManagerConfig.h,The MinReplicaSetSize for RepairManager 
RepairManager,ReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 60),Static,PUBLIC,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The ReplicaRestartWaitDuration for RepairManager 
RepairManager,QuorumLossWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,Static,PUBLIC,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The QuorumLossWaitDuration for RepairManager 
RepairManager,StandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 60 * 24 * 7),Static,PUBLIC,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The StandByReplicaKeepDuration for RepairManager 
RepairManager,PlacementConstraints,wstring,L"",Static,PUBLIC,src\Management\RepairManager\RepairManagerConfig.h,The PlacementConstraints for RepairManager 
RepairManager,MaxOperationRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The maximum delay for internal retries when failures are encountered 
RepairManager,MaxCommunicationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The maximum timeout for internal communications between RepairManager and other system services (e.g. Cluster Manager; Failover Manager; etc.) 
RepairManager,RepairTaskProcessingInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The processing interval used by the repair task background processing (in Preparing; Restoring states) 
RepairManager,AllowNewTasks,bool,true,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Allows new repair requests to be created 
RepairManager,MaxActiveTasks,int,100,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,The maximum number of repair requests that can be in a state other than Completed 
RepairManager,MaxTotalTasks,int,2000,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,The maximum number of repair requests that can exist; regardless of state 
RepairManager,CompletedTaskCleanupEnabled,bool,true,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Determines whether automatic cleanup of completed tasks is enabled 
RepairManager,CleanupInterval,TimeSpan,Common::TimeSpan::FromMinutes(5),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The interval between task cleanup attempts 
RepairManager,DesiredTotalTasks,int,200,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,The desired total task count; RM automatic cleanup will delete tasks older than min age to try to keep the count no higher than this number 
RepairManager,MinCompletedTaskAge,TimeSpan,Common::TimeSpan::FromMinutes(2 * 24 * 60),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The minimum amount of time a completed task will be kept before being eligible for automatic cleanup 
RepairManager,MaxCompletedTaskAge,TimeSpan,Common::TimeSpan::FromMinutes(7 * 24 * 60),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The maximum amount of time a completed task will be kept; regardless of the total task count 
RepairManager,CompactionThresholdInMB,int,0,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,The store will be auto-compacted during open when the database file size exceeds this threshold (<=0 to disable) 
RepairManager,EnableHealthChecks,bool,false,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Determines whether health checks are enabled for repair tasks in the repair manager 
RepairManager,EnableClusterHealthQuery,bool,true,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Performs the actual query with the health client API 
RepairManager,HealthCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The interval with which health checks are scheduled by the repair manager 
RepairManager,HealthCheckSampleValidDuration,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The time after which the validity of a health check sample expires. This resets the successful health check duration 
RepairManager,HealthCheckStableDuration,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The amount of time to observe consecutive passed health samples before a repair task is said to have passed checks in either the Preparing or Restoring stage. Observing a failed health sample will reset this. 
RepairManager,PreparingHealthCheckRetryTimeout,TimeSpan,Common::TimeSpan::MaxValue,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The amount of time to retry health checks for a repair task in the Preparing stage. 
RepairManager,RestoringHealthCheckRetryTimeout,TimeSpan,Common::TimeSpan::MaxValue,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The amount of time to retry health checks for a repair task in the Restoring stage. 
RepairManager,HealthCheckOnIdleDuration,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The time window to continue doing health checks even when there are no active repair tasks. This is an optimization for new repair tasks that may arrive a few minutes after all previous tasks have completed. 
RepairManager,HealthCheckClockSkewTolerance,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. When retrieving timestamps from the persisted replicated store (LastHealthyAt and LastErrorAt); there may be a possibility of clock skews since another RM replica may have persisted this timestamp data in the first place. If this clock skew is larger than the below threshold; then ignore the persisted data and instead recreate the timestamps. E.g. if one replica had a clock skew of 1 day (for whatever reason) and it persisted LastErrorAt to a future date and failed over to another replica; then no repair task will pass health check since it can never build up a stable window beyond LastErrorAt till the 1 day passes. The below config helps avoid this problem. 
RepairManager/Replication,InitialReplicationQueueSize,uint,64,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
RepairManager/Replication,MaxReplicationQueueSize,uint,1024,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
RepairManager/Replication,MaxReplicationQueueMemorySize,uint,314572800,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
RepairManager/Replication,InitialCopyQueueSize,uint,64,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2.
RepairManager/Replication,MaxCopyQueueSize,uint,1024,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
RepairManager/Replication,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(50),Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator.
RepairManager/Replication,MaxPendingAcknowledgements,uint,0,Dynamic,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,Maximum number of outstanding operation acknowledgements.  Together with the BatchAckInterval controls replicator operation throttling.
RepairManager/Replication,EnableReplicationOperationHeaderInBody,bool,false,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Bool that indicates if it is allowed to place the replication operation header in the body of the transport message instead of the header.
RepairManager/Replication,MaxReplicationMessageSize,uint,52428800,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Maximum message size of replication operations. Default is 50MB.
RepairManager/Replication,RequireServiceAck,bool,false,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Bool which controls whether the Windows Fabric Replicator will optimistically acknowledge operations on behalf of services. Setting this to false allows the replicator to optimistically acknowledge operations on behalf of the service. While true tells the replicator to require service ack via the Operation.Ack() API before the acknowledgement can be sent back to the primary service. Note that this flag is not respected for persistent services which always require services to acknowledge operations.
RepairManager/Replication,ReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations
RepairManager/Replication,SecondaryClearAcknowledgedOperations,bool,false,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Bool which controls if the operations on the secondary replicator are cleared once they are ACK'd by the state provider. Setting this to true may result in additional copy operations during the build of an idle replica
RepairManager/Replication,UseStreamFaultsAndEndOfStreamOperationAck,bool,true,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Bool which indicates to Windows Fabric Replicator if the state provider intends to use the OperationStream2 interface. If this is enabled the state provider must report fault on the OperationStream2 interface if it cannot apply any more operations that are pumped from the stream.The Windows Fabric Replicator will also dispatch an End of Stream operation in the secondary copy and replication streams.
RepairManager/Replication,InitialPrimaryReplicationQueueSize,uint,64,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,This value defines the initial size for the queue which maintains the replication operations on the primary. Note that it must be a power of 2.
RepairManager/Replication,MaxPrimaryReplicationQueueSize,uint,8192,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,This is the maximum number of operations that could exist in the primary replication queue. Note that it must be a power of 2.
RepairManager/Replication,MaxPrimaryReplicationQueueMemorySize,uint,314572800,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,This is the maximum value of the primary replication queue in bytes.
RepairManager/Replication,InitialSecondaryReplicationQueueSize,uint,64,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,This value defines the initial size for the queue which maintains the replication operations on the secondary. Note that it must be a power of 2.
RepairManager/Replication,MaxSecondaryReplicationQueueSize,uint,16384,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,This is the maximum number of operations that could exist in the secondary replication queue. Note that it must be a power of 2.
RepairManager/Replication,MaxSecondaryReplicationQueueMemorySize,uint,314572800,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,This is the maximum value of the secondary replication queue in bytes.
RepairManager/Replication,PrimaryWaitForPendingQuorumsTimeout,TimeSpan,Common::TimeSpan::Zero,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. Specify timespan in seconds. Defines how long the primary replicator waits for receiving a quorum of acknowledgements for any pending replication operations before processing a reconfiguration request, that could potentially result in ‘cancelling’ the pending replication operationsl
RepairManager/Replication,QueueHealthMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor any warning/error health events in the replication operation queues. A value of '0' disables health monitoring
RepairManager/Replication,QueueHealthWarningAtUsagePercent,uint,80,Static,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,This value determines the replication queue usage(in percentage) after which we report warning about high queue usage. We do so after a grace interval of QueueHealthMonitoringInterval. If the queue usage falls below this percentage in the grace interval, the warning is not reported.
RepairManager/Replication,SlowApiMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor GetNextCopyState and GetNextCopyContext async api's. A value of '0' disables health monitoring. A warning health report is generated if the async api takes longer than this duration
RepairManager/Replication,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation.
RepairManager/Replication,CompleteReplicateThreadCount,uint,0,Static,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,The maximum number of parallel threads that can be used by the Windows Fabric Replicator to quorum complete Replication operations on the primary
RepairManager/Replication,AllowMultipleQuorumSet,bool,true,Static,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,Bool which controls whether the Windows Fabric Replicator considers replicas in the previous and current configuration to compute quorum during reconfigurations. Setting this to false could result in higher chances of dataloss during failures
RepairManager/Replication,TraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. Determines the tracing interval of the replicator's progress (if there was any progress from the previous trace).
RepairManager/Replication,QueueFullTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
RepairManager/Replication,EnableSlowIdleRestartForVolatile,bool,false,Dynamic,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
RepairManager/Replication,EnableSlowIdleRestartForPersisted,bool,true,Dynamic,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
RepairManager/Replication,SlowIdleRestartAtQueueUsagePercent,uint,85,Dynamic,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
RepairManager/Replication,EnableSlowActiveSecondaryRestartForVolatile,bool,false,Dynamic,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
RepairManager/Replication,EnableSlowActiveSecondaryRestartForPersisted,bool,true,Dynamic,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
RepairManager/Replication,SlowActiveSecondaryRestartAtQueueUsagePercent,uint,90,Dynamic,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
RepairManager/Replication,ActiveSecondaryCountAdditionalToWriteQuorumNotRestaredDueToSlowness,uint,0,Dynamic,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
RepairManager/Replication,SlowActiveSecondaryRestartAtAgeOfOldestPrimaryOperation,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
RepairManager/Replication,SecondaryProgressRateDecayFactor,double,0.5,Dynamic,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
RepairManager/Replication,IdleReplicaMaxLagDurationBeforePromotion,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,DEPRECATED,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
TokenValidationService,Providers,wstring,L"DSTS",Static,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,Comma separated list of token validation providers to enable (valid providers are: DSTS; AAD). Currently only a single provider can be enabled at any time. 
DSTSTokenValidationService,DSTSDnsName,wstring,L"",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,DNS name of the DSTS server 
DSTSTokenValidationService,DSTSRealm,wstring,L"",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,Realm name of DSTS server 
DSTSTokenValidationService,CloudServiceDnsName,wstring,L"",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,DNS name of cloud service for which DSTS security token is requested 
DSTSTokenValidationService,CloudServiceName,wstring,L"",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,Name of cloud service for which DSTS security token is requested 
DSTSTokenValidationService,PublicCertificateFindValue,wstring,L"",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,X509 Certificate find value for DSTS public certificate 
DSTSTokenValidationService,PublicCertificateFindType,wstring,L"",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,X509 certificate findtype for DSTS public certificate ex. FindByThumbprint 
DSTSTokenValidationService,PublicCertificateStoreName,wstring,L"My",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,Store name where DSTS servers public certificate is stored 
UpgradeOrchestrationService,TargetReplicaSetSize,int,0,Static,PUBLIC,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,The TargetReplicaSetSize for UpgradeOrchestrationService 
UpgradeOrchestrationService,MinReplicaSetSize,int,0,Static,PUBLIC,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,The MinReplicaSetSize for UpgradeOrchestrationService 
UpgradeOrchestrationService,ReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromMinutes(60),Static,PUBLIC,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,Specify timespan in seconds. The ReplicaRestartWaitDuration for UpgradeOrchestrationService 
UpgradeOrchestrationService,QuorumLossWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,Static,PUBLIC,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,Specify timespan in seconds. The QuorumLossWaitDuration for UpgradeOrchestrationService 
UpgradeOrchestrationService,StandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromMinutes(60 * 24 * 7),Static,PUBLIC,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,Specify timespan in seconds. The StandByReplicaKeepDuration for UpgradeOrchestrationService 
UpgradeOrchestrationService,PlacementConstraints,wstring,L"",Static,PUBLIC,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,The PlacementConstraints for UpgradeOrchestrationService 
UpgradeOrchestrationService,AutoupgradeEnabled,bool,true,Static,PUBLIC,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,Automatic polling and upgrade action based on a goal-state file 
UpgradeOrchestrationService,UpgradeApprovalRequired,bool,false,Static,PUBLIC,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,Setting to make code upgrade require administrator approval before proceeding 
UpgradeOrchestrationService,MaxOperationRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,INTERNAL,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,Specify timespan in seconds. The maximum delay for internal retries when failures are encountered 
UpgradeOrchestrationService,MaxCommunicationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,Specify timespan in seconds. The maximum timeout for internal communications between RepairManager and other system services (e.g. Cluster Manager; Failover Manager; etc.) 
UpgradeOrchestrationService,TestModeEnabled,bool,false,Static,INTERNAL,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,If this is true UpgradeOrchestrationService will run internal tests  //?????? 
UpgradeOrchestrationService,RequestTimeoutInSeconds,int,60,Static,INTERNAL,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,The timeout for each request made by the UpgradeOrchestrationService 
UpgradeOrchestrationService,ClusterId,wstring,L"",Static,INTERNAL,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,The ID for the cluster 
UpgradeOrchestrationService,GoalStateFileUrl,wstring,L"",Static,INTERNAL,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,Dynamic reroute url pointing to latest production goal state file 
UpgradeOrchestrationService,GoalStateFetchIntervalInSeconds,int,0,Dynamic,INTERNAL,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,If interval is not set to 24 hr; this time of day polling interval is ignored and this interval is used instead 
UpgradeOrchestrationService,GoalStateProvisioningTimeOfDay,wstring,L"",Static,INTERNAL,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,If GoalStateFetchIntervalInSeconds is set to 24 hours (86400 sec); provisioning time of day is active by below setting. Default 22:00 
UpgradeOrchestrationService,FaultFlow,wstring,L"",Dynamic,INTERNAL,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,The upgrade flow in which the fault should be injected 
UpgradeOrchestrationService,FaultStep,int,-1,Dynamic,INTERNAL,src\Management\UpgradeOrchestrationService\UpgradeOrchestrationServiceConfig.h,The upgrade step at which the fault should be injected 
UpgradeService,PlacementConstraints,wstring,L"",NotAllowed,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,The PlacementConstraints for Upgrade service 
UpgradeService,TargetReplicaSetSize,int,3,NotAllowed,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,The TargetReplicaSetSize for UpgradeService 
UpgradeService,MinReplicaSetSize,int,2,NotAllowed,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,The MinReplicaSetSize for UpgradeService 
UpgradeService,CoordinatorType,wstring,L"WUTest",NotAllowed,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,The CoordinatorType for UpgradeService 
UpgradeService,BaseUrl,wstring,L"",Static,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,BaseUrl for UpgradeService 
UpgradeService,ClusterId,wstring,L"",Static,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,ClusterId for UpgradeService 
UpgradeService,X509StoreName,wstring,L"My",Dynamic,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,X509StoreName for UpgradeService 
UpgradeService,X509StoreLocation,wstring,L"",Dynamic,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,X509StoreLocation for UpgradeService 
UpgradeService,X509FindType,wstring,L"",Dynamic,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,X509FindType for UpgradeService 
UpgradeService,X509FindValue,wstring,L"",Dynamic,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,X509FindValue for UpgradeService 
UpgradeService,X509SecondaryFindValue,wstring,L"",Dynamic,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,X509SecondaryFindValue for UpgradeService 
UpgradeService,PollIntervalInSeconds,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,Specify timespan in seconds. The interval between UpgradeService poll of SFRP 
UpgradeService,HealthReportTTLInSeconds,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,Specify timespan in seconds. The TTL of health report sent by UpgradeService. The service will be marked as Error if the health report is not periodically updates within this interval 
UpgradeService,OnlyBaseUpgrade,bool,false,Dynamic,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,OnlyBaseUpgrade for UpgradeService 
UpgradeService,TestCabFolder,wstring,L"",Static,PUBLIC,src\Management\UpgradeService\UpgradeServiceConfig.h,TestCabFolder for UpgradeService 
Security/ClientAccess,CreateName,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for Naming URI creation 
Security/ClientAccess,DeleteName,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for Naming URI deletion 
Security/ClientAccess,PropertyWriteBatch,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for Naming property write operations 
Security/ClientAccess,CreateService,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for service creation 
Security/ClientAccess,CreateServiceFromTemplate,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for service creatin from template 
Security/ClientAccess,UpdateService,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for service updates 
Security/ClientAccess,DeleteService,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for service deletion 
Security/ClientAccess,ProvisionApplicationType,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for application type provisioning 
Security/ClientAccess,CreateApplication,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for application creation 
Security/ClientAccess,DeleteApplication,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for application deletion 
Security/ClientAccess,UpgradeApplication,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for starting or interrupting application upgrades 
Security/ClientAccess,RollbackApplicationUpgrade,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for rolling back application upgrades 
Security/ClientAccess,UnprovisionApplicationType,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for application type unprovisioning 
Security/ClientAccess,MoveNextUpgradeDomain,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for resuming application upgrades with an explicit Upgrade Domain 
Security/ClientAccess,ReportUpgradeHealth,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for resuming application upgrades with the current upgrade progress 
Security/ClientAccess,ReportHealth,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for reporting health 
Security/ClientAccess,ProvisionFabric,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for MSI and/or Cluster Manifest provisioning 
Security/ClientAccess,UpgradeFabric,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for starting cluster upgrades 
Security/ClientAccess,RollbackFabricUpgrade,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for rolling back cluster upgrades 
Security/ClientAccess,UnprovisionFabric,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for MSI and/or Cluster Manifest unprovisioning 
Security/ClientAccess,MoveNextFabricUpgradeDomain,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for resuming cluster upgrades with an explicity Upgrade Domain 
Security/ClientAccess,ReportFabricUpgradeHealth,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for resuming cluster upgrades with the current upgrade progress 
Security/ClientAccess,StartInfrastructureTask,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for starting infrastructure tasks 
Security/ClientAccess,FinishInfrastructureTask,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for finishing infrastructure tasks 
Security/ClientAccess,ActivateNode,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for activation a node 
Security/ClientAccess,DeactivateNode,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for deactivating a node 
Security/ClientAccess,DeactivateNodesBatch,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for deactivating multiple nodes 
Security/ClientAccess,RemoveNodeDeactivations,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for reverting deactivation on multiple nodes 
Security/ClientAccess,GetNodeDeactivationStatus,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for checking deactivation status 
Security/ClientAccess,NodeStateRemoved,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for reporting node state removed 
Security/ClientAccess,RecoverPartition,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for recovering a partition 
Security/ClientAccess,RecoverPartitions,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for recovering partitions 
Security/ClientAccess,RecoverServicePartitions,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for recovering service partitions 
Security/ClientAccess,RecoverSystemPartitions,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for recovering system service partitions 
Security/ClientAccess,ReportFault,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for reporting fault 
Security/ClientAccess,InvokeInfrastructureCommand,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for infrastructure task management commands 
Security/ClientAccess,FileContent,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for image store client file transfer (external to cluster) 
Security/ClientAccess,FileDownload,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for image store client file download initiation (external to cluster) 
Security/ClientAccess,InternalList,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for image store client file list operation (internal) 
Security/ClientAccess,Delete,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for image store client delete operation 
Security/ClientAccess,Upload,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for image store client upload operation 
Security/ClientAccess,GetStagingLocation,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for image store client staging location retrieval 
Security/ClientAccess,GetStoreLocation,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for image store client store location retrieval 
Security/ClientAccess,NodeControl,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for starting; stopping; and restarting nodes 
Security/ClientAccess,CodePackageControl,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for restarting code packages 
Security/ClientAccess,UnreliableTransportControl,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Unreliable Transport for adding and removing behaviors 
Security/ClientAccess,MoveReplicaControl,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Move replica 
Security/ClientAccess,PredeployPackageToNode,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Predeployment api 
Security/ClientAccess,StartPartitionDataLoss,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Induces data loss on a partition 
Security/ClientAccess,StartPartitionQuorumLoss,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Induces quorum loss on a partition 
Security/ClientAccess,StartPartitionRestart,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Simultaneously restarts some or all the replicas of a partition 
Security/ClientAccess,CancelTestCommand,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Cancels a specific TestCommand - if it is in flight 
Security/ClientAccess,StartChaos,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Starts Chaos - if it is not already started 
Security/ClientAccess,StopChaos,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Stops Chaos - if it has been started 
Security/ClientAccess,StartNodeTransition,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for starting a node transition 
Security/ClientAccess,StartClusterConfigurationUpgrade,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Induces StartClusterConfigurationUpgrade on a partition 
Security/ClientAccess,GetUpgradesPendingApproval,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Induces GetUpgradesPendingApproval on a partition 
Security/ClientAccess,StartApprovedUpgrades,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Induces StartApprovedUpgrades on a partition 
Security/ClientAccess,Ping,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for client pings 
Security/ClientAccess,Query,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for queries 
Security/ClientAccess,NameExists,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for Naming URI existence checks 
Security/ClientAccess,EnumerateSubnames,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for Naming URI enumeration 
Security/ClientAccess,EnumerateProperties,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for Naming property enumeration 
Security/ClientAccess,PropertyReadBatch,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for Naming property read operations 
Security/ClientAccess,GetServiceDescription,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for long-poll service notifications and reading service descriptions 
Security/ClientAccess,ResolveService,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for complaint-based service resolution 
Security/ClientAccess,ResolveNameOwner,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for resolving Naming URI owner 
Security/ClientAccess,ResolvePartition,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for resolving system services 
Security/ClientAccess,ServiceNotifications,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for event-based service notifications 
Security/ClientAccess,PrefixResolveService,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for complaint-based service prefix resolution 
Security/ClientAccess,GetUpgradeStatus,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for polling application upgrade status 
Security/ClientAccess,GetFabricUpgradeStatus,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for polling cluster upgrade status 
Security/ClientAccess,InvokeInfrastructureQuery,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for querying infrastructure tasks 
Security/ClientAccess,List,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for image store client file list operation 
Security/ClientAccess,ResetPartitionLoad,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for reset load for a failoverUnit 
Security/ClientAccess,ToggleVerboseServicePlacementHealthReporting,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for Toggling Verbose ServicePlacement HealthReporting 
Security/ClientAccess,GetPartitionDataLossProgress,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Fetches the progress for an invoke data loss api call 
Security/ClientAccess,GetPartitionQuorumLossProgress,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Fetches the progress for an invoke quorum loss api call 
Security/ClientAccess,GetPartitionRestartProgress,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Fetches the progress for a restart partition api call 
Security/ClientAccess,GetChaosReport,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Fetches the status of Chaos within a given time range 
Security/ClientAccess,GetNodeTransitionProgress,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Security configuration for getting progress on a node transition command 
Security/ClientAccess,GetClusterConfigurationUpgradeStatus,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Induces GetClusterConfigurationUpgradeStatus on a partition 
Security/ClientAccess,GetClusterConfiguration,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\Generated.ClientAccessConfig.h,Induces GetClusterConfiguration on a partition 
NamingService,OperationRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. The interval between operation retries on retryable operations 
NamingService,MaxNotificationReplyEntryCount,int,0,Dynamic,TEST,src\Naming\NamingConfig.h,The maximum number of entries to be put into the reply. Used to test the notification paging of the updates from gateway to client. Default is 0; which shows that the feature is disabled. 
NamingService,PartitionCount,int,3,NotAllowed,PUBLIC,src\Naming\NamingConfig.h,The number of partitions of the Naming Service store to be created. Each partition owns a single partition key that corresponds to its index; so partition keys [0; PartitionCount) exist. Increasing the number of Naming Service partitions increases the scale that the Naming Service can perform at by decreasing the average amount of data held by any backing replica set; at a cost of increased utilization of resources (since PartitionCount*ReplicaSetSize service replicas must be maintained). 
NamingService,TargetReplicaSetSize,int,7,NotAllowed,PUBLIC,src\Naming\NamingConfig.h,The number of replica sets for each partition of the Naming Service store. Increasing the number of replica sets increases the level of reliability for the information in the Naming Service Store; decreasing the change that the information will be lost as a result of node failures; at a cost of increased load on Windows Fabric and the amount of time it takes to perform updates to the naming data. 
NamingService,MinReplicaSetSize,int,3,NotAllowed,PUBLIC,src\Naming\NamingConfig.h,The minimum number of Naming Service replicas required to write into to complete an update. If there are fewer replicas than this active in the system the Reliability System denies updates to the Naming Service Store until replicas are restored. This value should never be more than the TargetReplicaSetSize. 
NamingService,ReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),NotAllowed,PUBLIC,src\Naming\NamingConfig.h,Specify timespan in seconds. When a Naming Service replica goes down; this timer starts.  When it expires the FM will begin to replace the replicas which are down (it does not yet consider them lost) 
NamingService,QuorumLossWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,NotAllowed,PUBLIC,src\Naming\NamingConfig.h,Specify timespan in seconds. When a Naming Service gets into quorum loss; this timer starts.  When it expires the FM will consider the down replicas as lost; and attempt to recover quorum. Not that this may result in data loss. 
NamingService,StandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),NotAllowed,PUBLIC,src\Naming\NamingConfig.h,Specify timespan in seconds. When a Naming Service replicas come back from a down state; it may have already been replaced.  This timer determines how long the FM will keep the standby replica before discarding it. 
NamingService,PlacementConstraints,wstring,L"",NotAllowed,PUBLIC,src\Naming\NamingConfig.h,Placement constraint for the Naming Service 
NamingService,ServiceDescriptionCacheLimit,int,0,Static,PUBLIC,src\Naming\NamingConfig.h,The maximum number of entries maintained in the LRU service description cache at the Naming Store Service (set to 0 for no limit). 
NamingService,CompactionThresholdInMB,int,0,Dynamic,INTERNAL,src\Naming\NamingConfig.h,The store will be auto-compacted during open when the database file size exceeds this threshold (<=0 to disable) 
NamingService,RepairOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(90),Dynamic,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. Timeout time for each repair operation 
NamingService,ServiceFailureTimeout,TimeSpan,Common::TimeSpan::MaxValue,Dynamic,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. Timeout used for stopping retrying and failing create service request 
NamingService,RepairInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,PUBLIC,src\Naming\NamingConfig.h,Specify timespan in seconds. Interval in which the naming inconsistency repair between the authority owner and name owner will start. 
NamingService,RequestQueueThreadCount,int,20,Dynamic,INTERNAL,src\Naming\NamingConfig.h,Determines the max number of threads that the NamingStore can use to process requests. 0 defaults to the number of CPUs. 
NamingService,RequestQueueSize,int,10000,Dynamic,INTERNAL,src\Naming\NamingConfig.h,Determines the size of the NamingStore job queue. 
NamingService,MaxPendingRequestCount,int,500,Dynamic,INTERNAL,src\Naming\NamingConfig.h,Determines the number of parallel work items that Naming can perform. 
NamingService,NamingServiceHealthReportingTimerInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. The interval to check and report health for operations executed on the naming service. 
NamingService,PrimaryRecoveryStartedHealthDuration,TimeSpan,Common::TimeSpan::FromMinutes(5.0),Dynamic,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. The max allowed interval for starting recovery of any pending operations before the Naming primary is reported unhealthy. While recovery is not completely started; the Naming primary does not process any incoming requests. 
NamingService,NamingServiceProcessOperationHealthDuration,TimeSpan,Common::TimeSpan::FromMinutes(30.0),Dynamic,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. The max allowed interval for processing a naming operation before the Naming primary is reported unhealthy. 
NamingService,NamingServiceFailedOperationHealthGraceInterval,TimeSpan,Common::TimeSpan::FromMinutes(30.0),Dynamic,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. The minimum time a naming operation that completed with error is kept in health monitor to keep track of retries. 
NamingService,NamingServiceFailedOperationHealthReportTimeToLive,TimeSpan,Common::TimeSpan::FromSeconds(15.0),Dynamic,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. The minimum time a naming operation that completed with error is kept in the health monitor to keep track of retries. 
NamingService,NamingServiceSlowOperationHealthReportTimeToLive,TimeSpan,Common::TimeSpan::FromMinutes(5.0),Dynamic,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. The TTL for the health report associated with a naming operation that has been executed for longer than max allowed duration. 
NamingService,MaxNamingServiceHealthReports,int,10,Dynamic,PUBLIC,src\Naming\NamingConfig.h,The maximum number of slow operations that Naming store service reports unhealthy at one time. If 0; all slow operations are sent. 
Naming/Replication,InitialReplicationQueueSize,uint,64,Static,INTERNAL,src\Naming\NamingConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
Naming/Replication,MaxReplicationQueueSize,uint,1024,Static,INTERNAL,src\Naming\NamingConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
Naming/Replication,MaxReplicationQueueMemorySize,uint,104857600,Static,INTERNAL,src\Naming\NamingConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
Naming/Replication,InitialCopyQueueSize,uint,64,Static,INTERNAL,src\Naming\NamingConfig.h,This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2.
Naming/Replication,MaxCopyQueueSize,uint,1024,Static,INTERNAL,src\Naming\NamingConfig.h,This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
Naming/Replication,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(0),Static,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator.
Naming/Replication,MaxPendingAcknowledgements,uint,0,Dynamic,DEPRECATED,src\Naming\NamingConfig.h,Maximum number of outstanding operation acknowledgements.  Together with the BatchAckInterval controls replicator operation throttling.
Naming/Replication,EnableReplicationOperationHeaderInBody,bool,false,Dynamic,INTERNAL,src\Naming\NamingConfig.h,Bool that indicates if it is allowed to place the replication operation header in the body of the transport message instead of the header.
Naming/Replication,MaxReplicationMessageSize,uint,52428800,Static,INTERNAL,src\Naming\NamingConfig.h,Maximum message size of replication operations. Default is 50MB.
Naming/Replication,RequireServiceAck,bool,false,Static,INTERNAL,src\Naming\NamingConfig.h,Bool which controls whether the Windows Fabric Replicator will optimistically acknowledge operations on behalf of services. Setting this to false allows the replicator to optimistically acknowledge operations on behalf of the service. While true tells the replicator to require service ack via the Operation.Ack() API before the acknowledgement can be sent back to the primary service. Note that this flag is not respected for persistent services which always require services to acknowledge operations.
Naming/Replication,ReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Naming\NamingConfig.h,The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations
Naming/Replication,SecondaryClearAcknowledgedOperations,bool,false,Static,INTERNAL,src\Naming\NamingConfig.h,Bool which controls if the operations on the secondary replicator are cleared once they are ACK'd by the state provider. Setting this to true may result in additional copy operations during the build of an idle replica
Naming/Replication,UseStreamFaultsAndEndOfStreamOperationAck,bool,true,Static,INTERNAL,src\Naming\NamingConfig.h,Bool which indicates to Windows Fabric Replicator if the state provider intends to use the OperationStream2 interface. If this is enabled the state provider must report fault on the OperationStream2 interface if it cannot apply any more operations that are pumped from the stream.The Windows Fabric Replicator will also dispatch an End of Stream operation in the secondary copy and replication streams.
Naming/Replication,InitialPrimaryReplicationQueueSize,uint,64,Static,INTERNAL,src\Naming\NamingConfig.h,This value defines the initial size for the queue which maintains the replication operations on the primary. Note that it must be a power of 2.
Naming/Replication,MaxPrimaryReplicationQueueSize,uint,1024,Static,INTERNAL,src\Naming\NamingConfig.h,This is the maximum number of operations that could exist in the primary replication queue. Note that it must be a power of 2.
Naming/Replication,MaxPrimaryReplicationQueueMemorySize,uint,104857600,Static,INTERNAL,src\Naming\NamingConfig.h,This is the maximum value of the primary replication queue in bytes.
Naming/Replication,InitialSecondaryReplicationQueueSize,uint,64,Static,INTERNAL,src\Naming\NamingConfig.h,This value defines the initial size for the queue which maintains the replication operations on the secondary. Note that it must be a power of 2.
Naming/Replication,MaxSecondaryReplicationQueueSize,uint,2048,Static,INTERNAL,src\Naming\NamingConfig.h,This is the maximum number of operations that could exist in the secondary replication queue. Note that it must be a power of 2.
Naming/Replication,MaxSecondaryReplicationQueueMemorySize,uint,104857600,Static,INTERNAL,src\Naming\NamingConfig.h,This is the maximum value of the secondary replication queue in bytes.
Naming/Replication,PrimaryWaitForPendingQuorumsTimeout,TimeSpan,Common::TimeSpan::Zero,Static,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. Specify timespan in seconds. Defines how long the primary replicator waits for receiving a quorum of acknowledgements for any pending replication operations before processing a reconfiguration request, that could potentially result in ‘cancelling’ the pending replication operationsl
Naming/Replication,QueueHealthMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,DEPRECATED,src\Naming\NamingConfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor any warning/error health events in the replication operation queues. A value of '0' disables health monitoring
Naming/Replication,QueueHealthWarningAtUsagePercent,uint,80,Static,DEPRECATED,src\Naming\NamingConfig.h,This value determines the replication queue usage(in percentage) after which we report warning about high queue usage. We do so after a grace interval of QueueHealthMonitoringInterval. If the queue usage falls below this percentage in the grace interval, the warning is not reported.
Naming/Replication,SlowApiMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,DEPRECATED,src\Naming\NamingConfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor GetNextCopyState and GetNextCopyContext async api's. A value of '0' disables health monitoring. A warning health report is generated if the async api takes longer than this duration
Naming/Replication,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation.
Naming/Replication,CompleteReplicateThreadCount,uint,0,Static,DEPRECATED,src\Naming\NamingConfig.h,The maximum number of parallel threads that can be used by the Windows Fabric Replicator to quorum complete Replication operations on the primary
Naming/Replication,AllowMultipleQuorumSet,bool,true,Static,DEPRECATED,src\Naming\NamingConfig.h,Bool which controls whether the Windows Fabric Replicator considers replicas in the previous and current configuration to compute quorum during reconfigurations. Setting this to false could result in higher chances of dataloss during failures
Naming/Replication,TraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,DEPRECATED,src\Naming\NamingConfig.h,Specify timespan in seconds. Determines the tracing interval of the replicator's progress (if there was any progress from the previous trace).
Naming/Replication,QueueFullTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,DEPRECATED,src\Naming\NamingConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Naming/Replication,EnableSlowIdleRestartForVolatile,bool,false,Dynamic,DEPRECATED,src\Naming\NamingConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Naming/Replication,EnableSlowIdleRestartForPersisted,bool,true,Dynamic,DEPRECATED,src\Naming\NamingConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Naming/Replication,SlowIdleRestartAtQueueUsagePercent,uint,85,Dynamic,DEPRECATED,src\Naming\NamingConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Naming/Replication,EnableSlowActiveSecondaryRestartForVolatile,bool,false,Dynamic,DEPRECATED,src\Naming\NamingConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Naming/Replication,EnableSlowActiveSecondaryRestartForPersisted,bool,true,Dynamic,DEPRECATED,src\Naming\NamingConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Naming/Replication,SlowActiveSecondaryRestartAtQueueUsagePercent,uint,90,Dynamic,DEPRECATED,src\Naming\NamingConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Naming/Replication,ActiveSecondaryCountAdditionalToWriteQuorumNotRestaredDueToSlowness,uint,0,Dynamic,DEPRECATED,src\Naming\NamingConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Naming/Replication,SlowActiveSecondaryRestartAtAgeOfOldestPrimaryOperation,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,DEPRECATED,src\Naming\NamingConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Naming/Replication,SecondaryProgressRateDecayFactor,double,0.5,Dynamic,DEPRECATED,src\Naming\NamingConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Naming/Replication,IdleReplicaMaxLagDurationBeforePromotion,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,DEPRECATED,src\Naming\NamingConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Query,AggregatedHealthTimeoutPercentage,double,0.6,Dynamic,INTERNAL,src\query\QueryConfig.h,AggregatedHealthTimeoutPercentage indicates the amount of time from the user given timeout until which we will wait for the health manager to return the aggregated health state. It is a value between 0 and 1.0 with 1.0 indicating that the HM query should also get the entire user specified timeout. 
Query,StoppedNodeQueryTimeoutPercentage,double,0.4,Dynamic,INTERNAL,src\query\QueryConfig.h,
Failover,NodeUpRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Retry interval for node up messages 
Failover,LfumUploadRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Retry interval for LFUM upload messages 
Failover,ChangeNotificationRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Retry interval for Change Notification Messages 
Failover,MaxJitterForSendToFMRetry,double,0.3,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Maximum jitter allowed in the retry intervals defined above Must be less than 1.0 and greater than 0.0 
Failover,SendToFMTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When sending messages from nodes to the FM; if an acknowledgement is not received within this timeout; then schedule a retry. 
Failover,SendToNodeTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When sending a message from the FM to the node; if an acknowledgement is not received within this timeout; then retry sending the message 
Failover,RoutingRetryTimeout,TimeSpan,Common::TimeSpan::MaxValue,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When sending a routed message; if an ack is not received within this timeout; then retry the message 
Failover,FTDetailedTraceInterval,TimeSpan,Common::TimeSpan::FromMinutes(60),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The interval after which the Old state of an FT will be traced out 
Failover,SendToFMRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. This configuration has been deprecated. It is not being consumed by the code and present just for upgrade compatibility. It was used as the retry interval for routing layer retries for some of the Failover messages. Now; higher layers manage retries themselves and this entry is no longer needed. 
FailoverManager,ClusterStableWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When the cluster is first starting up; there will be many nodes joining.  However; even after the MinReplicaSetSize of the cluster is met; there may still be many nodes which are in the process of joining.  In order to prevent placing services when there are still nodes joining; once the FM sees a node come up it will wait for this duration before declaring the ring stable. If during this interval the FM observes another node come up; it will reset this timer. 
FailoverManager,StoreOpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When opening up the local store that the FM uses; the FM waits this long for a response 
FailoverManager,StoreRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(1.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. If opening the store fails; then the FM waits this long before retrying 
FailoverManager,PeriodicStateScanInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The PeriodicStateScanInterval determines how often the FM background thread activates to scan for changes and kick off actions 
FailoverManager,MinActionRetryIntervalPerReplica,TimeSpan,Common::TimeSpan::FromSeconds(10.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When the FM sends a particular action for a specific replica; it starts this timer.  Before it expires; the FM will not send additional actions to the replica 
FailoverManager,MaxActionRetryIntervalPerReplica,TimeSpan,Common::TimeSpan::FromSeconds(60.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When the FM sends a particular action for a specific replica; if the state has not been updated for this interval; message will be retried with this interval. 
FailoverManager,PeriodicStateCleanupScanInterval,TimeSpan,Common::TimeSpan::FromSeconds(300.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Timer which determines how often the FM scans its state to clean unnecessary information such as service tombstones (Default: 5min) 
FailoverManager,OfflineReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 30),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. This timer defines the maximum amount of time that the FM will keep track of replicas which are down 
FailoverManager,DroppedReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When a replica is removed from the system; the FM creates a tombstone record for that replica; which are kept for the DroppedReplicaKeepDuration While the replica is tombstoned the FM can distinguish between replicas which existed but have been dropped and replicas which do not exist. 
FailoverManager,DeletedReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(600.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When a replica is deleted on RA; the FM still keeps the replica for DeletedReplicaKeepDuration. 
FailoverManager,InBuildFailoverUnitKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 30),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When a failover unit is in the InBuild cache for this duration; FM will delete it. 
FailoverManager,MinRebuildRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. 
FailoverManager,MaxRebuildRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(10.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. 
FailoverManager,LockAcquireTimeout,TimeSpan,Common::TimeSpan::FromSeconds(1.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When the FM attempts to acquire a lock on a resource like the local FM store; then wait at least this much time to see if the lock can be obtained 
FailoverManager,StatelessPartitionTracingInterval,TimeSpan,Common::TimeSpan::FromMinutes(5.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Interval used to trace updated stateless replicas. All replicas last updated in this interval; down and with flags != none will be printed. 
FailoverManager,ExpectedClusterSize,int,1,Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,When the cluster is initially started up; the FM will wait for this many nodes to report themselves up before it begins placing other services; including the system services like naming.  Increasing this value increases the time it takes a cluster to start up; but prevents the early nodes from becoming overloaded and also the additional moves that will be necessary as more nodes come online.  This value should generally be set to some small fraction of the initial cluster size. 
FailoverManager,ClusterPauseThreshold,int,1,Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,If the number of nodes in system go below this value then placement; load balancing; and failover is stopped. 
FailoverManager,TargetReplicaSetSize,int,7,NotAllowed,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,This is the target number of FM replicas that Windows Fabric will maintain.  A higher number results in higher reliability of the FM data; with a small performance tradeoff 
FailoverManager,MinReplicaSetSize,int,3,NotAllowed,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,This is the minimum replica set size for the FM.  If the number of active FM replicas drops below this value; the FM will reject changes to the cluster until at least the min number of replicas is recovered 
FailoverManager,ReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),NotAllowed,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. This is the ReplicaRestartWaitDuration for the FMService 
FailoverManager,FullRebuildWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,NotAllowed,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When the FM enters quorum loss; it first waits this amount of time before starting a full rebuild.  The purpose of waiting for this period of time is to give other nodes and FM replicas time to come up.  Increasing this time will help prevent the chances of accidental dataloss during FM rebuild; at the cost of some additional startup/recovery time 
FailoverManager,StandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),NotAllowed,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. This is the StandByReplicaKeepDuration for the FMService 
FailoverManager,PlacementConstraints,wstring,L"",NotAllowed,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Any placement constraints for the failover manager replicas 
FailoverManager,IsFabricUpgradeGatekeepingEnabled,bool,true,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,If set to true; FM ensures that any new node is at the correct version before it is admitted to the system. If the node is not a the correct version; it is upgraded to the right version. 
FailoverManager,ExpectedNodeFabricUpgradeDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. This is the expected duration for a node to be upgraded during Windows Fabric upgrade. 
FailoverManager,ExpectedReplicaUpgradeDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. This is the expected duration for all the replicas to be upgraded on a node during application upgrade. 
FailoverManager,ExpectedNodeDeactivationDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. This is the expected duration for a node to complete deactivation in. 
FailoverManager,IsSingletonReplicaMoveAllowedDuringUpgrade,bool,false,Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,If set to true; replicas with a target replica set size of 1 will be permitted to move during upgrpade. 
FailoverManager,RestoreReplicaLocationAfterUpgrade,bool,true,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,If set to true; move/swap replica to original location after upgrade 
FailoverManager,SwapPrimaryRequestTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 10),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Specifies the duration for which FM waits for PLB to trigger a swap-primary when deactivating a node intent Restart. This so that all the all the primary replicas are swapped out of the node before closing the replicas. If PLB is unable to start the swap and this much time has elapsed; FM proceeds with node deactivation. 
FailoverManager,IsStrongSafetyCheckEnabled,bool,false,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specified if FM should perform a stronger safety check for upgrades and node deactivations. 
FailoverManager,SeedNodeWaitSafetyFactor,int,3,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,A seed node can only function as arbitrator after LeaseDuration+ArbitrationTimeout. During upgrade or node deactivation; FM should only consider a seed node that is up after the above duration to be effective.  To accont for clock skew and configuration update; the duration is multiplied by this factor as the interval for which FM will wait. 
FailoverManager,EnableConstraintCheckDuringFabricUpgrade,bool,false,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The EnableConstraintCheckDuringFabricUpgrade determines should PLB try to fix constraint check violations during Fabric upgrade. 
FailoverManager,BackgroundThreadCount,int,0,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Determines the number of threads that the FM background task should use. The default value of 0 indicates that the FM should use a number of threads equal to the number of cores on the machine 
FailoverManager,ProcessingQueueThreadCount,int,0,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of threads that the FM should use for FailoverUnit specific message processing and PLB action consumption The default value of 0 indicates that the FM should use a number of threads equal to the number of cores on the machine 
FailoverManager,ProcessingQueueSize,int,1000,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The size of FailoverUnit job queue 
FailoverManager,CommitQueueThreadCount,int,0,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of threads that the FM should use for completing the post-commit jobs. The default value of 0 indicates that the FM should use a number of threads equal to the number of cores on the machine 
FailoverManager,CommonQueueThreadCount,int,50,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of threads that the FM should use for non-FailoverUnit specific messages 
FailoverManager,CommonQueueSize,int,500,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The size of the common job queue 
FailoverManager,QueryQueueThreadCount,int,0,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of threads that the FM should use for query messages 
FailoverManager,QueryQueueSize,int,500,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The size of the query job queue 
FailoverManager,MaxActionsPerIteration,int,10000,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,When the FM runs; it generates a series of actions which need to be taken for the cluster.  This setting defines the maximum number of actions which the FM will issue in a single iteration of the FM state machine.  Increasing this number will allow the FM to reconfigure the system faster when necessary (no actions will be held back); at the cost of additional resource consumption in terms of messages that are sent from the FM to the replicas and also the concurrent handling of those actions by all of the affected replicas). 
FailoverManager,ServiceLookupTableBroadcastAttemptCount,int,2,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,When the FM broadcasts service locations these broadcasts can fail 
FailoverManager,ServiceLocationBroadcastInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Periodically the FM broadcasts changes to the locations of services. This broadcasts are picked up by naming and cached as an optimization. 
FailoverManager,ServiceLookupTableEmptyBroadcastInterval,TimeSpan,Common::TimeSpan::FromSeconds(15.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Interval between empty service table update broadcast messages 
FailoverManager,MessageContentBufferRatio,double,0.75,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The fraction of MaxMessageSize to use as the available buffer limit when calculating how much data to put in a single message (should be in the range [0.0; 1.0]) 
FailoverManager,MaxParallelLoadUpdates,int,3,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The FM persistent store is used to store load reports which arrive from replicas and nodes.  Since the load balancing data is best effort; for performance reasons this information can be lazily committed.  The MaxParallelLoadUpdates setting defines the maximum number of load updates that will be applied in parallel. 
FailoverManager,MaxLoadUpdateBatchSize,int,50,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,When the FM is writing load reports into its persistent store; it should batch together no more than this many load reports 
FailoverManager,PeriodicLoadPersistInterval,TimeSpan,Common::TimeSpan::FromSeconds(10.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Timer which determines how often the FM check if there are new load reports and persist them into store 
FailoverManager,AdminStateTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(3600),Static,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The interval for tracing system services to the admin channel on FM/FMM. 
FailoverManager,DcaTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The interval for tracing to the DCA channel on FM/FMM. 
FailoverManager,PeriodicServiceTraceCount,int,15,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of services to trace per AdminStateTraceInterval 
FailoverManager,StoreConnectionString,wstring,L"",Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,
FailoverManager,FMStoreDirectory,wstring,L".\\",Static,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,The directory where the FM will store its local data 
FailoverManager,FMStoreFilename,wstring,L"FM.edb",Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The filename that the FM should use when creating it's local store 
FailoverManager,ReconfigurationTimeLimit,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The time limit for reconfiguration; after which a warning health report will be initiated 
FailoverManager,BuildReplicaTimeLimit,TimeSpan,Common::TimeSpan::FromSeconds(3600),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The time limit for building a stateful replica; after which a warning health report will be initiated 
FailoverManager,CreateInstanceTimeLimit,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The time limit for creating a stateless instance; after which a warning health report will be initiated 
FailoverManager,PlacementTimeLimit,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The time limit for reaching target replica count; after which a warning health report will be initiated 
FailoverManager,RebuildPartitionTimeLimit,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The time limit for rebuilding the partition state; after which a warning health report is initiated 
FailoverManager,MaxReplicasInHealthReportDescription,int,10,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The maximum number of replicas to include in the detailed health report description. 
FailoverManager,MessageProcessTimeLimit,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. If a message processing takes more than this time; a warning is traced 
FailoverManager,PlbUpdateTimeLimit,TimeSpan,Common::TimeSpan::FromSeconds(1.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. If the PLB update takes more than this time; a warning is traced 
FailoverManager,UnknownNodeKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration for which FM keeps track of an unknown node 
FailoverManager,RemovedNodeKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 30),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration for which FM keeps track of a node that has had its state removed 
FailoverManager,MinSecondsBetweenQueueFullRejectMessages,TimeSpan,Common::TimeSpan::FromSeconds(10.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. This configuration is the minimum number of seconds FM queues will wait before sending a reject message back to the caller when Enqueue fails because the Queue was full. 
FailoverManager,PerformSafetyChecksForNodeDeactivationIntentPause,bool,true,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,This configuration defines if the safety checks should be performed or not for Node Deactivation. 
FailoverManager,SortUpgradeDomainNamesAsNumbers,bool,false,Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,If set to true; upgrade domain names are sorted as numbers; e.g.; "2" comes before "10" 
FailoverManager,PlbSafetyCheckTimeLimit,TimeSpan,Common::TimeSpan::FromSeconds(60*60),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Time that FM will wait for PLB to finish its safety check; if we go beyond this time FM will continue with the upgrade regardless of PLB safety check status 
FailoverManager,ReplicaTombstoneDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 10),Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. This configuration has been deprecated. It is not being consumed by the code and present just for upgrade compatibility. Please use DeletedReplicaKeepDuration instead. 
ReconfigurationAgent,ReplicaUpMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. This configuration is from v1 where the FM used it to schedule an internal retry for replica up messages Since v1 has shipped keeping this around for the FM use case and defining a new entry for RA use case 
FailoverManager,RebuildRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Static,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. This configuration has been deprecated. It is not being consumed by the code and present just for upgrade compatibility. Please use MinRebuildRetryInterval and MaxRebuildRetryInterval instead. 
FailoverManager,ServiceLookupTableMessageMaxEntries,int,300,Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Max entries a service lookup table update message can contain 
FailoverManager,StoreRetryAttempt,int,3,Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,When the FM attempts to access the store and fails; the FM should retry accessing the store 
FailoverManager,DummyPLBEnabled,bool,false,Static,TEST,src\Reliability\Failover\common\FailoverConfig.h,
FailoverManager,DummyPLBRandomPlacementEnabled,bool,false,Static,TEST,src\Reliability\Failover\common\FailoverConfig.h,
FailoverManager,IsTestMode,bool,false,Static,TEST,src\Reliability\Failover\common\FailoverConfig.h,
FailoverManager,DropAllPLBMovements,bool,false,Dynamic,TEST,src\Reliability\Failover\common\FailoverConfig.h,
FailoverManager/Store,CommitBatchingPeriod,int,50,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,FMStore will batch simple transactions that are created within this period.  0 means no batching. 
FailoverManager/Store,CommitBatchingSizeLimitInKB,int,256,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,When batched replications size reach this limit; FMStore will start a new group for new simple transaction. 
FailoverManager/Store,TransactionLowWatermark,int,100,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,When the number of FMStore pending completion transaction <= this; new simple transactions will not be batched.  -1 to disable. 
FailoverManager/Store,TransactionHighWatermark,int,-1,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,When the number of FMStore pending completion transaction >= this; batching period will be extended every time the period elapses.  -1 to disable. 
FailoverManager/Store,CommitBatchingPeriodExtension,int,0,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,When batching period needs to be extended; it will be extended this much every time.  0 means extending CommitBatchingPeriod. 
FailoverManager/Store,ThrottleOperationCount,int64,0,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The store will throttle operations once the number of operations in the replication queue reaches this value 
FailoverManager/Store,ThrottleQueueSizeBytes,int64,0,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The store will throttle operations once the memory utilization (bytes) of the replication queue reaches this value 
FailoverManager/Store,CompactionThresholdInMB,int,1024,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The store will be auto-compacted during open when the database file size exceeds this threshold (<=0 to disable) 
FailoverManager/Store,TransactionThrottle,int,4096,Static,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,This config is no longer consumed in the code and is present only for upgrade compatibility 
ReconfigurationAgent,EnableReplicaDownOnReadWriteStatusRevoke,bool,true,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Defines whether failover can mark the replica as down on revoking read write status 
ReconfigurationAgent,IsPreWriteStatusRevokeCatchupEnabled,bool,true,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Returns whether catchup prior to revoking write status during demote is enabled NOTE: This configuration cannot be made dynamic without code change as the code that runs when catchup op is scheduled may read it as false and the code that runs when catchup op completes may read it as true The same race exists when scheduling UC - it may skip the UC action for providing catchup config and then the config becomes true causing the catchup to happen with UC skipped 
ReconfigurationAgent,EnablePhase3Phase4InParallel,bool,true,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Determines whether to enable the optimization to perform phase3 and phase4 in parallel 
ReconfigurationAgent,MessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Message retry interval for ServiceTypeDisabled/Enabled 
ReconfigurationAgent,ReconfigurationMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(10.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Message retry interval for messages related to reconfiguration 
ReconfigurationAgent,MinimumIntervalBetweenReconfigurationMessageRetry,TimeSpan,Common::TimeSpan::FromSeconds(1.5),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Minimum interval between retry of reconfiguration messages 
ReconfigurationAgent,PerNodeMinimumIntervalBetweenMessageToFM,TimeSpan,Common::TimeSpan::FromSeconds(0.5),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The minimum interval between two messages to FM (ReplicaUp/ReplicaDown/ReplicaDropped) Two replica up messages will not be sent by RA to FM in less than this interval 
ReconfigurationAgent,PerReplicaMinimumIntervalBetweenMessageToFM,TimeSpan,Common::TimeSpan::FromSeconds(15),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The minimum interval between two messages for the same replica sent by RA to FM (Currently only ReplicaUp) Successive messages for the same replica will not be sent in less than this interval 
ReconfigurationAgent,MaxNumberOfReplicasInMessageToFM,int,256,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The maximum number of replicas in a replica message Currently applies only to ReplicaUp 
ReconfigurationAgent,FMMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(2),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The retry interval for message to FM (ReplicaUp/ReplicaDown) This is set to a low value because the configuration above should allow new messages to be generated 
ReconfigurationAgent,MaxNumberOfServiceTypeInMessageToFM,int,100,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The maximum number of service type to send in one message to fm 
ReconfigurationAgent,PerServiceTypeMinimumIntervalBetweenMessageToFM,TimeSpan,Common::TimeSpan::FromSeconds(45),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The minimum interval between two messages for the same service type sent by RA to FM 
ReconfigurationAgent,PerNodeMinimumIntervalBetweenServiceTypeMessageToFM,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The minimum interval between two ServiceType messages to the FM 
ReconfigurationAgent,ServiceTypeMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The retry interval between two service type messages to FM 
ReconfigurationAgent,ServiceTypeUpdateStalenessCleanupInterval,TimeSpan,Common::TimeSpan::FromMinutes(60),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The retry interval between cleanups on the service type update staleness map 
ReconfigurationAgent,ServiceTypeUpdateStalenessEntryKeepDuration,TimeSpan,Common::TimeSpan::FromMinutes(10),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration for which entries should be kept in the service type update staleness map 
ReconfigurationAgent,ReplicaDroppedMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The retry interval for ReplicaDropped message to FM This is separate as it is a message targeted for a single FT and needs a higher retry interval than ReplicaUp/Down 
ReconfigurationAgent,RAPMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The retry interval for message to RAP for single FT messages related to FT Lifecycle 
ReconfigurationAgent,MinimumIntervalBetweenRAPMessageRetry,TimeSpan,Common::TimeSpan::FromSeconds(1.5),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The minimum interval between message retries to RAP 
ReconfigurationAgent,RAStoreOpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120.0),Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When opening up the local store that the RA uses; the RA waits this long for a response 
ReconfigurationAgent,RAStoreOpenRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When opening up the RA local store fails; the RA waits this long before trying again 
ReconfigurationAgent,RAUpgradeProgressCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(10.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When a service is upgraded; the RA will periodically check to see if it is back up again 
ReconfigurationAgent,ApplicationUpgradeMaxReplicaCloseDuration,TimeSpan,Common::TimeSpan::FromSeconds(900),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration for which the system will wait before terminating service hosts that have replicas that are stuck in close 
ReconfigurationAgent,SendLoadReportInterval,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. SendLoadReportInterval defines the interval to send ReportLoad messages from RAP to RA 
ReconfigurationAgent,FailoverUnitProxyCleanupInterval,TimeSpan,Common::TimeSpan::FromSeconds(1800),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. FailoverUnitProxyCleanupInterval defines the interval to cleanup the failover unit proxy objects that were kept around for stateleness check 
ReconfigurationAgent,MaxNumberOfLoadReportsPerMessage,int, 500,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,MaxNumberOfLoadReportsPerMessage defines the batch size for ReportLoad messages from RAP to RA 
ReconfigurationAgent,ProxyOutgoingMessageRetryTimerInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. ProxyOutgoingMessageRetryTimerInterval defines the timer interval for outgoing messages; like ReportFault; in RAP 
ReconfigurationAgent,LocalMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. LocalMessageRetryInterval defines the local retry interval for failed messages in RAP 
ReconfigurationAgent,IsHealthReportingEnabled,bool,true,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,IsHealthReportingEnabled determines whether health reporting in RA is enabled or not 
ReconfigurationAgent,ServiceApiHealthDuration,TimeSpan,Common::TimeSpan::FromMinutes(30.0),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. ServiceApiHealthDuration defines how long do we wait for a service API to run before we report it unhealthy. 
ReconfigurationAgent,ServiceReconfigurationApiHealthDuration,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. ServiceReconfigurationApiHealthDuration defines how long the before a service in reconfiguration is reported as unhealthy 
ReconfigurationAgent,PeriodicApiSlowTraceInterval,TimeSpan,Common::TimeSpan::FromMinutes(5),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. PeriodicApiSlowTraceInterval defines the interval over which slow API calls will be retraced by the API monitor. 
ReconfigurationAgent,MaxWaitBeforePublishEndpointDuration,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration RA will wait after a reconfig has started before which it publishes the endpoint (if it has it) of the primary 
ReconfigurationAgent,LocalHealthReportingTimerInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. LocalHealthReportingTimerInterval defines the interval to check and report health in RAP 
ReconfigurationAgent,FailoverUnitProcessingQueueThreadCount,int,0,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The maximum number of threads that can be used for processing per failoverunit work 
ReconfigurationAgent,RAPMessageProcessingQueueThreadCount,int,0,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The maximum number of threads that can be used for processing messages received by the RAP. 0 = #cores 
ReconfigurationAgent,MessageProcessingQueueThreadCount,int,0,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The maximum number of threads that can be used for processing per messages 
ReconfigurationAgent/Store,MaxEseCommitWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The maximum time to wait for async ESE transactions to commit 
ReconfigurationAgent,NodeDeactivationMaxReplicaCloseDuration,TimeSpan,Common::TimeSpan::FromSeconds(900),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The maximum time to wait before terminating a service host that is blocking node deactivation 
ReconfigurationAgent,NodeDeactivationReplicaCloseCompletionCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration at which RA polls to check for the node deactivation to complete 
ReconfigurationAgent,GracefulReplicaShutdownMaxDuration,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The max duration for which the system will wait for replicas to close This can be overriden by specific settings for different scenarios such as node deactivation; app/fabric upgrade etc 
ReconfigurationAgent,GracefulReplicaCloseCompletionCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration at which RA polls to check for replica close during graceful node close to complete 
ReconfigurationAgent,ReopenSuccessWaitInterval,TimeSpan,Common::TimeSpan::FromMinutes(5),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The amount of time the RA will wait for a persisted replica to be reopened before telling the FM about it 
ReconfigurationAgent,DroppedFailoverUnitTombstoneDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration after which dropped FTs can be removed 
ReconfigurationAgent,DeletedFailoverUnitTombstoneDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 12),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration after which deleted FTs can be removed 
ReconfigurationAgent,PeriodicStateCleanupInterval,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 3),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The time to take to scan cleaned up failover units 
ReconfigurationAgent,MinimumIntervalBetweenPeriodicStateCleanup,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The minimum interval between which fts are scanned for cleanup 
ReconfigurationAgent,FabricUpgradeReplicaCloseCompleteCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration for which to wait before checking if all replicas are closed during a fabric upgrade 
ReconfigurationAgent,FabricUpgradeMaxReplicaCloseDuration,TimeSpan,Common::TimeSpan::FromSeconds(900),Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The maximum duration RA will wait before terminating service host of replica that is not closing 
ReconfigurationAgent,FabricUpgradeDownloadRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration after which a failed download is retried 
ReconfigurationAgent,FabricUpgradeUpgradeRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(90),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration after which a failed upgrade is retried 
ReconfigurationAgent,FabricUpgradeValidateRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration after which the validate call to Hosting is retried 
ReconfigurationAgent,ServiceTypeRegistrationMaxRetryThreshold,int,2147483647,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts at finding service type registration before replica is dropped This is defined based on a count which is retried depending on the Reopen/Open retry interval and timeout By default it is set to INT_MAX i.e. Infinite 
ReconfigurationAgent,ServiceTypeRegistrationRestartThreshold,int,2147483647,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts at finding a service type registration before replica is restarted Defaults to INT_MAX 
ReconfigurationAgent,ServiceTypeRegistrationWarningReportThreshold,int,2147483647,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts at finding a service type registration after which a warning will be reported Defaults to INT_MAX 
ReconfigurationAgent,ServiceTypeRegistrationErrorReportThreshold,int,2147483647,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts at finding a service type registration after which an error will be reported Defaults to INT_MAX 
ReconfigurationAgent,ServiceTypeRegistrationMaxRetryThresholdAtDrop,int,1920,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts at finding service type registration before replica is dropped on the RA This value applies when the RA is reopening a replica for which the FM had requested a drop earlier The RA will give up after 8 hours 
ReconfigurationAgent,ServiceTypeRegistrationWarningReportThresholdAtDrop,int,240,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts at finding a service type registration after which a warning will be reported This value applies when the RA is reopening a replica for which the FM had requested a drop earlier The RA will report warning after 1 hour 
ReconfigurationAgent,ReplicaOpenFailureMaxRetryThreshold,int,40,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts at opening a new replica on a node after which RA will give up This is based on a count which is retried every ReplicaOpenMessageRetryInterval seconds With defaults; a total of 10 minutes will be spent (40 times; 15 seconds each) 
ReconfigurationAgent,ReplicaOpenFailureWarningReportThreshold,int,10,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts after which a warning will be reported to HM 
ReconfigurationAgent,ReplicaOpenFailureErrorReportThreshold,int,2147483647,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts after which an error will be reported to HM Defaults to INT_MAX 
ReconfigurationAgent,ReplicaReopenFailureMaxRetryThreshold,int,40320,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts at reopening an existing replica on a node after which RA will give up This is based on a count which is retried every ReplicaReopenMessageRetryInterval seconds With defaults; a total of 40320 attempts will be made which is approximately 7 days 
ReconfigurationAgent,ReplicaReopenFailureWarningReportThreshold,int,10,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts after which a warning will be reported to HM 
ReconfigurationAgent,ReplicaOpenFailureRestartThreshold,int,2147483647,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts at open / reopening an existing replica on a node after which RA will restart the replica Defaults to INT_MAX 
ReconfigurationAgent,ReplicaChangeRoleFailureRestartThreshold,int,10,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts for continuous API failures during replica change role after which RA will restart the replica 
ReconfigurationAgent,ReplicaChangeRoleFailureWarningReportThreshold,int,2147483647,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts after which a warning will be reported to HM Defaults to INT_MAX 
ReconfigurationAgent,ReplicaChangeRoleFailureErrorReportThreshold,int,2,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts after which an error will be reported to HM 
ReconfigurationAgent,ReplicaChangeRoleFailureMaxRetryThreshold,int,2147483647,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of attempts for continuous API failures during replica change role after which RA will drop the replica Defaults to INT_MAX 
ReconfigurationAgent,SchedulerWarningTraceThreshold,int,100,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The number of job items per ft after which the scheduler will trace a warning on each new job item that is added 
ReconfigurationAgent,PeriodicQueryCleanupInterval,TimeSpan,Common::TimeSpan::FromMinutes(30),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration after which pending Queries on the RA are completed with Timeout error 
ReconfigurationAgent,RemoteReplicaProgressQueryWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The duration for which reconfiguration will wait to query replicas for their progress 
ReconfigurationAgent,AssertOnStoreFatalError,bool,true,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,When set to true; the local store will assert on fatal errors (such as log write failures). 
ReconfigurationAgent,IsDeactivationInfoEnabled,bool,true,Dynamic,PUBLIC,src\Reliability\Failover\common\FailoverConfig.h,Determines whether RA will use deactivation info for performing primary re-election For new clusters this configuration should be set to true For existing clusters that are being upgraded please see the release notes on how to enable this 
ReconfigurationAgent,ReopenReplicaMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Deprecated. Please use RAPMessageRetryInterval instead. 
ReconfigurationAgent,PerReplicaMinimumIntervalBetweenReplicaUpMessages,TimeSpan,Common::TimeSpan::FromSeconds(45),Static,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The minimum interval between two Replica Up messages for the same replica sent by RA to FM Successive Replica Up messages for the same replica will not be sent in less than this interval 
ReconfigurationAgent,PerNodeMinimumIntervalBetweenReplicaUpMessages,TimeSpan,Common::TimeSpan::FromSeconds(0.5),Static,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. The minimum interval between two Replica Up messages sent by RA to FM Two replica up messages will not be sent by RA to FM in less than this interval 
ReconfigurationAgent,LocalMessageRetryTimerInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. LocalMessageRetryTimerInterval defines the timer interval to retry pending messages in RAP 
ReconfigurationAgent,MaxLocalMessageRetryCount,int,0,Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,MaxLocalMessageRetryCount defines the max number of local retries for a failed message in RAP 
ReconfigurationAgent,IsLocalHealthReportingEnabled,bool,true,Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,IsLocalHealthReportingEnabled determines whether health reporting in RAP is enabled or not 
Failover/Replication,InitialReplicationQueueSize,uint,64,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
Failover/Replication,MaxReplicationQueueSize,uint,1024,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
Failover/Replication,MaxReplicationQueueMemorySize,uint,524288000,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
Failover/Replication,InitialCopyQueueSize,uint,64,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2.
Failover/Replication,MaxCopyQueueSize,uint,1024,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
Failover/Replication,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(50),Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator.
Failover/Replication,MaxPendingAcknowledgements,uint,0,Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Maximum number of outstanding operation acknowledgements.  Together with the BatchAckInterval controls replicator operation throttling.
Failover/Replication,EnableReplicationOperationHeaderInBody,bool,false,Dynamic,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Bool that indicates if it is allowed to place the replication operation header in the body of the transport message instead of the header.
Failover/Replication,MaxReplicationMessageSize,uint,52428800,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Maximum message size of replication operations. Default is 50MB.
Failover/Replication,RequireServiceAck,bool,false,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Bool which controls whether the Windows Fabric Replicator will optimistically acknowledge operations on behalf of services. Setting this to false allows the replicator to optimistically acknowledge operations on behalf of the service. While true tells the replicator to require service ack via the Operation.Ack() API before the acknowledgement can be sent back to the primary service. Note that this flag is not respected for persistent services which always require services to acknowledge operations.
Failover/Replication,ReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations
Failover/Replication,SecondaryClearAcknowledgedOperations,bool,false,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Bool which controls if the operations on the secondary replicator are cleared once they are ACK'd by the state provider. Setting this to true may result in additional copy operations during the build of an idle replica
Failover/Replication,UseStreamFaultsAndEndOfStreamOperationAck,bool,true,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Bool which indicates to Windows Fabric Replicator if the state provider intends to use the OperationStream2 interface. If this is enabled the state provider must report fault on the OperationStream2 interface if it cannot apply any more operations that are pumped from the stream.The Windows Fabric Replicator will also dispatch an End of Stream operation in the secondary copy and replication streams.
Failover/Replication,InitialPrimaryReplicationQueueSize,uint,64,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,This value defines the initial size for the queue which maintains the replication operations on the primary. Note that it must be a power of 2.
Failover/Replication,MaxPrimaryReplicationQueueSize,uint,0,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,This is the maximum number of operations that could exist in the primary replication queue. Note that it must be a power of 2.
Failover/Replication,MaxPrimaryReplicationQueueMemorySize,uint,524288000,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,This is the maximum value of the primary replication queue in bytes.
Failover/Replication,InitialSecondaryReplicationQueueSize,uint,64,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,This value defines the initial size for the queue which maintains the replication operations on the secondary. Note that it must be a power of 2.
Failover/Replication,MaxSecondaryReplicationQueueSize,uint,0,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,This is the maximum number of operations that could exist in the secondary replication queue. Note that it must be a power of 2.
Failover/Replication,MaxSecondaryReplicationQueueMemorySize,uint,524288000,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,This is the maximum value of the secondary replication queue in bytes.
Failover/Replication,PrimaryWaitForPendingQuorumsTimeout,TimeSpan,Common::TimeSpan::Zero,Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Specify timespan in seconds. Defines how long the primary replicator waits for receiving a quorum of acknowledgements for any pending replication operations before processing a reconfiguration request, that could potentially result in ‘cancelling’ the pending replication operationsl
Failover/Replication,QueueHealthMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor any warning/error health events in the replication operation queues. A value of '0' disables health monitoring
Failover/Replication,QueueHealthWarningAtUsagePercent,uint,80,Static,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,This value determines the replication queue usage(in percentage) after which we report warning about high queue usage. We do so after a grace interval of QueueHealthMonitoringInterval. If the queue usage falls below this percentage in the grace interval, the warning is not reported.
Failover/Replication,SlowApiMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor GetNextCopyState and GetNextCopyContext async api's. A value of '0' disables health monitoring. A warning health report is generated if the async api takes longer than this duration
Failover/Replication,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation.
Failover/Replication,CompleteReplicateThreadCount,uint,0,Static,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,The maximum number of parallel threads that can be used by the Windows Fabric Replicator to quorum complete Replication operations on the primary
Failover/Replication,AllowMultipleQuorumSet,bool,true,Static,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Bool which controls whether the Windows Fabric Replicator considers replicas in the previous and current configuration to compute quorum during reconfigurations. Setting this to false could result in higher chances of dataloss during failures
Failover/Replication,TraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. Determines the tracing interval of the replicator's progress (if there was any progress from the previous trace).
Failover/Replication,QueueFullTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Failover/Replication,EnableSlowIdleRestartForVolatile,bool,false,Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Failover/Replication,EnableSlowIdleRestartForPersisted,bool,true,Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Failover/Replication,SlowIdleRestartAtQueueUsagePercent,uint,85,Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Failover/Replication,EnableSlowActiveSecondaryRestartForVolatile,bool,false,Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Failover/Replication,EnableSlowActiveSecondaryRestartForPersisted,bool,true,Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Failover/Replication,SlowActiveSecondaryRestartAtQueueUsagePercent,uint,90,Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Failover/Replication,ActiveSecondaryCountAdditionalToWriteQuorumNotRestaredDueToSlowness,uint,0,Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Failover/Replication,SlowActiveSecondaryRestartAtAgeOfOldestPrimaryOperation,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Failover/Replication,SecondaryProgressRateDecayFactor,double,0.5,Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Failover/Replication,IdleReplicaMaxLagDurationBeforePromotion,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,DEPRECATED,src\Reliability\Failover\common\FailoverConfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
PlacementAndLoadBalancing,DummyPLBEnabled,bool,false,Dynamic,TEST,src\Reliability\LoadBalancing\PLBConfig.h,TODO: add validation for all configurations 
PlacementAndLoadBalancing,TraceCRMReasons,bool,true,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specifies whether to trace reasons for CRM issued movements to the operational events channel 
PlacementAndLoadBalancing,ValidatePlacementConstraint,bool,true,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specifies whether or not the PlacementConstraint expression for a service is validated when a service's ServiceDescription is updated 
PlacementAndLoadBalancing,PlacementConstraintValidationCacheSize,int,10000,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Limits the size of the table used for quick validation and caching of Placement Constraint Expressions 
PlacementAndLoadBalancing,ConstraintViolationReportingPolicy,int,0,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Defines whether health warnings are reported for Constraint Violations. 0: Report for All Constraint Violations; 1: Report only for Hard Constraint Violations; 2: Ignore Soft Domain Violations 3: Smart Reporting; negative: Ignore All 
PlacementAndLoadBalancing,VerboseHealthReportLimit,int,20,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Defines the number of times a replica has to go unplaced before a health warning is reported for it (if verbose health reporting is enabled) 
PlacementAndLoadBalancing,ConstraintViolationHealthReportLimit,int,50,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Defines the number of times constraint violating replica has to be persistently unfixed before diagnostics are conducted and health reports are emitted 
PlacementAndLoadBalancing,DetailedConstraintViolationHealthReportLimit,int,200,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Defines the number of times constraint violating replica has to be persistently unfixed before diagnostics are conducted and detailed health reports are emitted 
PlacementAndLoadBalancing,DetailedVerboseHealthReportLimit,int,200,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Defines the number of times an unplaced replica has to be persistently unpalced before detailed health reports are emitted 
PlacementAndLoadBalancing,ConsecutiveDroppedMovementsHealthReportLimit,int,20,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Defines the number of consecutive times that ResourceBalancer-issued Movements are dropped before diagnostics are conducted and health warnings are emitted. Negative: No Warnings Emitted under this condition 
PlacementAndLoadBalancing,DetailedNodeListLimit,int,15,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Defines the number of nodes per constraint to include before truncation in the Unplaced Replica reports 
PlacementAndLoadBalancing,DetailedPartitionListLimit,int,15,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Defines the number of partitions per diganostic entry for a constraint to include before truncation in  Diagnostics 
PlacementAndLoadBalancing,DetailedDiagnosticsInfoListLimit,int,15,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Defines the number of diagnostic entries (with detailed information) per constraint to include before truncation in  Diagnostics 
PlacementAndLoadBalancing,DetailedMetricListLimit,int,15,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Defines the number of metrics to include before truncation in the Unsuccessful Balancing reports 
PlacementAndLoadBalancing,PLBHealthEventTTL,TimeSpan,Common::TimeSpan::FromSeconds(65.0),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Defines how long PLB Health Events survive before they expire 
PlacementAndLoadBalancing,PLBRefreshInterval,TimeSpan,Common::TimeSpan::FromSeconds(1.0),Dynamic,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Deprecated; please use PLBRefreshGap instead Defines how frequently the PLB background thread scans its state to determine if any actions need to be taken 
PlacementAndLoadBalancing,PLBRefreshGap,TimeSpan,Common::TimeSpan::FromSeconds(1.0),Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Defines the minimum amount of time that must pass before PLB refreshes state again 
PlacementAndLoadBalancing,MinPlacementInterval,TimeSpan,Common::TimeSpan::FromSeconds(1.0),Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Defines the minimum amount of time that must pass before two consecutive placement rounds 
PlacementAndLoadBalancing,MinConstraintCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(1.0),Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Defines the minimum amount of time that must pass before two consecutive constraint check rounds 
PlacementAndLoadBalancing,MinLoadBalancingInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Defines the minimum amount of time that must pass before two consecutive balancing rounds 
PlacementAndLoadBalancing,BalancingDelayAfterNodeDown,TimeSpan,Common::TimeSpan::FromSeconds(120.0),Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Do not start balancing activities within this period after a node down event 
PlacementAndLoadBalancing,BalancingDelayAfterNewNode,TimeSpan,Common::TimeSpan::FromSeconds(120.0),Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Do not start balancing activities within this period after adding a new node 
PlacementAndLoadBalancing,ConstraintFixPartialDelayAfterNodeDown,TimeSpan,Common::TimeSpan::FromSeconds(120.0),Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Do not Fix FaultDomain and UpgradeDomain constraint violations within this period after a node down event 
PlacementAndLoadBalancing,ConstraintFixPartialDelayAfterNewNode,TimeSpan,Common::TimeSpan::FromSeconds(120.0),Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. DDo not Fix FaultDomain and UpgradeDomain constraint violations within this period after adding a new node 
PlacementAndLoadBalancing,PLBRewindInterval,TimeSpan,Common::TimeSpan::FromSeconds(300.0),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Rewind the state machine and retry placement or constraintcheck or balancing again when we are at NoActionNeeded for a while 
PlacementAndLoadBalancing,PLBActionRetryTimes,int,3,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The times of retry for each PLB action 
PlacementAndLoadBalancing,MaxMovementHoldingTime,TimeSpan,Common::TimeSpan::FromSeconds(3600.0),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Defines the maximum amount of time PLB background thread can wait if actions from the last scan is not submitted yet 
PlacementAndLoadBalancing,MaxMovementExecutionTime,TimeSpan,Common::TimeSpan::FromSeconds(10.0),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Defines the maximum amount of time PLB background thread can wait if actions from the last scan is submitted but not executed by FM yet 
PlacementAndLoadBalancing,AvgStdDevDeltaThrottleThreshold,double,-1,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Balancing activities will be reduced if (current AvgStdDev) <= (AvgStdDev after last balancing) * (1 + AvgStdDevDeltaThrottleThreshold) This type of throttling can be disabled by providing a negative value for this parameter. 
PlacementAndLoadBalancing,GlobalMovementThrottleThreshold,uint,1000,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Maximum number of movements allowed in the Balancing Phase in the past interval indicated by GlobalMovementThrottleCountingInterval 
PlacementAndLoadBalancing,GlobalMovementThrottleThresholdForPlacement,uint,0,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Maximum number of movements allowed in Placement Phase in the past interval indicated by GlobalMovementThrottleCountingInterval.0 indicates no limit. 
PlacementAndLoadBalancing,GlobalMovementThrottleThresholdForBalancing,uint,0,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Maximum number of movements allowed in Balancing Phase in the past interval indicated by GlobalMovementThrottleCountingInterval. 0 indicates no limit 
PlacementAndLoadBalancing,GlobalMovementThrottleCountingInterval,TimeSpan,Common::TimeSpan::FromSeconds(600),Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Indicate the length of the past interval for which to track per domain replica movements (used along with GlobalMovementThrottleThreshold). Can be set to 0 to ignore global throttling altogether. 
PlacementAndLoadBalancing,MovementPerPartitionThrottleThreshold,uint,50,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,No balancing related movement will occur for a partition if the number of balancing related movements for replicas of that partition has reached or exceeded MovementPerFailoverUnitThrottleThreshold in the past interval indicated by MovementPerPartitionThrottleCountingInterval 
PlacementAndLoadBalancing,MovementPerPartitionThrottleCountingInterval,TimeSpan,Common::TimeSpan::FromSeconds(600),Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Indicate the length of the past interval for which to track replica movements for each partition (used along with MovementPerPartitionThrottleThreshold) 
PlacementAndLoadBalancing,MovementThrottledPartitionsPercentageThreshold,double,0.5,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,No balancing will be performed if (the number of currently throttled partitions) > (the number of imbalanced partitions) * MovementThrottledPartitionsPercentageThreshold 
PlacementAndLoadBalancing,PlacementSearchTimeout,TimeSpan,Common::TimeSpan::FromSeconds(0.5),Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. When placing services; search for at most this long before returning a result 
PlacementAndLoadBalancing,ConstraintCheckSearchTimeout,TimeSpan,Common::TimeSpan::FromSeconds(0.5),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. When placing services; search for at most this long before returning a result 
PlacementAndLoadBalancing,FastBalancingSearchTimeout,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. When performing fast balancing; search for at most this long before returning a result 
PlacementAndLoadBalancing,SlowBalancingSearchTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. When performing slow balancing; search for at most this long before returning a result 
PlacementAndLoadBalancing,LoadBalancingEnabled,bool,true,Dynamic,TEST,src\Reliability\LoadBalancing\PLBConfig.h,Enable or disable balancing and constraint check movements 
PlacementAndLoadBalancing,ConstraintCheckEnabled,bool,true,Dynamic,TEST,src\Reliability\LoadBalancing\PLBConfig.h,Enable or disable constraint check movements independently of the LoadBalancingEnabled config 
PlacementAndLoadBalancing,SplitDomainEnabled,bool,false,Dynamic,TEST,src\Reliability\LoadBalancing\PLBConfig.h,Enable or disable the logic of split of service domain logic 
PlacementAndLoadBalancing,IsTestMode,bool,false,Dynamic,TEST,src\Reliability\LoadBalancing\PLBConfig.h,Setting which determines if the LB is in test mode; which results in additional tracing and validity checking 
PlacementAndLoadBalancing,AllowedBalancingScoreDifference,double,0.1,Dynamic,TEST,src\Reliability\LoadBalancing\PLBConfig.h,The percentage of difference in score when doing load balancing 
PlacementAndLoadBalancing,FaultDomainEnabled,bool,true,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Enable or disable fault domain in PLB 
PlacementAndLoadBalancing,UpgradeDomainEnabled,bool,true,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Enable or disable upgrade domain in PLB 
PlacementAndLoadBalancing,LocalBalancingThreshold,double,0.0,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Set the balancing threshold for local domains. Balancing phase will balance and take into account stdDev from local PLB domain entries if maxNodeLoad/minNodeLoad is greater than LocalBalancingThreshold. Defragmentation will work if maxNodeLoad/minNodeLoad in at least one FD or UD is smaller than LocalBalancingThreshold. 
PlacementAndLoadBalancing,LocalDomainWeight,double,0.25,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Weight for local domains when calculating score. Standard deviation from all local domains will be combined together and each of them will have weight of 1/n if there are n local domains. This number is then multiplied with this weight and combined with deviation from global domain (weight of global domain is 1 - LocalDomainWeight) 
PlacementAndLoadBalancing,YieldDurationPer10ms,int,7,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,When searching for a balanced solution; every 10ms the LB search thread will sleep for this amount of time 
PlacementAndLoadBalancing,InitialRandomSeed,int,-1,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Initial random seed 
PlacementAndLoadBalancing,MaxSimulatedAnnealingIterations,int,-1,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Maximum number of simulated annealing iterations.  The default value of -1 specifies no limit within the specified timeout 
PlacementAndLoadBalancing,MaxPercentageToMove,double,0.3,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Maximum percentage of the service objects in the cluster to move at any time 
PlacementAndLoadBalancing,MaxPercentageToMoveForPlacement,double,0.1,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Maximum percentage of the service objects in the cluster to move during placement 
PlacementAndLoadBalancing,FastBalancingPopulationSize,int,1,Dynamic,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,The number of potential simulated annealing solutions to keep in fast load balancing: not used any more 
PlacementAndLoadBalancing,SlowBalancingPopulationSize,int,2,Dynamic,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,The number of potential simulated annealing solutions to keep in slow load balancing 
PlacementAndLoadBalancing,FastBalancingTemperatureDecayRate,double,0.8,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The rate at which the simulated annealing algorithm changes the tradeoff from random search to score improvement in fast load balancing 
PlacementAndLoadBalancing,SlowBalancingTemperatureDecayRate,double,0.98,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The rate at which the simulated annealing algorithm changes the tradeoff from random search to score improvement in slow load balancing 
PlacementAndLoadBalancing,IgnoreCostInScoring,bool,false,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Instructs the LB to ignore the cost element of the scoring function; resulting potentially large number of moves for better balanced placement 
PlacementAndLoadBalancing,UseMoveCostReports,bool,false,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Instructs the LB to ignore the cost element of the scoring function; resulting potentially large number of moves for better balanced placement 
PlacementAndLoadBalancing,MoveCostOffset,int,1000,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Offset for calculating move cost 
PlacementAndLoadBalancing,MoveCostZeroValue,int,0,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Value for move cost Zero used in score calculation 
PlacementAndLoadBalancing,MoveCostLowValue,int,1,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Value for move cost Zero used in score calculation 
PlacementAndLoadBalancing,MoveCostMediumValue,int,15,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Value for move cost Medium used in score calculation 
PlacementAndLoadBalancing,MoveCostHighValue,int,40,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Value for move cost High used in score calculation 
PlacementAndLoadBalancing,SwapCost,double,0.1,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Value for move cost for swaps that is used during calculation of energy if UseMoveCostReports is set to true. Before changing this setting; consult values for Zero; Low; Medium and High cost in order to understand how heavy do you want swap cost to be. 
PlacementAndLoadBalancing,ScoreImprovementThreshold,double,0.0,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Setting which indicates that there must be a particular amount of improvement in the score between two solutions in order for the LB to accept the new solution 
PlacementAndLoadBalancing,NodeLoadsTracingInterval,TimeSpan,Common::TimeSpan::FromSeconds(20),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. The interval with which to trace node loads for each service domain 
PlacementAndLoadBalancing,ApplicationLoadsTracingInterval,TimeSpan,Common::TimeSpan::FromSeconds(40),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. The interval with which to trace Application loads for each service domain 
PlacementAndLoadBalancing,PLBPeriodicalTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(20),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. The interval with which to periodically trace information of PLB 
PlacementAndLoadBalancing,MaxViolatedItemsToTrace,int,100,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The max number of violated items to be printed to trace 
PlacementAndLoadBalancing,MaxInvalidReplicasToTrace,int,10,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The max number of replicas to trace that cannot be placed or that are violating constraints and cannot be corrected 
MetricActivityThresholds,PropertyGroup,KeyIntegerValueMap,None,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the set of MetricActivityThresholds for the metrics in the cluster. Balancing will work if maxNodeLoad is greater than MetricActivityThresholds. For deferag metrics it defines the amount of load equal to or below which Service Fabric will consider the node empty 
MetricBalancingThresholds,PropertyGroup,KeyDoubleValueMap,None,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the set of MetricBalancingThresholds for the metrics in the cluster. Balancing will work if maxNodeLoad/minNodeLoad is greater than MetricBalancingThresholds. Defragmentation will work if maxNodeLoad/minNodeLoad in at least one FD or UD is smaller than MetricBalancingThresholds. 
MetricEmptyNodeThresholds,PropertyGroup,KeyIntegerValueMap,None,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Determines the set of MetricEmptyNodeThresholds for the metrics in the cluster. Determines how much load on a node is needed to be free for that node to be considered empty. 
GlobalMetricWeights,PropertyGroup,KeyDoubleValueMap,None,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the set of GlobalMetricWeights for the metrics in the cluster. 
DefragmentationMetrics,PropertyGroup,KeyBoolValueMap,None,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the set of metrices that should be used for defragmentation and not for load balancing. 
DefragmentationMetricsPercentOrNumberOfEmptyNodesTriggeringThreshold,PropertyGroup,KeyDoubleValueMap,None,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the number of free nodes which are needed to consider cluster defragmented by specifying either percent in range [0.0 - 1.0) or number of empty nodes as number >= 1.0 
DefragmentationEmptyNodeDistributionPolicy,PropertyGroup,KeyIntegerValueMap,None,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specifies the policy defragmentation follows when emptying nodes. For a given metric 0 indicates that SF should try to defragment nodes evenly across UDs and FDs; 1 indicates only that the nodes must be defragmented 
DefragmentationScopedAlgorithmEnabled,PropertyGroup,KeyBoolValueMap,None,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specifies whether the scoped defragmentation logic should be used for this metric 
DefragmentationEmptyNodeWeight,PropertyGroup,KeyDoubleValueMap,None,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specifies the ratio of node emptying and balancing to be used in the calculations of score 0.0 - balancing only 1.0 - empty nodes; don't balance 0.0 - 1.0 - empty nodes and balance across non-empty nodes. Higher values insure empty nodes at the cost of a less balanced state and vice versa 
PlacementAndLoadBalancing,DefragmentationNodesStdDevFactor,double,1,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Determines factor for standard deviation of load across all nodes during calculating stdDev. 
PlacementAndLoadBalancing,DefragmentationFdsStdDevFactor,double,0.01,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Determines factor for standard deviation of load across all fault domains during calculating stdDev. 
PlacementAndLoadBalancing,DefragmentationUdsStdDevFactor,double,0.01,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Determines factor for standard deviation of load across all upgrade domains during calculating stdDev. 
NodeBufferPercentage,PropertyGroup,KeyDoubleValueMap,None,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Node capacity percentage per metric name; used as a buffer in order to keep some free place on a node for the failover case. 
PreventIntermediateOvercommit,PreventIntermediateOvercommit,bool,false,Dynamic,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,Deprecated; please use PreventTransientOvercommit instead Determines should PLB immediately count on resources that will be freed up by the initiated moves. By default; PLB can initiate move out and move in on the same node which can create intermediate overcommit. Setting this parameter to true will prevent those kind of overcommits and on-demand defrag (aka placementWithMove) will do nothing. 
PlacementAndLoadBalancing,PreventTransientOvercommit,bool,false,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines should PLB immediately count on resources that will be freed up by the initiated moves. By default; PLB can initiate move out and move in on the same node which can create transient overcommit. Setting this parameter to true will prevent those kind of overcommits and on-demand defrag (aka placementWithMove) will be disabled. 
PlacementAndLoadBalancing,InBuildThrottlingEnabled,bool,false,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determine whether the in-build throttling is enabled 
PlacementAndLoadBalancing,InBuildThrottlingAssociatedMetric,wstring,L"",Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,The associated metric name for this throttling 
PlacementAndLoadBalancing,InBuildThrottlingGlobalMaxValue,int,0,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,The maximal number of in-build replicas allowed globally 
PlacementAndLoadBalancing,SwapPrimaryThrottlingEnabled,bool,false,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determine whether the swap-primary throttling is enabled 
PlacementAndLoadBalancing,SwapPrimaryThrottlingAssociatedMetric,wstring,L"",Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,The associated metric name for this throttling 
PlacementAndLoadBalancing,SwapPrimaryThrottlingGlobalMaxValue,int,0,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,The maximal number of swap-primary replicas allowed globally 
PlacementAndLoadBalancing,TraceSimulatedAnnealingStatistics,bool,false,Dynamic,TEST,src\Reliability\LoadBalancing\PLBConfig.h,Determines whether to trace simulated annealing statistics 
PlacementAndLoadBalancing,SimulatedAnnealingStatisticsInterval,int,100,Dynamic,TEST,src\Reliability\LoadBalancing\PLBConfig.h,Determines the interval at which to trace simulated annealing statistics 
PlacementAndLoadBalancing,InitialTemperatureProbeCount,int,50,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,How many random movements to probe for determining the initial temperature 
PlacementAndLoadBalancing,SimulatedAnnealingIterationsPerRound,int,1000,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Number of iterations per round during simulated annealing 
PlacementAndLoadBalancing,PlacementSearchIterationsPerRound,int,100,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Number of iterations per round during placement search 
PlacementAndLoadBalancing,ConstraintCheckIterationsPerRound,int,100,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Number of iterations per round during constraint checking 
PlacementAndLoadBalancing,ProcessPendingUpdatesInterval,TimeSpan,Common::TimeSpan::FromSeconds(0.3),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Interval with which to process pending updates from FM. 
PlacementAndLoadBalancing,SwapPrimaryProbability,double,0.3,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The probability to generate a swap primary movement during load balancing 
PlacementAndLoadBalancing,LoadDecayInterval,TimeSpan,Common::TimeSpan::FromSeconds(60.0),Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. The interval of that the loads in the history decay for the given factor measured in second 
PlacementAndLoadBalancing,LoadDecayFactor,double,0,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The factor that the loads in the history decay; it should be greater than or equal to 0 and less than or equal to 1 
PlacementAndLoadBalancing,PlacementConstraintPriority,int,0,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of placement constraint: 0: Hard; 1: Soft; negative: Ignore 
PlacementAndLoadBalancing,PreferredLocationConstraintPriority,int,2,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of prefered location constraint: 0: Hard; 1: Soft; 2: Optimization; negative: Ignore 
PlacementAndLoadBalancing,CapacityConstraintPriority,int,0,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of capacity constraint: 0: Hard; 1: Soft; negative: Ignore 
PlacementAndLoadBalancing,AffinityConstraintPriority,int,0,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of affinity constraint: 0: Hard; 1: Soft; negative: Ignore 
PlacementAndLoadBalancing,FaultDomainConstraintPriority,int,0,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of fault domain constraint: 0: Hard; 1: Soft; negative: Ignore 
PlacementAndLoadBalancing,UpgradeDomainConstraintPriority,int,1,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of upgrade domain constraint: 0: Hard; 1: Soft; negative: Ignore 
PlacementAndLoadBalancing,ScaleoutCountConstraintPriority,int,0,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of scaleout count constraint: 0: Hard; 1: Soft; negative: Ignore 
PlacementAndLoadBalancing,ApplicationCapacityConstraintPriority,int,0,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of capacity constraint: 0: Hard; 1: Soft; negative: Ignore 
PlacementAndLoadBalancing,IsAffinityBidirectional,bool,false,Dynamic,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,Deprecated as of v5.2 - please use MoveParentToFixAffinityViolation instead Setting which determines if the affinity is bi-directional 
PlacementAndLoadBalancing,MoveParentToFixAffinityViolation,bool,false,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Setting which determines if parent replicas can be moved to fix affinity constraints 
PlacementAndLoadBalancing,MoveExistingReplicaForPlacement,bool,true,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Setting which determines if to move existing replica during placement 
PlacementAndLoadBalancing,UseSeparateSecondaryLoad,bool,true,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Setting which determines if use different secondary load 
PlacementAndLoadBalancing,PlaceChildWithoutParent,bool,true,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Setting which determines if child service replica can be placed if no parent replica is up 
PlacementAndLoadBalancing,AffinityMoveParentReplicaProbability,double,0.5,Dynamic,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,The probability to move parent instead of child replica probability for affinity constraint check 
PlacementAndLoadBalancing,RelaxConstraintsForPlacementEnabled,bool,false,Dynamic,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,Deprecated and no longer consumed Determines whether we should relax constraints (including Affinity; FD/UD; and Capacity) during placement if we cannot find the placement honoring all constraints 
PlacementAndLoadBalancing,RelaxFaultDomainConstraintsForPlacement,bool,true,Dynamic,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,Deprecated and no longer consumed Determines whether we should relax FD/UD constraint during placement if we cannot find the placement honoring all constraints 
PlacementAndLoadBalancing,RelaxAffinityConstraintsForPlacement,bool,false,Dynamic,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,Deprecated and no longer consumed Determines whether we should relax Affinity constraints during placement if we cannot find the placement honoring all constraints 
PlacementAndLoadBalancing,RelaxAffinityConstraintDuringUpgrade,bool,true,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Determines whether we should relax Affinity constraint during cluster upgrade if we cannot find the placement honoring all constraints 
PlacementAndLoadBalancing,RelaxCapacityConstraintsForPlacement,bool,false,Dynamic,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,Deprecated and no longer consumed Determines whether we should relax Capacity constraints during placement if we cannot find the placement honoring all constraints 
PlacementAndLoadBalancing,AllowConstraintCheckFixesDuringApplicationUpgrade,bool,false,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Determines whether we should allow PLB operations that are fixing constraint violations of the partitions belongs to application which is currently in application upgrade. 
PlacementAndLoadBalancing,PLBPeriodicalTraceApplicationCount,uint,10,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,How many nodes to be periodically traced 
PlacementAndLoadBalancing,PLBPeriodicalTraceNodeCount,uint,20,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,How many nodes to be periodically traced 
PlacementAndLoadBalancing,PLBPeriodicalTraceServiceCount,uint,20,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,How many services to be periodically traced 
PlacementAndLoadBalancing,PLBNodeLoadTraceEntryCount,uint,500,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,How many load entry to be traced in the node load trace 
PlacementAndLoadBalancing,PLBApplicationLoadTraceMaxSize,uint,100,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,How many load entry per service domain to be traced in the application load trace interval 
PlacementAndLoadBalancing,PLBApplicationLoadTraceBatchSize,uint,100,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,How many load entry to be traced in a single application load trace 
PlacementAndLoadBalancing,PartiallyPlaceServices,bool,true,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines if all service replicas in cluster will be placed "all or nothing" given limited suitable nodes for them 
PlacementAndLoadBalancing,InterruptBalancingForAllFailoverUnitUpdates,bool,false,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines if any type of failover unit update should interrupt fast or slow balancing run. With specified "false" balancing run will be interrupted if FailoverUnit:  is created/deleted; has missing replicas; changed primary replica location or changed number of replicas. Balancing run will NOT be interrupted in other cases - if FailoverUnit:  has extra replicas; changed any replica flag; changed only partition version or any other case. 
PlacementAndLoadBalancing,CheckAlignedAffinityForUpgrade,bool,false,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Move or swap primary replicas for aligned affinity together if it is true. 
PlacementAndLoadBalancing,CheckAffinityForUpgradePlacement,bool,false,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Add new replicas together for affinity correlated partitions during upgrade 
PlacementAndLoadBalancing,RelaxCapacityConstraintForUpgrade,bool,true,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Should capacity be relaxed if there is no enough capacity for the swaps of replicas during upgrade. 
PlacementAndLoadBalancing,UseAppGroupsInBoost,bool,false,Dynamic,TEST,src\Reliability\LoadBalancing\PLBConfig.h,Determines if boost tests will be executed with default application for all services that do not have one. 
PlacementAndLoadBalancing,TraceMetricInfoForBalancingRun,bool,true,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Determines whether we should trace metric info before and after balancing phase 
PlacementAndLoadBalancing,UseDefaultLoadForServiceOnEveryNode,bool,false,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Config that specifies whether we should use default load for -1 services 
PlacementHeuristicIncomingLoadFactor,PropertyGroup,KeyDoubleValueMap,None,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Determines how should PLB choose target nodes for replica placement based on incoming replicas load per defrag metric. This parameter should target first N most occupied nodes whose accumulated empty space in total is greater than incoming replicas load multiplied by value of this parameter; if N is greater than number of nodes calculated by parameter PlacementHeuristicEmptySpacePercent. 
PlacementHeuristicEmptySpacePercent,PropertyGroup,KeyDoubleValueMap,None,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Determines how should PLB choose target nodes for replica placement based on remaining free capacity per defrag metric. This parameter should target first M most occupied nodes whose accumulated empty space in total is greater than total cluster empty space multiplied by value of this parameter; if M is greater than number of nodes calculated by parameter PlacementHeuristicIncomingLoadFactor. 
PlacementAndLoadBalancing,AllowHigherChildTargetReplicaCountForAffinity,bool,true,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Setting which determines if higher child target replica count than parent will be considered as a valid state by affinity constraint 
PlacementAndLoadBalancing,QuorumBasedReplicaDistributionPerUpgradeDomains,bool,false,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Configuration that specifies whether replica distribution among upgrade domains (of services with packing policy) should be based on a partition write quorum or PLB should keep max replica difference between number of replicas per upgrade domains below 1. 
PlacementAndLoadBalancing,QuorumBasedReplicaDistributionPerFaultDomains,bool,false,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Configuration that specifies whether replica distribution among fault domains (of services with packing policy) should be based on a partition write quorum or PLB should keep max replica difference between number of replicas per fault domains below 1. 
PlacementAndLoadBalancing,AllowBalancingDuringApplicationUpgrade,bool,true,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Setting which determines whether balancing should be run during application upgrade 
Replication,InitialReplicationQueueSize,uint,64,Static,PUBLIC,src\Reliability\Replication\reconfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
Replication,MaxReplicationQueueSize,uint,1024,Static,PUBLIC,src\Reliability\Replication\reconfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
Replication,MaxReplicationQueueMemorySize,uint,0,Static,PUBLIC,src\Reliability\Replication\reconfig.h,Deprecated. See Specific configs for Primary and Secondary Replication Queues
Replication,InitialCopyQueueSize,uint,64,Static,PUBLIC,src\Reliability\Replication\reconfig.h,This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2.
Replication,MaxCopyQueueSize,uint,1024,Static,PUBLIC,src\Reliability\Replication\reconfig.h,This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
Replication,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(15),Static,PUBLIC,src\Reliability\Replication\reconfig.h,Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator.
Replication,MaxPendingAcknowledgements,uint,32,Dynamic,PUBLIC,src\Reliability\Replication\reconfig.h,Maximum number of outstanding operation acknowledgements.  Together with the BatchAckInterval controls replicator operation throttling.
Replication,EnableReplicationOperationHeaderInBody,bool,false,Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,Bool that indicates if it is allowed to place the replication operation header in the body of the transport message instead of the header.
Replication,MaxReplicationMessageSize,uint,52428800,Static,PUBLIC,src\Reliability\Replication\reconfig.h,Maximum message size of replication operations. Default is 50MB.
Replication,RequireServiceAck,bool,false,Static,PUBLIC,src\Reliability\Replication\reconfig.h,Bool which controls whether the Windows Fabric Replicator will optimistically acknowledge operations on behalf of services. Setting this to false allows the replicator to optimistically acknowledge operations on behalf of the service. While true tells the replicator to require service ack via the Operation.Ack() API before the acknowledgement can be sent back to the primary service. Note that this flag is not respected for persistent services which always require services to acknowledge operations.
Replication,ReplicatorAddress,wstring,L"localhost:0",Static,PUBLIC,src\Reliability\Replication\reconfig.h,The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations
Replication,SecondaryClearAcknowledgedOperations,bool,false,Static,PUBLIC,src\Reliability\Replication\reconfig.h,Bool which controls if the operations on the secondary replicator are cleared once they are ACK'd by the state provider. Setting this to true may result in additional copy operations during the build of an idle replica
Replication,UseStreamFaultsAndEndOfStreamOperationAck,bool,false,Static,PUBLIC,src\Reliability\Replication\reconfig.h,Bool which indicates to Windows Fabric Replicator if the state provider intends to use the OperationStream2 interface. If this is enabled the state provider must report fault on the OperationStream2 interface if it cannot apply any more operations that are pumped from the stream.The Windows Fabric Replicator will also dispatch an End of Stream operation in the secondary copy and replication streams.
Replication,InitialPrimaryReplicationQueueSize,uint,64,Static,PUBLIC,src\Reliability\Replication\reconfig.h,This value defines the initial size for the queue which maintains the replication operations on the primary. Note that it must be a power of 2.
Replication,MaxPrimaryReplicationQueueSize,uint,1024,Static,PUBLIC,src\Reliability\Replication\reconfig.h,This is the maximum number of operations that could exist in the primary replication queue. Note that it must be a power of 2.
Replication,MaxPrimaryReplicationQueueMemorySize,uint,0,Static,PUBLIC,src\Reliability\Replication\reconfig.h,This is the maximum value of the primary replication queue in bytes.
Replication,InitialSecondaryReplicationQueueSize,uint,64,Static,PUBLIC,src\Reliability\Replication\reconfig.h,This value defines the initial size for the queue which maintains the replication operations on the secondary. Note that it must be a power of 2.
Replication,MaxSecondaryReplicationQueueSize,uint,2048,Static,PUBLIC,src\Reliability\Replication\reconfig.h,This is the maximum number of operations that could exist in the secondary replication queue. Note that it must be a power of 2.
Replication,MaxSecondaryReplicationQueueMemorySize,uint,0,Static,PUBLIC,src\Reliability\Replication\reconfig.h,This is the maximum value of the secondary replication queue in bytes.
Replication,PrimaryWaitForPendingQuorumsTimeout,TimeSpan,Common::TimeSpan::Zero,Static,PUBLIC,src\Reliability\Replication\reconfig.h,Specify timespan in seconds. Specify timespan in seconds. Defines how long the primary replicator waits for receiving a quorum of acknowledgements for any pending replication operations before processing a reconfiguration request, that could potentially result in ‘cancelling’ the pending replication operationsl
Replication,QueueHealthMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,PUBLIC,src\Reliability\Replication\reconfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor any warning/error health events in the replication operation queues. A value of '0' disables health monitoring
Replication,QueueHealthWarningAtUsagePercent,uint,80,Static,PUBLIC,src\Reliability\Replication\reconfig.h,This value determines the replication queue usage(in percentage) after which we report warning about high queue usage. We do so after a grace interval of QueueHealthMonitoringInterval. If the queue usage falls below this percentage in the grace interval, the warning is not reported.
Replication,SlowApiMonitoringInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,PUBLIC,src\Reliability\Replication\reconfig.h,Specify timespan in seconds. This value determines the time period used by the Replicator to monitor GetNextCopyState and GetNextCopyContext async api's. A value of '0' disables health monitoring. A warning health report is generated if the async api takes longer than this duration
Replication,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,PUBLIC,src\Reliability\Replication\reconfig.h,Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation.
Replication,CompleteReplicateThreadCount,uint,0,Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,The maximum number of parallel threads that can be used by the Windows Fabric Replicator to quorum complete Replication operations on the primary
Replication,AllowMultipleQuorumSet,bool,true,Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,Bool which controls whether the Windows Fabric Replicator considers replicas in the previous and current configuration to compute quorum during reconfigurations. Setting this to false could result in higher chances of dataloss during failures
Replication,TraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,Specify timespan in seconds. Determines the tracing interval of the replicator's progress (if there was any progress from the previous trace).
Replication,QueueFullTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Replication,EnableSlowIdleRestartForVolatile,bool,false,Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Replication,EnableSlowIdleRestartForPersisted,bool,true,Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Replication,SlowIdleRestartAtQueueUsagePercent,uint,85,Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Replication,EnableSlowActiveSecondaryRestartForVolatile,bool,false,Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Replication,EnableSlowActiveSecondaryRestartForPersisted,bool,true,Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Replication,SlowActiveSecondaryRestartAtQueueUsagePercent,uint,90,Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Replication,ActiveSecondaryCountAdditionalToWriteQuorumNotRestaredDueToSlowness,uint,0,Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Replication,SlowActiveSecondaryRestartAtAgeOfOldestPrimaryOperation,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Replication,SecondaryProgressRateDecayFactor,double,0.5,Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
Replication,IdleReplicaMaxLagDurationBeforePromotion,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Reliability\Replication\reconfig.h,Specify timespan in seconds. TODO: GET DETAILS AND ADD TO GenerateConfigurationsCSV.pl
SeedNodeClientConnectionAddresses,PropertyGroup,SeedNodeConfig,None,Dynamic,PUBLIC,src\retail\native\FabricInstallerService\SeedNodeClientConnectionAddressesConfig.h,
FailoverManager,SystemReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),Dynamic,INTERNAL,src\ServiceModel\ServiceModelConfig.h,Specify timespan in seconds. When a persisted system replica goes down; Windows Fabric waits for this duration for the replica to come back up before creating new replacement  replicas (which would require a copy of the state). 
FailoverManager,UserReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),Dynamic,PUBLIC,src\ServiceModel\ServiceModelConfig.h,Specify timespan in seconds. When a persisted replica goes down; Windows Fabric waits for this duration for the replica to come back up before creating new replacement  replicas (which would require a copy of the state). 
FailoverManager,QuorumLossWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,Dynamic,PUBLIC,src\ServiceModel\ServiceModelConfig.h,Specify timespan in seconds. This is the max duration for which we allow a partition to be in a state of quorum loss. If the partition is still in quorum loss after this duration; the partition is recovered from quorum loss by considering the down replicas as lost. Note that this can potentially incur data loss. 
FailoverManager,SystemStandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),Dynamic,INTERNAL,src\ServiceModel\ServiceModelConfig.h,Specify timespan in seconds. When a persisted system replica come back from a down state; it may have already been replaced. This timer determines how long the FM will keep the standby replica before discarding it. 
FailoverManager,UserStandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),Dynamic,PUBLIC,src\ServiceModel\ServiceModelConfig.h,Specify timespan in seconds. When a persisted replica come back from a down state; it may have already been replaced. This timer determines how long the FM will keep the standby replica before discarding it. 
FailoverManager,SystemMaxStandByReplicaCount,int,3,Dynamic,INTERNAL,src\ServiceModel\ServiceModelConfig.h,The default max number of StandBy replicas that the system keeps for system services. 
FailoverManager,UserMaxStandByReplicaCount,int,1,Dynamic,PUBLIC,src\ServiceModel\ServiceModelConfig.h,The default max number of StandBy replicas that the system keeps for user services. 
Federation,NodeNamePrefixesForV1Generator,wstring,L"",Static,PUBLIC,src\ServiceModel\ServiceModelConfig.h,This specifies a list of roles for which V1 node id generator should be used. 
Federation,UseV2NodeIdGenerator,bool,false,Static,PUBLIC,src\ServiceModel\ServiceModelConfig.h,This configuration specifies whether or not to use V2 node id generator. 
Federation,NodeIdGeneratorVersion,wstring,L"",NotAllowed,PUBLIC,src\ServiceModel\ServiceModelConfig.h,This configuration specifies whether to use V3 node id generator. 
NamingService,MaxPropertyNameLength,int,256,Static,INTERNAL,src\ServiceModel\ServiceModelConfig.h,Maximum allowed property name length (depends on local store limits) 
NamingService,MaxMessageSize,int,4*1024*1024,Static,PUBLIC,src\ServiceModel\ServiceModelConfig.h,The maximum message size for client node communication when using naming. DOS attack alleviation; default value is 4MB 
NamingService,MessageContentBufferRatio,double,0.75,Dynamic,INTERNAL,src\ServiceModel\ServiceModelConfig.h,The fraction of MaxMessageSize to use as the available buffer limit when calculating how much data to put in a single message (should be in the range [0.0; 1.0]) 
NamingService,MaxFileOperationTimeout,TimeSpan,Common::TimeSpan::FromMinutes(30),Dynamic,PUBLIC,src\ServiceModel\ServiceModelConfig.h,Specify timespan in seconds. The maximum timeout allowed for file store service operation. Requests specifying a larger timeout will be rejected. 
NamingService,MaxOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\ServiceModel\ServiceModelConfig.h,Specify timespan in seconds. The maximum timeout allowed for client operations. Requests specifying a larger timeout will be rejected. 
NamingService,MaxClientConnections,int,1000,Dynamic,PUBLIC,src\ServiceModel\ServiceModelConfig.h,The maximum allowed number of client connections per gateway. 
NamingService,ServiceNotificationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,PUBLIC,src\ServiceModel\ServiceModelConfig.h,Specify timespan in seconds. The timeout used when delivering service notifications to the client. 
NamingService,MaxOutstandingNotificationsPerClient,int,1000,Dynamic,PUBLIC,src\ServiceModel\ServiceModelConfig.h,The maximum number of outstanding notifications before a client registration is forcibly closed by the gateway. 
NamingService,MaxIndexedEmptyPartitions,int,1000,Dynamic,PUBLIC,src\ServiceModel\ServiceModelConfig.h,The maximum number of empty partitions that will remain indexed in the notification cache for synchronizing reconnecting clients. Any empty partitions above this number will be removed from the index in ascending lookup version order. Reconnecting clients can still synchronize and receive missed empty partition updates; but the synchronization protocol becomes more expensive. 
NamingService,GatewayServiceDescriptionCacheLimit,int,0,Static,PUBLIC,src\ServiceModel\ServiceModelConfig.h,The maximum number of entries maintained in the LRU service description cache at the Naming Gateway (set to 0 for no limit). 
FabricClient,MaxApplicationParameterLength,int,1024*1024,Dynamic,INTERNAL,src\ServiceModel\ServiceModelConfig.h,------------------------------- Fabric Client Configuration ------------------------------- 
Query,QueryPagerContentRatio,double,1.0,Dynamic,TEST,src\ServiceModel\ServiceModelConfig.h,------------------------------- Query ------------------------------- The fraction of MaxMessageSize to use as the available buffer limit when calculating how much data to put in a single message (should be in the range [0.0; 1.0]) 
EseStore,DatabasePageSizeInKB,int,8,NotAllowed,INTERNAL,src\Store\StoreConfig.h, Settings that are related to performance  
EseStore,VerPageSizeInKB,int,8,NotAllowed,INTERNAL,src\Store\StoreConfig.h,
EseStore,EseLogFileSizeInKB,int,5120,NotAllowed,INTERNAL,src\Store\StoreConfig.h,
EseStore,EseLogBufferSizeInKB,int,1024,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,EsePoolMinSize,int,100,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,EsePoolAdjustmentSize,int,10,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,EsePoolEvictionPeriodInSeconds,int,900,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,MaxAsyncCommitDelayInMilliseconds,int,200,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,MinAsyncCommitThreadNumber,int,12,Static,INTERNAL,src\Store\StoreConfig.h,This is Linux only; for async commit job queue. We do not #if out this line for windows as it is required for generating config file 
EseStore,EseMinDatabasePagesInBufferPoolCache,int,64,Static,INTERNAL,src\Store\StoreConfig.h, This setting is used to reduce the chance ESE runs out of buffer pages It is a per instance setting. Each ESE instance will have this many pages in buffer pool as a minimum.  
EseStore,DeleteDatabaseRetryCount,int,20,Dynamic,INTERNAL,src\Store\StoreConfig.h, Internal retry counts and delays  
EseStore,DeleteDatabaseRetryDelayMilliseconds,int,1000,Dynamic,INTERNAL,src\Store\StoreConfig.h,
EseStore,OpenDatabaseRetryCount,int,30,Dynamic,INTERNAL,src\Store\StoreConfig.h,
EseStore,OpenDatabaseRetryDelayMilliseconds,int,1000,Dynamic,INTERNAL,src\Store\StoreConfig.h,
EseStore,SwapDatabaseRetryCount,int,10,Dynamic,INTERNAL,src\Store\StoreConfig.h,
EseStore,SwapDatabaseRetryDelayMilliseconds,int,1000,Dynamic,INTERNAL,src\Store\StoreConfig.h,
EseStore,InvalidSessionThreadRetryDelayMilliseconds,int,100,Dynamic,INTERNAL,src\Store\StoreConfig.h,
EseStore,InvalidSessionThreadRetryCount,int,10,Dynamic,INTERNAL,src\Store\StoreConfig.h,
EseStore,SecondaryApplyRetryCount,int,50,Dynamic,INTERNAL,src\Store\StoreConfig.h,
EseStore,SecondaryApplyRetryDelayMilliseconds,int,100,Dynamic,INTERNAL,src\Store\StoreConfig.h,
EseStore,MaxJetInstances,int,500,Static,INTERNAL,src\Store\StoreConfig.h, Settings that are to control ESE resource use; intended to catch bugs  
EseStore,MaxSessions,int,16384,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,MaxCursors,int,16384,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,MaxOpenTables,int,49152,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,MaxVerPages,int,16384,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,CheckpointDepthMaxInMB,int,512,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,MaxCacheSizeInMB,int,1024,Static,INTERNAL,src\Store\StoreConfig.h, Value of -1 for int values uses ESE defaults  
EseStore,MaxDefragFrequencyInMinutes,int,60 * 24,Dynamic,INTERNAL,src\Store\StoreConfig.h,MaxDefragFrequencyInMinutes <= 0 to disable 
EseStore,DefragRetryDelayInSeconds,int,30,Dynamic,INTERNAL,src\Store\StoreConfig.h,
EseStore,DefragThresholdInMB,int,500,Dynamic,INTERNAL,src\Store\StoreConfig.h,
EseStore,CompactionThresholdInMB,int,0,Dynamic,INTERNAL,src\Store\StoreConfig.h,Offline compaction occurs during open if the database file size exceeds this threshold (<=0 to disable). 
EseStore,IntrinsicValueThresholdInBytes,int,0,Dynamic,INTERNAL,src\Store\StoreConfig.h,Value lengths less than or equal this threshold will be written to ESE using the JET_bitSetIntrinsicLV flag (<=0 to disable and use the ESE default of 1024 bytes). 
EseStore,ComputeLogFileSizeSource,wstring,L"edb.log",Dynamic,INTERNAL,src\Store\StoreConfig.h,The existing log file size is determined by checking the filesize of this file (current log file by default) 
EseStore,EseEnableBackgroundMaintenance,bool,true,Static,INTERNAL,src\Store\StoreConfig.h, Enable the background database maintenance task that does ECC checks to fix bit errors; etc. Value of -1 for int values uses ESE defaults  Default for EseEnableScanSerialization = 20ms Default for EseScanIntervalMinInSeconds = 1 * 24 * 60 * 60 = 1 day Default for EseScanIntervalMaxInSeconds = 7 * 24 * 60 * 60 = 7 days  
EseStore,EseEnableScanSerialization,bool,false,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,EseScanThrottleInMilleseconds,int,-1,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,EseScanIntervalMinInSeconds,int,-1,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,EseScanIntervalMaxInSeconds,int,-1,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,AssertOnFatalError,bool,false,Dynamic,INTERNAL,src\Store\StoreConfig.h, Debugging  
ReplicatedStore,FabricTimePersistInterval,TimeSpan,Common::TimeSpan::Zero,Dynamic,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds.  ReplicatedStore  
ReplicatedStore,FabricTimeRefreshTimeoutValue,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds. 
ReplicatedStore,TombstoneCleanupLimit,int,10000,Dynamic,INTERNAL,src\Store\StoreConfig.h,Tombstone cleanup is triggered on delete when the total number of tombstones exceeds this value. 
ReplicatedStore,MaxTombstonesPerCleanup,int,200000,Dynamic,INTERNAL,src\Store\StoreConfig.h,Tombstone cleanup will not attempt to cleanup more than this number of tombstones per cleanup round. Each cleanup round attempts to reduce the number of tombstones by half. 
ReplicatedStore,EnableTombstoneCleanup2,bool,true,Static,INTERNAL,src\Store\StoreConfig.h,Enables optimized tombstone cleanup algorithm 
ReplicatedStore,TombstoneMigrationBatchSize,int,200000,Dynamic,INTERNAL,src\Store\StoreConfig.h,Maximum number of tombstones to migrate per transaction batch (if needed) 
ReplicatedStore,DatabaseRebuildBatchSizeInBytes,int,2 * 1024 * 1024,Dynamic,INTERNAL,src\Store\StoreConfig.h,The transaction batch size to use when replaying on a secondary replica in FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE_REBUILD mode (dynamic; but requires replica restart) 
ReplicatedStore,ThrottleCountersRefreshIntervalInOperationCount,int,256,Static,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,ThrottleCountersRefreshInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds. 
ReplicatedStore,TargetCopyOperationSize,int,2 * 1024 * 1024,Static,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,CopyOperationSizeRatio,double,0.80,Static,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,MaxEpochHistoryCount,int,200,Dynamic,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,EnableRepairPolicy,bool,true,Dynamic,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,RepairPolicyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds. 
ReplicatedStore,EnableFileStreamFullCopy,bool,true,Dynamic,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,MaxFileStreamFullCopyWaiters,int,-1,Dynamic,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,FileStreamFullCopyRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds. 
ReplicatedStore,WaitForCopyLsnRetryDelayInMillis,int,500,Dynamic,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,MaxWaitForCopyLsnRetry,int,120,Dynamic,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,EnableSystemServiceFlushOnDrain,bool,true,Dynamic,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,EnableUserServiceFlushOnDrain,bool,true,Dynamic,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,EnableEndOfStreamAckOverride,bool,true,Dynamic,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,AssertOnOpenSharingViolation,bool,true,Dynamic,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,SlowCommitTraceThreshold,TimeSpan,Common::TimeSpan::FromSeconds(1),Dynamic,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds. 
ReplicatedStore,SlowCommitCountThreshold,int,60,Dynamic,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,SlowCommitTimeThreshold,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds. 
ReplicatedStore,EnableSlowCommitTest,bool,false,Dynamic,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,DefaultHealthReportTimeToLive,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds. 
ReplicatedStore,LifecycleAssertTimeout,TimeSpan,Common::TimeSpan::Zero,Dynamic,DEPRECATED,src\Store\StoreConfig.h,Specify timespan in seconds. Tracks lifecycle operations and asserts if this timeout expires waiting for the operation to complete (0 to disable)  
ReplicatedStore,LifecycleOpenAssertTimeout,TimeSpan,Common::TimeSpan::Zero,Dynamic,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds. 
ReplicatedStore,LifecycleChangeRoleAssertTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds. 
ReplicatedStore,LifecycleCloseAssertTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds. 
ReplicatedStore,UserServiceEnumerationPerfTraceThreshold,int,5,Dynamic,INTERNAL,src\Store\StoreConfig.h,Threshold (in seconds of elapsed time) over which KVS enumerations will emit detailed performance traces. Only active API calls are included as elapsed time. 
ReplicatedStore,TransactionDrainTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds. Dynamic for new replicas only (existing replicas will continue to use the old value until re-opened) 
ReplicatedStore,OpenLocalStoreThrottle,int,10,Dynamic,INTERNAL,src\Store\StoreConfig.h,Throttles the number of concurrent local store open calls per process (0 to disable the throttle) 
ReplicatedStore,LogTruncationIntervalInMinutes,int,45,Dynamic,INTERNAL,src\Store\StoreConfig.h,
Testability,UnreliableTransportRecurringTimer,TimeSpan,Common::TimeSpan::FromSeconds(60 * 1),Dynamic,INTERNAL,src\Testability\TestabilityConfig.h,Specify timespan in seconds. The timeout value for checking the transport behaviors applied; 
Testability,UnreliableTransportWarningTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60 * 30),Dynamic,INTERNAL,src\Testability\TestabilityConfig.h,Specify timespan in seconds. The timeout to raise warning if tranport behavior is applied beyond threshold. 
Testability,MaxQueryOperationThreads,uint,0,Static,INTERNAL,src\Testability\TestabilityConfig.h,The maximum number of parallel threads allowed to process 
Testability,QueryQueueSize,int,500,Static,INTERNAL,src\Testability\TestabilityConfig.h,The size of the query job queue 
Transport,ThreadThrottle,uint,400,Dynamic,PUBLIC,src\Transport\TransportConfig.h,The ceiling for the number of active activities in fabric.exe Once the threshold is reached; incoming messages can be dropped. setting to 0 will disable thread count throttling. This is only applicable for fabric.exe. 
Transport,ThreadTestLimit,uint,0,Static,INTERNAL,src\Transport\TransportConfig.h,Limit how many threads are allowed in testing; crash the process immediately when reaching the limit. setting to 0 will disable thread count test limit 
Transport,ThrottleTestAssertThreshold,TimeSpan,Common::TimeSpan::FromSeconds(0),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. If the thread count exceeds the configured ThreadThrottle value for ThrottleTestAssertThreshold consecutive performance measurements; then a TestAssert is triggered. setting to 0 will disable the TestAssert. 
Transport,MemoryThrottleInMB,uint,8192,Dynamic,PUBLIC,src\Transport\TransportConfig.h,The process has this configurable value number of memory as a threshold. Once the threshold is reached; incoming messages can be dropped. setting to 0 will disable memory throttling. This is only applicable for fabric.exe. 
Transport,MemoryThrottleInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. The interval to apply memory throttle; after which memory throttle limit will be increased by MemoryThrottleIncrementRatio. 
Transport,MemoryStableInterval,TimeSpan,Common::TimeSpan::FromSeconds(1800),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. The interval from which the stable memory consumption is calculated.  If the stable consumption average is close to the threshold by the increment ratio; threshold will be increased. 
Transport,MemoryThrottleIncrementRatio,double,0.1,Static,INTERNAL,src\Transport\TransportConfig.h,The ratio to increase the memory throttle limit. 
Transport,MemoryThrottleUpperLimitInMB,uint,16384,Dynamic,PUBLIC,src\Transport\TransportConfig.h,The upper limit of memory consumption.  If memory is above this limit for MemoryThrottleInterval; the process will be restarted.  0 if no upper limit. 
Transport,IncomingConnectionThrottle,uint,10000,Dynamic,INTERNAL,src\Transport\TransportConfig.h,Incoming connections will be dropped when reaching this threshold. 
Transport,AcceptRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(3),Dynamic,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. Delay before retry accept on failure 
Transport,ResolveOption,wstring,L"unspecified",Static,PUBLIC,src\Transport\TransportConfig.h,Determines how FQDN are resolved.  Valid values are "unspecified/ipv4/ipv6". 
Transport,TcpReceiveBufferSize,uint,64 * 1024,Static,INTERNAL,src\Transport\TransportConfig.h,
Transport,DefaultReceiveChunkSize,uint,4*1024,Static,INTERNAL,src\Transport\TransportConfig.h,Receive chunk size for non-secure mode 
Transport,SslReceiveChunkSize,uint,64*1024,Static,INTERNAL,src\Transport\TransportConfig.h,Chunk size of SSL receive buffer; it must be at least twice as large as SSL record size: SecPkgContext_StreamSizes{cbHeader + cbMaximumMessage + cbTrailer} 
Transport,DefaultOutgoingMessageExpiration,TimeSpan,Common::TimeSpan::FromSeconds(180),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. Indicate how long an outgoing message can be queued until being sent or dropped; set to 0 to disable 
Transport,OutgoingMessageExpirationCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. Indicate how often periodic outgoing message expiration check is done; set to 0 to disable 
Transport,ListenerStateTraceInterval,TimeSpan,Common::TimeSpan::FromMinutes(60),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. Interval of periodic listener state trace; set to 0 to disable. 
Transport,DefaultSendQueueSizeLimit,uint,64 * 1024 * 1024,Static,INTERNAL,src\Transport\TransportConfig.h,Default send queue size limit in bytes; per target; set to 0 to disable 
Transport,MinSendQueueCapacityInMessageCount,uint,1,Static,INTERNAL,src\Transport\TransportConfig.h,To make sure send queue size limit is large enough for a given send queue to hold at lease some messages at max message size. 
Transport,DynamicListenPortTrialMax,uint,3,Static,INTERNAL,src\Transport\TransportConfig.h,When listen address has hostname and "ResolveOption" set to "unspecified"; we need to listen on both IPv4 0.0.0.0 and IPv6 [::]; and we need to make sure the two listen ports are the same; otherwise we will have to publish two separate listen addresses instead of one with hostname. The following setting specify how many times we retry on finding a dynamic listen port common to IPv4 and IPv6. 
Transport,DynamicListenPortRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,PUBLIC,src\Transport\TransportConfig.h,Specify timespan in seconds. Retry delay of choosing dynamic listen port for hostname address; see DynamicListenPortTrialMax 
Transport,IpcMaxMessageSize,uint,16*1024*1024,Static,INTERNAL,src\Transport\TransportConfig.h,MaxMessageSize for IPC 
Transport,ConnectionIdleTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. Connection idle timeout: connection gets closed after being inactive for a while Setting to 0 or negative to disable 
Transport,ConnectionCleanupThreadMax,uint,10,Static,INTERNAL,src\Transport\TransportConfig.h,Maximum for the number of connection cleanup threads 
Transport,SendTargetSoftLimit,uint,1000,Static,DEPRECATED,src\Transport\TransportConfig.h,When cleaning up an idle connection; if its send target still have external reference counts; the following threshold will be checked. The connection is cleaned up only if the total number of send targets reaches the threshold. Setting to 0 or negative value will disable such threshold checking. 
Transport,ReceiveMissingThreshold,TimeSpan,Common::TimeSpan::FromSeconds(200),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. If no receive is posted for the threshold; something is probably stuck and an assert will be fired. Setting to 0 or negative to disable. 
Transport,FailFastProbabilityOnReceiveMissingDetected,double,0.1,Dynamic,INTERNAL,src\Transport\TransportConfig.h,Probability to fail fast when receive missing is detected 
Transport,ConnectionOpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,PUBLIC,src\Transport\TransportConfig.h,Specify timespan in seconds. Timeout for connection setup on both incoming and accepting side (including security negotiation in secure mode) 
Transport,ConnectionConfirmWaitLimit,TimeSpan,Common::TimeSpan::FromSeconds(10),Static,DEPRECATED,src\Transport\TransportConfig.h,Specify timespan in seconds. How long can messages be sent on a connection with unconfirmed instance 
Transport,IpcReconnectDelay,TimeSpan,Common::TimeSpan::FromSeconds(3),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. How long IpcClient waits before reconnecting; after connection failure 
Transport,IpcClientDisconnectLimit,uint,100,Dynamic,INTERNAL,src\Transport\TransportConfig.h,IpcClient exits process when disconnect count reaches the following limit; set to 0 to disable such process exit. 
Transport,DefaultCloseDelay,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,DEPRECATED,src\Transport\TransportConfig.h,Specify timespan in seconds. Default close delay for scheduled close 
Transport,CloseDrainTimeout,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. Timeout for draining send when closing a connection 
Transport,TcpFastLoopbackEnabled,bool,true,Dynamic,INTERNAL,src\Transport\TransportConfig.h,Whether to enable TCP fast loopback 
Transport,TcpNoDelayEnabled,bool,true,Static,INTERNAL,src\Transport\TransportConfig.h,Whether to enable TCP_NODELAY 
Transport,TcpListenBacklog,int,0,Static,INTERNAL,src\Transport\TransportConfig.h,TCP listen backlog; default value 0 is interpreted as SOMAXCONN 
Transport,InMemoryTransportEnabled,bool,false,Static,TEST,src\Transport\TransportConfig.h,Whether to enable in-memory channel. 
Transport,EventLoopConcurrency,uint,0,Static,INTERNAL,src\Transport\TransportConfig.h,Count of concurrent event loops for sockets; linux only; default to 0 to use processor current. 
Transport,EventLoopCleanupDelay,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. Cleanup delay for fd context used in event loop 
Transport,UseUnreliableForRequestReply,bool,false,Static,INTERNAL,src\Transport\TransportConfig.h,Enable support for Unreliable over IPC 
Transport,TestOnlyValidateIPv6Usage,bool,false,Static,TEST,src\Transport\TransportConfig.h,For testing IPv6 usage.  If true; transport will fail open if the endpoint is not an IPv6 address 
UnreliableTransport,MaxAllowedDelayInSeconds,TimeSpan,Common::TimeSpan::FromSeconds(40),Static,INTERNAL,src\Transport\UnreliableTransportConfig.h,Specify timespan in seconds. 
FabricTest,UseRandomReplicatorSettings,bool,false,Static,INTERNAL,test\FabricTest\FabricTestCommonConfig.h,
FabricTest,StoreReplicationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(90),Static,INTERNAL,test\FabricTest\FabricTestCommonConfig.h,Specify timespan in seconds. 
FabricTest,ServiceDescriptorLowRange,int64,0,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,ServiceDescriptorHighRange,int64,100,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,ResolveServiceBufferCount,int,1,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,NodeOpenMaxRetryCount,int,5,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,StoreClientCommandQuorumLossRetryCount,int,5,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,QueryOperationRetryCount,int,15,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,VerifyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,VerifyUpgradeTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,NamingOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,NamingOperationRetryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,NamingResolveRetryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,NamingOperationRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(2),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,QueryOperationRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,StoreClientTimeout,TimeSpan,Common::TimeSpan::FromSeconds(90),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,ReportLoadInterval,TimeSpan,Common::TimeSpan::FromSeconds(100),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,HostingOpenCloseTimeout,TimeSpan,Common::TimeSpan::FromSeconds(90),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,MaxClientSessionIdleTimeout,TimeSpan,Common::TimeSpan::FromSeconds(25),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,NodeDeallocationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,OpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(90),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,ApiDelayInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,DelayOpenAfterAbortNode,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,PredeploymentTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,AllowServiceAndFULossOnRebuild,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,AllowUnexpectedFUs,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,AllowHostFailureOnUpgrade,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,AllowQuoumLostFailoverUnitsOnVerify,bool,true,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,ChangeServiceLocationOnChangeRole,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,UseEtw,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,SkipDeleteVerifyForQuorumLostServices,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,AsyncNodeCloseEnabled,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,StartNodeCloseOnSeparateThread,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,UseInternalHealthClient,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,ReportHealthThroughHMPrimary,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,HealthVerificationEnabled,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,HealthFullVerificationEnabled,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,CloseAllNodesOnTestQuit,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,RatioOfVerifyDurationWhenFaultsAreAllowed,double,0.5,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,TraceFileName,wstring,L"FabricTest.trace",Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTestQueryWeights,PropertyGroup,FabricTestQueryWeights,None,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricRandomTest,MaxNodes,int,50,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,MinNodes,int,10,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,MaxDynamism,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,CalculatorServiceCount,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,TestStoreServiceCount,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,TestPersistedStoreServiceCount,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,MaxPartitions,int,5,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,MaxReplicas,int,5,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,ClientThreadCount,int,5,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,RandomVoteCount,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,DeleteServiceInterval,int,200,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,UpdateServiceInterval,int,0,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,ActivateDeactivateNodeInterval,int,10,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,TestPersistedStoreServiceWithSmallReplicationQueueCount,int,1,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,***************************************************************************************************************************************** These configs are to induce queue full scenarios due to slow copy pump on the test store service sets the number of test persisted store services that will use small replication queue sizes 
FabricRandomTest,TestPersistedStoreServiceSmallReplicationQueueSize,int,512,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,sets the primary and secondary replication queue size 
FabricRandomTest,TestPersistedStoreServiceDelayCopyFaultPeriod,TimeSpan,Common::TimeSpan::FromSeconds(10),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. sets the period for which copy pump delay fault is induced. The amount of delay itself on individual pump operations is based on the 'max' and 'min' api delay configuration 
FabricRandomTest,TestPersistedStoreServiceDelayCopyPumpIterationInterval,int,5,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Induces the above copy pump delay fault once after this configured count of test iterations 
FabricRandomTest,TestPersistedStoreServiceReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(180),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. The Replica Restart Wait Duration for the services that have repl fault enabled 
FabricRandomTest,MaxRatioOfFabricNodesToDeactivate,double,0.2,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Not more than this ratio of nodes would be deactivated in a cluster 
FabricRandomTest,NamingThreadCount,int,10,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,NameCount,int,100,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,PropertyPerNameCount,int,10,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,FullRebuildInterval,int,0,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,UpgradeInterval,int,0,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,ApplicationCount,int,0,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,ApplicationVersionsCount,int,10,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppMaxServicePackage,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppMaxCodePackage,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppMaxServiceTypes,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppMaxPartitionCount,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppMaxReplicaCount,int,5,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,UpgradeDomainSize,int,4,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,MaxAllowedMemoryInMB,int,400,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,WatchDogCount,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,VerifyQueryCount,int,1,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,MaxDynamismInterval,TimeSpan,Common::TimeSpan::FromSeconds(2),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,VerifyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,OpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,ClientOperationInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,NamingOperationInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,NamingOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(20),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,MaxAllowedMemoryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,MaxApiDelayInterval,TimeSpan,Common::TimeSpan::FromSeconds(6),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,MinApiDelayInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,WatchDogReportInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,AbortRatio,double,0.1,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,KillRuntimeRatio,double,0.1,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,ClientPutRatio,double,0.5,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppStatelessServiceRatio,double,0.15,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppPersistedServiceRatio,double,0.7,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,RatioOfVerifyDurationWhenFaultsAreAllowed,double,0.5,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,CalculatorServices,wstring,L"",Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,TestStoreServices,wstring,L"",Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,TestPersistedStoreServices,wstring,L"",Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,UnreliableTransportBehaviors,wstring,L"",Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,Properties,wstring,L"",Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,NodeOpenRetryErrors,wstring,L"AddressAlreadyInUse",Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,DoRandomUpgrade,bool,false,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AssertOnMemoryCheckFailure,bool,true,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,PreWriteStatusCatchupEnabledProbability,double,0.1,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FederationTest,OpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(100),Static,INTERNAL,test\FederationTest\FederationTestConfig.h,Specify timespan in seconds. 
FederationTest,RouteTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,test\FederationTest\FederationTestConfig.h,Specify timespan in seconds. 
FederationTest,CrossRingRouteTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,INTERNAL,test\FederationTest\FederationTestConfig.h,Specify timespan in seconds. 
FederationTest,SendTimeout,TimeSpan,Common::TimeSpan::FromSeconds(15),Static,INTERNAL,test\FederationTest\FederationTestConfig.h,Specify timespan in seconds. 
FederationTest,RouteRetryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(2),Static,INTERNAL,test\FederationTest\FederationTestConfig.h,Specify timespan in seconds. 
FederationTest,BroadcastReplyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,test\FederationTest\FederationTestConfig.h,Specify timespan in seconds. 
FederationTest,VerifyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(150),Static,INTERNAL,test\FederationTest\FederationTestConfig.h,Specify timespan in seconds. 
FederationRandomTest,MaxAllowedMemoryInMB,int,400,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxAllowedMemoryInMBForSsl,int,450,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxAllowedMemoryInMBForKerberos,int,500,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxAllowedMemoryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(3600),Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,Specify timespan in seconds. 
FederationRandomTest,TotalNodes,int,120,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxNodes,int,60,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MinNodes,int,20,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,AbortRatio,int,20,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxDynamism,int,3,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxRoutes,int,10,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxBroadcasts,int,2,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,SeedNodeCount,int,7,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxStoreWrites,int,5,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,WaitTime,TimeSpan,Common::TimeSpan::FromSeconds(130),Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,Specify timespan in seconds. 
FederationRandomTest,OpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,Specify timespan in seconds. 
FederationRandomTest,RouteTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,Specify timespan in seconds. 
FederationRandomTest,AssertOnMemoryCheckFailure,bool,true,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationTestCommon,UseLoopbackAddress,bool,true,Static,INTERNAL,test\FederationTestCommon\FederationTestCommonConfig.h,
LBSimulator,RandomSeed,int,12345,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,VerifyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(20),Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,Specify timespan in seconds. 
LBSimulator,FailTestIfVerifyTimeout,bool,false,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,MaxNodes,int,50,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,MaxServices,int,20,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,InitialServices,int,2,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,MaxPartitions,int,200,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,MaxReplicas,int,4,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,MaxDynamism,int,3,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,ServiceDynamicIterations,int,2,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,Level1FaultDomainCount,int,2,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,Level2FaultDomainCount,int,2,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,UpgradeDomainCount,int,3,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,MetricCount,int,20,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,ReportLoadProbability,double,0.2,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,AffinitySimulationThreshold,double,0.25,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,CapacityOrCapacityRatioChangeThreshold,double,0.3,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,DefaultMoveCost,uint,1,Dynamic,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
ModelChecker,VerifyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(20),Static,INTERNAL,test\ModelChecker\ModelCheckerConfig.h,Specify timespan in seconds. 
TestCommon,DumpCoreAtExit,bool,false,Static,INTERNAL,test\TestCommon\TestCommonConfig.h,
